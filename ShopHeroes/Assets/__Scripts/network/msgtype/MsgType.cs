using System.Collections;
using System;
using System.Collections.Generic;

public class MsgHead
{
	static uint msgSeqBase = 0;
	static uint keyMsgSeqBase = 0;

	uint _keyMsgSeq = 0;

	public bool IncKeyMsgSeq() { ++keyMsgSeqBase; _keyMsgSeq = keyMsgSeqBase; return true; }
	public uint GetKeyMsgSeq() { return _keyMsgSeq; }
}

public class MsgType	
{
	public const int PROTO_VERTION = 2020072201;	
	public const int BASE_CMD = 10000;	
	public const int Request_Gm_Command_Cmd = BASE_CMD + 50;	
	public const int Response_Gm_Command_Cmd = BASE_CMD + 51;	
	public const int Request_Client_Error_Cmd = BASE_CMD + 60;	
	public const int Response_Client_Error_Cmd = BASE_CMD + 61;	
	public const int Response_Client_Af_Cmd = BASE_CMD + 62;	
	public const int Request_Gate_Cmd = BASE_CMD + 88;	
	public const int Response_Gate_Cmd = BASE_CMD + 89;	
	public const int Request_Csv_List_Cmd = BASE_CMD + 92;	
	public const int Response_Csv_List_Cmd = BASE_CMD + 93;	
	public const int Request_Csv_Load_Cmd = BASE_CMD + 94;	
	public const int Response_Csv_Load_Cmd = BASE_CMD + 95;	
	public const int Request_Heartbeat_Cmd = BASE_CMD + 90;	
	public const int Response_Heartbeat_Cmd = BASE_CMD + 91;	
	public const int Request_Heartbeat2_Cmd = BASE_CMD + 97;	
	public const int Response_Heartbeat2_Cmd = BASE_CMD + 98;	
	public const int Response_Notify_Cmd = BASE_CMD + 96;	
	public const int Request_User_BindingQuery_Cmd = BASE_CMD + 70;	
	public const int Response_User_BindingQuery_Cmd = BASE_CMD + 71;	
	public const int Request_User_Binding_Cmd = BASE_CMD + 72;	
	public const int Response_User_Binding_Cmd = BASE_CMD + 73;	
	public const int Request_User_BindingClaim_Cmd = BASE_CMD + 74;	
	public const int Response_User_BindingClaim_Cmd = BASE_CMD + 75;	
	public const int Request_User_Login_Cmd = BASE_CMD + 100;	
	public const int Response_User_Login_Cmd = BASE_CMD + 101;	
	public const int Request_User_Create_Cmd = BASE_CMD + 102;	
	public const int Response_User_Create_Cmd = BASE_CMD + 103;	
	public const int Request_User_Data_Cmd = BASE_CMD + 104;	
	public const int Response_User_Data_Cmd = BASE_CMD + 105;	
	public const int Response_User_DataChange_Cmd = BASE_CMD + 106;	
	public const int Request_User_ChangeName_Cmd = BASE_CMD + 107;	
	public const int Response_User_ChangeName_Cmd = BASE_CMD + 108;	
	public const int Request_User_DressList_Cmd = BASE_CMD + 109;	
	public const int Response_User_DressList_Cmd = BASE_CMD + 110;	
	public const int Request_User_BuyDress_Cmd = BASE_CMD + 111;	
	public const int Response_User_BuyDress_Cmd = BASE_CMD + 112;	
	public const int Request_User_Custom_Cmd = BASE_CMD + 113;	
	public const int Response_User_Custom_Cmd = BASE_CMD + 114;	
	public const int Request_User_Detail_Cmd = BASE_CMD + 115;	
	public const int Response_User_Detail_Cmd = BASE_CMD + 116;	
	public const int Request_User_SetGuide_Cmd = BASE_CMD + 117;	
	public const int Response_User_SetGuide_Cmd = BASE_CMD + 118;	
	public const int Request_User_SkipGuide_Cmd = BASE_CMD + 119;	
	public const int Response_User_SkipGuide_Cmd = BASE_CMD + 120;	
	public const int Request_User_MainTask_Cmd = BASE_CMD + 121;	
	public const int Response_User_MainTask_Cmd = BASE_CMD + 122;	
	public const int Response_User_MainTaskChange_Cmd = BASE_CMD + 123;	
	public const int Request_User_MainTaskReward_Cmd = BASE_CMD + 124;	
	public const int Response_User_MainTaskReward_Cmd = BASE_CMD + 125;	
	public const int Request_User_TriggerGuide_Cmd = BASE_CMD + 126;	
	public const int Response_User_TriggerGuide_Cmd = BASE_CMD + 127;	
	public const int Request_User_CheckTriggerGuide_Cmd = BASE_CMD + 128;	
	public const int Response_User_CheckTriggerGuide_Cmd = BASE_CMD + 129;	
	public const int Request_User_TriggerGuideFurnitureUpgrade_Cmd = BASE_CMD + 147;	
	public const int Response_User_TriggerGuideFurnitureUpgrade_Cmd = BASE_CMD + 148;	
	public const int Request_User_PetInfo_Cmd = BASE_CMD + 130;	
	public const int Response_User_PetInfo_Cmd = BASE_CMD + 131;	
	public const int Request_User_PetChangeName_Cmd = BASE_CMD + 132;	
	public const int Response_User_PetChangeName_Cmd = BASE_CMD + 133;	
	public const int Request_User_PetFeed_Cmd = BASE_CMD + 134;	
	public const int Response_User_PetFeed_Cmd = BASE_CMD + 135;	
	public const int Request_User_PetInfoUpdate_Cmd = BASE_CMD + 136;	
	public const int Response_User_PetInfoUpdate_Cmd = BASE_CMD + 137;	
	public const int Request_User_BuyPetSlot_Cmd = BASE_CMD + 138;	
	public const int Response_User_BuyPetSlot_Cmd = BASE_CMD + 139;	
	public const int Request_User_BuyPet_Cmd = BASE_CMD + 140;	
	public const int Response_User_BuyPet_Cmd = BASE_CMD + 141;	
	public const int Response_User_UserPetInfoUpdate_Cmd = BASE_CMD + 142;	
	public const int Request_User_SetPetSlot_Cmd = BASE_CMD + 143;	
	public const int Response_User_SetPetSlot_Cmd = BASE_CMD + 144;	
	public const int Request_User_SetMainPet_Cmd = BASE_CMD + 145;	
	public const int Response_User_SetMainPet_Cmd = BASE_CMD + 146;	
	public const int Response_User_CommonReward_Cmd = BASE_CMD + 149;	
	public const int Request_User_BehaviorCounter_Cmd = BASE_CMD + 157;	
	public const int Response_User_BehaviorCounter_Cmd = BASE_CMD + 158;	
	public const int Request_User_RankList_Cmd = BASE_CMD + 159;	
	public const int Response_User_RankList_Cmd = BASE_CMD + 160;	
	public const int Response_User_ProsperityLevelUp_Cmd = BASE_CMD + 161;	
	public const int Request_User_ShopperLevelPurchaseReward_Cmd = BASE_CMD + 162;	
	public const int Response_User_ShopperLevelPurchaseReward_Cmd = BASE_CMD + 163;	
	public const int Request_User_DailyBoxInfo_Cmd = BASE_CMD + 164;	
	public const int Response_User_DailyBoxInfo_Cmd = BASE_CMD + 165;	
	public const int Request_User_DailyBoxReward_Cmd = BASE_CMD + 166;	
	public const int Response_User_DailyBoxReward_Cmd = BASE_CMD + 167;	
	public const int Request_User_ExchangeCodeReward_Cmd = BASE_CMD + 168;	
	public const int Response_User_ExchangeCodeReward_Cmd = BASE_CMD + 169;	
	public const int Request_User_SearchHeroInfo_Cmd = BASE_CMD + 170;	
	public const int Response_User_SearchHeroInfo_Cmd = BASE_CMD + 171;	
	public const int Request_Bag_Data_Cmd = BASE_CMD + 150;	
	public const int Response_Bag_Data_Cmd = BASE_CMD + 151;	
	public const int Response_Bag_ResourceChange_Cmd = BASE_CMD + 152;	
	public const int Request_Bag_Del_Cmd = BASE_CMD + 153;	
	public const int Response_Bag_Del_Cmd = BASE_CMD + 154;	
	public const int Request_Bag_LockEquip_Cmd = BASE_CMD + 155;	
	public const int Response_Bag_LockEquip_Cmd = BASE_CMD + 156;	
	public const int Request_Resource_ProductionList_Cmd = BASE_CMD + 200;	
	public const int Response_Resource_ProductionList_Cmd = BASE_CMD + 201;	
	public const int Request_Resource_ProductionRefresh_Cmd = BASE_CMD + 202;	
	public const int Response_Resource_ProductionRefresh_Cmd = BASE_CMD + 203;	
	public const int Request_Resource_BuyProduction_Cmd = BASE_CMD + 204;	
	public const int Response_Resource_BuyProduction_Cmd = BASE_CMD + 205;	
	public const int Request_Resource_BuyProductionDaily_Cmd = BASE_CMD + 206;	
	public const int Response_Resource_BuyProductionDaily_Cmd = BASE_CMD + 207;	
	public const int Response_Resource_ProductionChange_Cmd = BASE_CMD + 299;	
	public const int Response_Equip_BagEquipChange_Cmd = BASE_CMD + 300;	
	public const int Response_Equip_EquipInfoChange_Cmd = BASE_CMD + 301;	
	public const int Request_Equip_Data_Cmd = BASE_CMD + 302;	
	public const int Response_Equip_Data_Cmd = BASE_CMD + 303;	
	public const int Request_Equip_MakeStart_Cmd = BASE_CMD + 304;	
	public const int Response_Equip_MakeStart_Cmd = BASE_CMD + 305;	
	public const int Request_Equip_MakeRefresh_Cmd = BASE_CMD + 306;	
	public const int Response_Equip_MakeRefresh_Cmd = BASE_CMD + 307;	
	public const int Request_Equip_MakeEnd_Cmd = BASE_CMD + 308;	
	public const int Response_Equip_MakeEnd_Cmd = BASE_CMD + 309;	
	public const int Request_Equip_MakeFaster_Cmd = BASE_CMD + 310;	
	public const int Response_Equip_MakeFaster_Cmd = BASE_CMD + 311;	
	public const int Request_Equip_MakeImprove_Cmd = BASE_CMD + 314;	
	public const int Response_Equip_MakeImprove_Cmd = BASE_CMD + 315;	
	public const int Request_Equip_BuySlot_Cmd = BASE_CMD + 312;	
	public const int Response_Equip_BuySlot_Cmd = BASE_CMD + 313;	
	public const int Request_Equip_Activate_Cmd = BASE_CMD + 316;	
	public const int Response_Equip_Activate_Cmd = BASE_CMD + 317;	
	public const int Request_Equip_FavoriteEquip_Cmd = BASE_CMD + 318;	
	public const int Response_Equip_FavoriteEquip_Cmd = BASE_CMD + 319;	
	public const int Response_Equip_MakingList_Cmd = BASE_CMD + 320;	
	public const int Request_DailyTask_Data_Cmd = BASE_CMD + 400;	
	public const int Response_DailyTask_Data_Cmd = BASE_CMD + 401;	
	public const int Request_DailyTask_Reward_Cmd = BASE_CMD + 402;	
	public const int Response_DailyTask_Reward_Cmd = BASE_CMD + 403;	
	public const int Request_DailyTask_Refresh_Cmd = BASE_CMD + 404;	
	public const int Response_DailyTask_Refresh_Cmd = BASE_CMD + 405;	
	public const int Response_DailyTask_Change_Cmd = BASE_CMD + 406;	
	public const int Request_Active_Reward_Cmd = BASE_CMD + 407;	
	public const int Response_Active_Reward_Cmd = BASE_CMD + 408;	
	public const int Request_Achievement_Check_Cmd = BASE_CMD + 409;	
	public const int Response_Achievement_Check_Cmd = BASE_CMD + 410;	
	public const int Response_Achievement_Change_Cmd = BASE_CMD + 412;	
	public const int Request_Achievement_Reward_Cmd = BASE_CMD + 413;	
	public const int Response_Achievement_Reward_Cmd = BASE_CMD + 414;	
	public const int Request_AchievementRoad_Reward_Cmd = BASE_CMD + 415;	
	public const int Response_AchievementRoad_Reward_Cmd = BASE_CMD + 416;	
	public const int Request_Hero_Data_Cmd = BASE_CMD + 500;	
	public const int Response_Hero_Data_Cmd = BASE_CMD + 501;	
	public const int Request_Hero_FieldUnlock_Cmd = BASE_CMD + 502;	
	public const int Response_Hero_FieldUnlock_Cmd = BASE_CMD + 503;	
	public const int Request_Hero_BuyList_Cmd = BASE_CMD + 504;	
	public const int Response_Hero_BuyList_Cmd = BASE_CMD + 505;	
	public const int Request_Hero_BuyListRefresh_Cmd = BASE_CMD + 506;	
	public const int Response_Hero_BuyListRefresh_Cmd = BASE_CMD + 507;	
	public const int Request_Hero_Buy_Cmd = BASE_CMD + 508;	
	public const int Response_Hero_Buy_Cmd = BASE_CMD + 509;	
	public const int Request_Hero_Equip_Cmd = BASE_CMD + 510;	
	public const int Response_Hero_Equip_Cmd = BASE_CMD + 511;	
	public const int Request_Hero_WarriorRankUp_Cmd = BASE_CMD + 512;	
	public const int Response_Hero_WarriorRankUp_Cmd = BASE_CMD + 513;	
	public const int Request_Hero_Setting_Cmd = BASE_CMD + 514;	
	public const int Response_Hero_Setting_Cmd = BASE_CMD + 515;	
	public const int Request_Hero_Fire_Cmd = BASE_CMD + 516;	
	public const int Response_Hero_Fire_Cmd = BASE_CMD + 517;	
	public const int Request_Hero_Transfer_Cmd = BASE_CMD + 518;	
	public const int Response_Hero_Transfer_Cmd = BASE_CMD + 519;	
	public const int Request_Hero_DataRefresh_Cmd = BASE_CMD + 520;	
	public const int Response_Hero_DataRefresh_Cmd = BASE_CMD + 521;	
	public const int Request_Hero_Recover_Cmd = BASE_CMD + 522;	
	public const int Response_Hero_Recover_Cmd = BASE_CMD + 523;	
	public const int Request_Hero_FixBrokenEquip_Cmd = BASE_CMD + 524;	
	public const int Response_Hero_FixBrokenEquip_Cmd = BASE_CMD + 525;	
	public const int Request_Hero_EquipAuto_Cmd = BASE_CMD + 526;	
	public const int Response_Hero_EquipAuto_Cmd = BASE_CMD + 527;	
	public const int Response_Hero_Change_Cmd = BASE_CMD + 599;	
	public const int Request_Hero_ExchangeList_Cmd = BASE_CMD + 530;	
	public const int Response_Hero_ExchangeList_Cmd = BASE_CMD + 531;	
	public const int Request_Hero_Exchange_Cmd = BASE_CMD + 532;	
	public const int Response_Hero_Exchange_Cmd = BASE_CMD + 533;	
	public const int Response_Worker_MakeExp_Cmd = BASE_CMD + 600;	
	public const int Response_Hero_WorkerChange_Cmd = BASE_CMD + 601;	
	public const int Request_Hero_WorkerUnlock_Cmd = BASE_CMD + 600;	
	public const int Response_Hero_WorkerUnlock_Cmd = BASE_CMD + 601;	
	public const int Request_Shopper_Data_Cmd = BASE_CMD + 700;	
	public const int Response_Shopper_Data_Cmd = BASE_CMD + 701;	
	public const int Request_Shopper_Coming_Cmd = BASE_CMD + 702;	
	public const int Response_Shopper_Coming_Cmd = BASE_CMD + 703;	
	public const int Response_Shopper_Change_Cmd = BASE_CMD + 704;	
	public const int Request_Shopper_Chat_Cmd = BASE_CMD + 705;	
	public const int Response_Shopper_Chat_Cmd = BASE_CMD + 706;	
	public const int Request_Shopper_Discount_Cmd = BASE_CMD + 707;	
	public const int Response_Shopper_Discount_Cmd = BASE_CMD + 708;	
	public const int Request_Shopper_Double_Cmd = BASE_CMD + 709;	
	public const int Response_Shopper_Double_Cmd = BASE_CMD + 710;	
	public const int Request_Shopper_Refuse_Cmd = BASE_CMD + 711;	
	public const int Response_Shopper_Refuse_Cmd = BASE_CMD + 712;	
	public const int Request_Shopper_Checkout_Cmd = BASE_CMD + 713;	
	public const int Response_Shopper_Checkout_Cmd = BASE_CMD + 714;	
	public const int Request_Shopper_Recommend_Cmd = BASE_CMD + 715;	
	public const int Response_Shopper_Recommend_Cmd = BASE_CMD + 716;	
	public const int Request_Shopper_Queue_Cmd = BASE_CMD + 717;	
	public const int Response_Shopper_Queue_Cmd = BASE_CMD + 718;	
	public const int Request_Shopper_Energy_Cmd = BASE_CMD + 719;	
	public const int Response_Shopper_Energy_Cmd = BASE_CMD + 720;	
	public const int Request_PiggyBank_ClickData_Cmd = BASE_CMD + 800;	
	public const int Response_PiggyBank_BaseData_Cmd = BASE_CMD + 801;	
	public const int Request_PiggyBank_Props_Cmd = BASE_CMD + 802;	
	public const int Response_PiggyBank_Props_Cmd = BASE_CMD + 803;	
	public const int Request_Chat_Data_Cmd = BASE_CMD + 900;	
	public const int Response_Chat_Data_Cmd = BASE_CMD + 901;	
	public const int Request_Chat_Send_Cmd = BASE_CMD + 902;	
	public const int Response_Chat_Send_Cmd = BASE_CMD + 903;	
	public const int Request_Union_Data_Cmd = BASE_CMD + 950;	
	public const int Response_Union_Data_Cmd = BASE_CMD + 951;	
	public const int Request_Union_List_Cmd = BASE_CMD + 952;	
	public const int Response_Union_List_Cmd = BASE_CMD + 953;	
	public const int Request_Union_Create_Cmd = BASE_CMD + 954;	
	public const int Response_Union_Create_Cmd = BASE_CMD + 955;	
	public const int Request_Union_Enter_Cmd = BASE_CMD + 956;	
	public const int Response_Union_Enter_Cmd = BASE_CMD + 957;	
	public const int Request_Union_Leave_Cmd = BASE_CMD + 958;	
	public const int Response_Union_Leave_Cmd = BASE_CMD + 959;	
	public const int Request_Union_UserData_Cmd = BASE_CMD + 960;	
	public const int Response_Union_UserData_Cmd = BASE_CMD + 961;	
	public const int Request_Union_KickOut_Cmd = BASE_CMD + 962;	
	public const int Response_Union_KickOut_Cmd = BASE_CMD + 963;	
	public const int Request_Union_SetInfo_Cmd = BASE_CMD + 964;	
	public const int Response_Union_SetInfo_Cmd = BASE_CMD + 965;	
	public const int Request_Union_SetUserRole_Cmd = BASE_CMD + 966;	
	public const int Response_Union_SetUserRole_Cmd = BASE_CMD + 967;	
	public const int Request_Union_SearchUserData_Cmd = BASE_CMD + 968;	
	public const int Response_Union_SearchUserData_Cmd = BASE_CMD + 969;	
	public const int Response_Union_MessageInfo_Cmd = BASE_CMD + 970;	
	public const int Request_Union_MessageInfoRefresh_Cmd = BASE_CMD + 971;	
	public const int Response_Union_MessageInfoRefresh_Cmd = BASE_CMD + 972;	
	public const int Request_Union_MemberHelpList_Cmd = BASE_CMD + 973;	
	public const int Response_Union_MemberHelpList_Cmd = BASE_CMD + 974;	
	public const int Request_Union_SetHelp_Cmd = BASE_CMD + 975;	
	public const int Response_Union_SetHelp_Cmd = BASE_CMD + 976;	
	public const int Request_Union_HelpMember_Cmd = BASE_CMD + 977;	
	public const int Response_Union_HelpMember_Cmd = BASE_CMD + 978;	
	public const int Request_Union_TaskList_Cmd = BASE_CMD + 979;	
	public const int Response_Union_TaskList_Cmd = BASE_CMD + 980;	
	public const int Request_Union_StartUnionTask_Cmd = BASE_CMD + 981;	
	public const int Response_Union_StartUnionTask_Cmd = BASE_CMD + 982;	
	public const int Request_Union_CancelUnionTask_Cmd = BASE_CMD + 983;	
	public const int Response_Union_CancelUnionTask_Cmd = BASE_CMD + 984;	
	public const int Response_Union_UnionTaskChange_Cmd = BASE_CMD + 985;	
	public const int Request_Union_RewardUnionTask_Cmd = BASE_CMD + 986;	
	public const int Response_Union_RewardUnionTask_Cmd = BASE_CMD + 987;	
	public const int Request_Union_CheckUnionTask_Cmd = BASE_CMD + 988;	
	public const int Response_Union_CheckUnionTask_Cmd = BASE_CMD + 989;	
	public const int Request_Union_AccelUnionTask_Cmd = BASE_CMD + 990;	
	public const int Response_Union_AccelUnionTask_Cmd = BASE_CMD + 991;	
	public const int Request_Union_UnionTaskRankList_Cmd = BASE_CMD + 992;	
	public const int Response_Union_UnionTaskRankList_Cmd = BASE_CMD + 993;	
	public const int Request_Union_ScienceList_Cmd = BASE_CMD + 940;	
	public const int Response_Union_ScienceList_Cmd = BASE_CMD + 941;	
	public const int Request_Union_ScienceSkillList_Cmd = BASE_CMD + 942;	
	public const int Response_Union_ScienceSkillList_Cmd = BASE_CMD + 943;	
	public const int Request_Union_ScienceUpgrade_Cmd = BASE_CMD + 944;	
	public const int Response_Union_ScienceUpgrade_Cmd = BASE_CMD + 945;	
	public const int Request_Union_ScienceSkillUse_Cmd = BASE_CMD + 946;	
	public const int Response_Union_ScienceSkillUse_Cmd = BASE_CMD + 947;	
	public const int Request_Union_ScienceSkillRefresh_Cmd = BASE_CMD + 948;	
	public const int Response_Union_ScienceSkillRefresh_Cmd = BASE_CMD + 949;	
	public const int Request_Union_TaskResult_Cmd = BASE_CMD + 930;	
	public const int Response_Union_TaskResult_Cmd = BASE_CMD + 931;	
	public const int Request_Union_KickOutMessage_Cmd = BASE_CMD + 932;	
	public const int Response_Union_KickOutMessage_Cmd = BASE_CMD + 933;	
	public const int Request_Union_Impeach_Cmd = BASE_CMD + 934;	
	public const int Response_Union_Impeach_Cmd = BASE_CMD + 935;	
	public const int Request_Market_BoothCount_Cmd = BASE_CMD + 1000;	
	public const int Response_Market_BoothCount_Cmd = BASE_CMD + 1001;	
	public const int Request_Market_BoothData_Cmd = BASE_CMD + 1002;	
	public const int Response_Market_BoothData_Cmd = BASE_CMD + 1003;	
	public const int Request_Market_ListedItems_Cmd = BASE_CMD +1004;	
	public const int Request_Market_DealWith_Cmd = BASE_CMD + 1006;	
	public const int Request_Market_OffShelf_Cmd = BASE_CMD + 1008;	
	public const int Request_Market_OneItemList_Cmd = BASE_CMD + 1010;	
	public const int Response_Market_OneItemList_Cmd = BASE_CMD + 1011;	
	public const int Request_Market_OneItemRef_Cmd = BASE_CMD + 1012;	
	public const int Response_Market_OneItemRef_Cmd = BASE_CMD + 1013;	
	public const int Request_Market_BuyOrSellOne_Cmd = BASE_CMD + 1014;	
	public const int Response_Market_BuyOrSellOne_Cmd = BASE_CMD + 1015;	
	public const int Request_Market_UpdatePut_Cmd = BASE_CMD + 1016;	
	public const int Request_Design_Data_Cmd = BASE_CMD + 1110;	
	public const int Response_Design_Data_Cmd = BASE_CMD + 1111;	
	public const int Request_Design_ShopUpgrade_Cmd = BASE_CMD + 1112;	
	public const int Response_Design_ShopUpgrade_Cmd = BASE_CMD + 1113;	
	public const int Request_Design_ShopRefresh_Cmd = BASE_CMD + 1114;	
	public const int Response_Design_ShopRefresh_Cmd = BASE_CMD + 1115;	
	public const int Request_Design_ShopFinish_Cmd = BASE_CMD + 1116;	
	public const int Response_Design_ShopFinish_Cmd = BASE_CMD + 1117;	
	public const int Request_Design_ShopImmediately_Cmd = BASE_CMD + 1118;	
	public const int Response_Design_ShopImmediately_Cmd = BASE_CMD + 1119;	
	public const int Request_Design_Buy_Cmd = BASE_CMD + 1120;	
	public const int Response_Design_Buy_Cmd = BASE_CMD + 1121;	
	public const int Request_Design_Move_Cmd = BASE_CMD + 1122;	
	public const int Response_Design_Move_Cmd = BASE_CMD + 1123;	
	public const int Request_Design_Upgrade_Cmd = BASE_CMD + 1124;	
	public const int Response_Design_Upgrade_Cmd = BASE_CMD + 1125;	
	public const int Request_Design_Refresh_Cmd = BASE_CMD + 1126;	
	public const int Response_Design_Refresh_Cmd = BASE_CMD + 1127;	
	public const int Request_Design_Finish_Cmd = BASE_CMD + 1128;	
	public const int Response_Design_Finish_Cmd = BASE_CMD + 1129;	
	public const int Request_Design_Immediately_Cmd = BASE_CMD + 1130;	
	public const int Response_Design_Immediately_Cmd = BASE_CMD + 1131;	
	public const int Request_Design_InStore_Cmd = BASE_CMD + 1132;	
	public const int Response_Design_InStore_Cmd = BASE_CMD + 1133;	
	public const int Request_Design_SetFloor_Cmd = BASE_CMD + 1134;	
	public const int Response_Design_SetFloor_Cmd = BASE_CMD + 1135;	
	public const int Request_Design_SetWall_Cmd = BASE_CMD + 1136;	
	public const int Response_Design_SetWall_Cmd = BASE_CMD + 1137;	
	public const int Response_Design_CounterChange_Cmd = BASE_CMD + 1138;	
	public const int Response_Design_FloorChange_Cmd = BASE_CMD + 1139;	
	public const int Response_Design_StoreBasketChange_Cmd = BASE_CMD + 1140;	
	public const int Response_Design_ResBasketChange_Cmd = BASE_CMD + 1141;	
	public const int Response_Design_ShelfChange_Cmd = BASE_CMD + 1142;	
	public const int Response_Design_FurnitureChange_Cmd = BASE_CMD + 1143;	
	public const int Request_Design_OnShelf_Cmd = BASE_CMD + 1144;	
	public const int Response_Design_OnShelf_Cmd = BASE_CMD + 1145;	
	public const int Request_Design_OffShelf_Cmd = BASE_CMD + 1146;	
	public const int Response_Design_OffShelf_Cmd = BASE_CMD + 1147;	
	public const int Response_Design_ShelfEquipChange_Cmd = BASE_CMD + 1148;	
	public const int Request_Hero_UseItem_Cmd = BASE_CMD + 1201;	
	public const int Response_Hero_UseItem_Cmd = BASE_CMD + 1202;	
	public const int Request_Hero_UseHeroStatusItem_Cmd = BASE_CMD + 1203;	
	public const int Response_Hero_UseHeroStatusItem_Cmd = BASE_CMD + 1204;	
	public const int Request_Hero_UseEquipItem_Cmd = BASE_CMD + 1205;	
	public const int Response_Hero_UseEquipItem_Cmd = BASE_CMD + 1206;	
	public const int Request_City_BuildData_Cmd = BASE_CMD + 1301;	
	public const int Response_City_BuildData_Cmd = BASE_CMD + 1302;	
	public const int Request_City_BuildCost_Cmd = BASE_CMD + 1303;	
	public const int Response_City_BuildDataChanged_Cmd = BASE_CMD + 1304;	
	public const int Request_City_BuildingRankData_Cmd = BASE_CMD + 1305;	
	public const int Response_City_BuildingRankData_Cmd = BASE_CMD + 1306;	
	public const int Request_Explore_BuySlot_Cmd = BASE_CMD + 1400;	
	public const int Response_Explore_BuySlot_Cmd = BASE_CMD + 1401;	
	public const int Request_Explore_Data_Cmd = BASE_CMD + 1402;	
	public const int Response_Explore_Data_Cmd = BASE_CMD + 1403;	
	public const int Request_Explore_Start_Cmd = BASE_CMD + 1404;	
	public const int Response_Explore_Start_Cmd = BASE_CMD + 1405;	
	public const int Request_Explore_End_Cmd = BASE_CMD + 1406;	
	public const int Response_Explore_End_Cmd = BASE_CMD + 1407;	
	public const int Request_Explore_Unlock_Cmd = BASE_CMD + 1408;	
	public const int Response_Explore_Unlock_Cmd = BASE_CMD + 1409;	
	public const int Request_ExploreSlot_Data_Cmd = BASE_CMD + 1410;	
	public const int Response_ExploreSlot_Data_Cmd = BASE_CMD + 1411;	
	public const int Request_Explore_Refresh_Cmd = BASE_CMD + 1412;	
	public const int Response_Explore_Refresh_Cmd = BASE_CMD + 1413;	
	public const int Request_Explore_Immediately_Cmd = BASE_CMD + 1414;	
	public const int Response_Explore_Immediately_Cmd = BASE_CMD + 1415;	
	public const int Request_Explore_RewardVip_Cmd = BASE_CMD + 1416;	
	public const int Response_Explore_RewardVip_Cmd = BASE_CMD + 1417;	
	public const int Request_TreasureBox_Data_Cmd = BASE_CMD + 1500;	
	public const int Response_TreasureBox_Data_Cmd = BASE_CMD + 1501;	
	public const int Request_TreasureBox_Open_Cmd = BASE_CMD + 1502;	
	public const int Response_TreasureBox_Open_Cmd = BASE_CMD + 1503;	
	public const int Request_Mail_List_Cmd = BASE_CMD + 1600;	
	public const int Response_Mail_List_Cmd = BASE_CMD + 1601;	
	public const int Request_Mail_Read_Cmd = BASE_CMD + 1602;	
	public const int Response_Mail_Read_Cmd = BASE_CMD + 1603;	
	public const int Request_Mail_Claimed_Cmd = BASE_CMD + 1604;	
	public const int Response_Mail_Claimed_Cmd = BASE_CMD + 1605;	
	public const int Request_Mail_Delete_Cmd = BASE_CMD + 1606;	
	public const int Response_Mail_Delete_Cmd = BASE_CMD + 1607;	
	public const int Request_Mail_Feedback_Cmd = BASE_CMD + 1608;	
	public const int Response_Mail_Feedback_Cmd = BASE_CMD + 1609;	
	public const int Request_Activity_List_Cmd = BASE_CMD + 1700;	
	public const int Response_Activity_List_Cmd = BASE_CMD + 1701;	
	public const int Request_Activity_DailyGiftReward_Cmd = BASE_CMD + 1702;	
	public const int Response_Activity_DailyGiftReward_Cmd = BASE_CMD + 1703;	
	public const int Request_Activity_SevenDayCheck_Cmd = BASE_CMD + 1704;	
	public const int Response_Activity_SevenDayCheck_Cmd = BASE_CMD + 1705;	
	public const int Request_Activity_SevenDayReward_Cmd = BASE_CMD + 1706;	
	public const int Response_Activity_SevenDayReward_Cmd = BASE_CMD + 1707;	
	public const int Request_Activity_SevenDayListReward_Cmd = BASE_CMD + 1708;	
	public const int Response_Activity_SevenDayListReward_Cmd = BASE_CMD + 1709;	
	public const int Response_Activity_SevenDayChange_Cmd = BASE_CMD + 1710;	
	public const int Response_Activity_SevenDayListChange_Cmd = BASE_CMD + 1711;	
	public const int Response_Activity_Buff_Info_Cmd = BASE_CMD + 1712;	
	public const int Request_Activity_Buff_Refresh_Cmd = BASE_CMD + 1713;	
	public const int Response_Activity_Buff_Refresh_Cmd = BASE_CMD + 1714;	
	public const int Request_Activity_Buff_Update_Cmd = BASE_CMD + 1715;	
	public const int Response_Activity_Buff_Update_Cmd = BASE_CMD + 1716;	
	public const int Request_Activity_Data_Cmd = BASE_CMD + 1717;	
	public const int Response_Activity_Data_Cmd = BASE_CMD + 1718;	
	public const int Request_Activity_Battle_Cmd = BASE_CMD + 1719;	
	public const int Response_Activity_Battle_Cmd = BASE_CMD + 1720;	
	public const int Request_Jackpot_Data_Cmd = BASE_CMD + 1800;	
	public const int Response_Jackpot_Data_Cmd = BASE_CMD + 1801;	
	public const int Request_Jackpot_Refresh_Cmd = BASE_CMD + 1802;	
	public const int Response_Jackpot_Refresh_Cmd = BASE_CMD + 1803;	
	public const int Request_User_Lottery_Cmd = BASE_CMD + 1804;	
	public const int Response_User_Lottery_Cmd = BASE_CMD + 1805;	
	public const int Request_User_LotteryTenth_Cmd = BASE_CMD + 1806;	
	public const int Response_User_LotteryTenth_Cmd = BASE_CMD + 1807;	
	public const int Request_Cumulative_Reward_Cmd = BASE_CMD + 1808;	
	public const int Response_Cumulative_Reward_Cmd = BASE_CMD + 1809;	
	public const int Response_Roulette_Recording_Cmd = BASE_CMD + 1810;	
	public const int Request_Prize_Free_Cmd = BASE_CMD + 1811;	
	public const int Response_Prize_Free_Cmd = BASE_CMD + 1812;	
	public const int Response_Rubbish_List_Cmd = BASE_CMD + 1900;	
	public const int Request_Rubbish_Refresh_Cmd = BASE_CMD + 1901;	
	public const int Response_Rubbish_Refresh_Cmd = BASE_CMD + 1901;	
	public const int Request_Rubbish_Claimed_Cmd = BASE_CMD + 1902;	
	public const int Response_Rubbish_Claimed_Cmd = BASE_CMD + 1903;	
	public const int Request_Pay_Order_Cmd = BASE_CMD + 2000;	
	public const int Response_Pay_Order_Cmd = BASE_CMD + 2001;	
	public const int Request_Pay_Balance_Cmd = BASE_CMD + 2002;	
	public const int Response_Pay_Balance_Cmd = BASE_CMD + 2003;	
	public const int Request_Pay_StoreList_Cmd = BASE_CMD + 2004;	
	public const int Response_Pay_StoreList_Cmd = BASE_CMD + 2005;	
	public const int Request_Pay_StoreRefresh_Cmd = BASE_CMD + 2006;	
	public const int Response_Pay_StoreRefresh_Cmd = BASE_CMD + 2007;	
	public const int Request_Pay_StoreBuy_Cmd = BASE_CMD + 2008;	
	public const int Response_Pay_StoreBuy_Cmd = BASE_CMD + 2009;	
	public const int Request_Pay_BuyVIP_Cmd = BASE_CMD + 2010;	
	public const int Response_Pay_BuyVIP_Cmd = BASE_CMD + 2011;	
	public const int Response_Pay_VIPChange_Cmd = BASE_CMD + 2012;	
	public const int Request_Pay_GeneralPurchase_Cmd = BASE_CMD + 2013;	
	public const int Response_Pay_GeneralPurchase_Cmd = BASE_CMD + 2014;	
	public const int Request_Pay_DailySale_Cmd = BASE_CMD + 2015;	
	public const int Response_Pay_DailySale_Cmd = BASE_CMD + 2016;	
	public const int Request_Pay_DirectPurchase_Cmd = BASE_CMD + 2017;	
	public const int Response_Pay_DirectPurchase_Cmd = BASE_CMD + 2018;	
	public const int Request_Pay_ShopperLevelPurchase_Cmd = BASE_CMD + 2019;	
	public const int Response_Pay_ShopperLevelPurchase_Cmd = BASE_CMD + 2020;	
	public const int Request_Pay_IOSBuy_Cmd = BASE_CMD + 2021;	
	public const int Response_Pay_IOSBuy_Cmd = BASE_CMD + 2022;	
	public const int Request_Pay_AmountCheck_Cmd = BASE_CMD + 2023;	
	public const int Response_Pay_AmountCheck_Cmd = BASE_CMD + 2024;	
	public const int Request_Pay_AmountReward_Cmd = BASE_CMD + 2025;	
	public const int Response_Pay_AmountReward_Cmd = BASE_CMD + 2026;	
	public const int Request_Pay_OrderCancel_Cmd = BASE_CMD + 2027;	
	public const int Response_Pay_OrderCancel_Cmd = BASE_CMD + 2028;	
	public const int Request_Pay_GoldVip_Cmd = BASE_CMD + 2029;	
	public const int Response_Pay_GoldVip_Cmd = BASE_CMD + 2030;	
	public const int Request_Pay_GoldVipReward_Cmd = BASE_CMD + 2031;	
	public const int Response_Pay_GoldVipReward_Cmd = BASE_CMD + 2032;	
	public const int Request_Pay_PointActivityPurchase_Cmd = BASE_CMD + 2033;	
	public const int Response_Pay_PointActivityPurchase_Cmd = BASE_CMD + 2034;	
	public const int Request_OperatingActivity_Check_Cmd = BASE_CMD + 2100;	
	public const int Response_OperatingActivity_Check_Cmd = BASE_CMD + 2101;	
	public const int Request_OperatingActivity_CheckReward_Cmd = BASE_CMD + 2102;	
	public const int Response_OperatingActivity_CheckReward_Cmd = BASE_CMD + 2103;	
	public const int Request_OperatingActivity_CheckExchange_Cmd = BASE_CMD + 2104;	
	public const int Response_OperatingActivity_CheckExchange_Cmd = BASE_CMD + 2105;	
	public const int Request_OperatingActivity_Reward_Cmd = BASE_CMD + 2106;	
	public const int Response_OperatingActivity_Reward_Cmd = BASE_CMD + 2107;	
	public const int Request_OperatingActivity_Exchange_Cmd = BASE_CMD + 2108;	
	public const int Response_OperatingActivity_Exchange_Cmd = BASE_CMD + 2109;	
	public const int Request_OperatingActivity_UpdateInfo_Cmd = BASE_CMD + 2110;	
	public const int Response_OperatingActivity_UpdateInfo_Cmd = BASE_CMD + 2111;	
	public const int Request_OperatingActivity_UpdateExchange_Cmd = BASE_CMD + 2112;	
	public const int Response_OperatingActivity_UpdateExchange_Cmd = BASE_CMD + 2113;	
	public const int Response_OperatingActivity_EquipMakeInfo_Cmd = BASE_CMD + 2114;	
	public const int Request_OperatingActivity_DataCheck_Cmd = BASE_CMD + 2115;	
	public const int Response_OperatingActivity_DataCheck_Cmd = BASE_CMD + 2116;	
	public const int Response_OperatingActivity_ActivityPointChange_Cmd = BASE_CMD + 2117;	
	public const int Response_OperatingActivity_CoinChange_Cmd = BASE_CMD + 2118;	
	public const int Response_OperatingActivity_RewardChange_Cmd = BASE_CMD + 2119;	
	public const int Request_OperatingActivity_DailyCoin_Cmd = BASE_CMD + 2120;	
	public const int Response_OperatingActivity_DailyCoin_Cmd = BASE_CMD + 2121;	
	public const int Request_Pay_OperatingActivityPurchase_Cmd = BASE_CMD + 2122;	
	public const int Response_Pay_OperatingActivityPurchase_Cmd = BASE_CMD + 2123;	
	public const int Request_OperatingActivity_UnionRankList_Cmd = BASE_CMD + 2124;	
	public const int Response_OperatingActivity_UnionRankList_Cmd = BASE_CMD + 2125;	
	public const int Request_OperatingActivity2_DataCheck_Cmd = BASE_CMD + 2126;	
	public const int Response_OperatingActivity2_DataCheck_Cmd = BASE_CMD + 2127;	
	public const int Request_OperatingActivity2_CheckReward_Cmd = BASE_CMD + 2128;	
	public const int Response_OperatingActivity2_CheckReward_Cmd = BASE_CMD + 2129;	
	public const int Request_OperatingActivity2_Reward_Cmd = BASE_CMD + 2130;	
	public const int Response_OperatingActivity2_Reward_Cmd = BASE_CMD + 2131;	
	public const int Response_OperatingActivity2_ActivityPointChange_Cmd = BASE_CMD + 2132;	
	public const int Response_OperatingActivity2_RewardChange_Cmd = BASE_CMD + 2133;	
	public const int Request_OperatingActivity2_DailyReward_Cmd = BASE_CMD + 2134;	
	public const int Response_OperatingActivity2_DailyReward_Cmd = BASE_CMD + 2135;	
	public const int Request_OperatingActivity2_UnionRankList_Cmd = BASE_CMD + 2136;	
	public const int Response_OperatingActivity2_UnionRankList_Cmd = BASE_CMD + 2137;	
	public const int Request_OperatingActivity2_ExploreStart_Cmd = BASE_CMD + 2138;	
	public const int Response_OperatingActivity2_ExploreStart_Cmd = BASE_CMD + 2139;	
	public const int Request_OperatingActivity2_ExploreEnd_Cmd = BASE_CMD + 2140;	
	public const int Response_OperatingActivity2_ExploreEnd_Cmd = BASE_CMD + 2141;	
	public const int Request_OperatingActivity2_ExploreImmediately_Cmd = BASE_CMD + 2142;	
	public const int Response_OperatingActivity2_ExploreImmediately_Cmd = BASE_CMD + 2143;	
	public const int Request_User_GuideTask_Cmd = BASE_CMD + 2200;	
	public const int Response_User_GuideTask_Cmd = BASE_CMD + 2201;	
	public const int Response_User_GuideTaskChange_Cmd = BASE_CMD + 2202;	
	public const int Request_User_GuideTaskReward_Cmd = BASE_CMD + 2203;	
	public const int Response_User_GuideTaskReward_Cmd = BASE_CMD + 2204;	
	public const int Request_AD_Start_Cmd = BASE_CMD + 2300;	
	public const int Response_AD_Start_Cmd = BASE_CMD + 2301;	
	public const int Request_AD_End_Cmd = BASE_CMD + 2302;	
	public const int Response_AD_End_Cmd = BASE_CMD + 2303;	
	public const int Request_AD_UserData_Cmd = BASE_CMD + 2304;	
	public const int Response_AD_UserData_Cmd = BASE_CMD + 2305;	
	public const int Request_User_OnlineRewardList_Cmd = BASE_CMD + 2400;	
	public const int Response_User_OnlineRewardList_Cmd = BASE_CMD + 2401;	
	public const int Request_User_OnlineRewardListReward_Cmd = BASE_CMD + 2402;	
	public const int Response_User_OnlineRewardListReward_Cmd = BASE_CMD + 2403;	
	public const int Request_Tower_Info_Cmd = BASE_CMD + 2500;	
	public const int Response_Tower_Info_Cmd = BASE_CMD + 2501;	
	public const int Request_Tower_ExploreStart_Cmd = BASE_CMD + 2502;	
	public const int Response_Tower_ExploreStart_Cmd = BASE_CMD + 2503;	
	public const int Request_Tower_ExploreEnd_Cmd = BASE_CMD + 2504;	
	public const int Response_Tower_ExploreEnd_Cmd = BASE_CMD + 2505;	
	public const int Request_Tower_ExploreImmediately_Cmd = BASE_CMD + 2506;	
	public const int Response_Tower_ExploreImmediately_Cmd = BASE_CMD + 2507;	
	public const int Request_Tower_Reward_Cmd = BASE_CMD + 2508;	
	public const int Response_Tower_Reward_Cmd = BASE_CMD + 2509;	
	public const int Request_PointActivity_CheckData_Cmd = BASE_CMD + 2600;	
	public const int Response_PointActivity_CheckData_Cmd = BASE_CMD + 2601;	
	public const int Request_PointActivity_Reward_Cmd = BASE_CMD + 2602;	
	public const int Response_PointActivity_Reward_Cmd = BASE_CMD + 2603;	
	public const int Request_PointActivity_Exchange_Cmd = BASE_CMD + 2604;	
	public const int Response_PointActivity_Exchange_Cmd = BASE_CMD + 2605;	
	public const int Response_PointActivity_TaskChange_Cmd = BASE_CMD + 2606;	
	public const int Request_PointActivity_CheckExchange_Cmd = BASE_CMD + 2607;	
	public const int Response_PointActivity_CheckExchange_Cmd = BASE_CMD + 2608;	
	public const int Request_PointActivity_CheckExchange2_Cmd = BASE_CMD + 2609;	
	public const int Response_PointActivity_CheckExchange2_Cmd = BASE_CMD + 2610;	
	public const int Request_PointActivity2_CheckData_Cmd = BASE_CMD + 2650;	
	public const int Response_PointActivity2_CheckData_Cmd = BASE_CMD + 2651;	
	public const int Response_PointActivity2_TaskChange_Cmd = BASE_CMD + 2652;	
	public const int Request_PointActivity2_TaskReward_Cmd = BASE_CMD + 2653;	
	public const int Response_PointActivity2_TaskReward_Cmd = BASE_CMD + 2654;	
	public const int Request_PointActivity2_CheckReward_Cmd = BASE_CMD + 2655;	
	public const int Response_PointActivity2_CheckReward_Cmd = BASE_CMD + 2656;	
	public const int Request_PointActivity2_Reward_Cmd = BASE_CMD + 2657;	
	public const int Response_PointActivity2_Reward_Cmd = BASE_CMD + 2658;	
	public const int Response_PointActivity2_RewardChange_Cmd = BASE_CMD + 2659;	
	public const int Response_PointActivity2_ActivityPointChange_Cmd = BASE_CMD + 2660;	
	public const int Request_PointActivity2_UnionRankList_Cmd = BASE_CMD + 2661;	
	public const int Response_PointActivity2_UnionRankList_Cmd = BASE_CMD + 2662;	
	public const int Request_Dragon_CheckData_Cmd = BASE_CMD + 2700;	
	public const int Response_Dragon_CheckData_Cmd = BASE_CMD + 2701;	
	public const int Request_Dragon_CheckReward_Cmd = BASE_CMD + 2702;	
	public const int Response_Dragon_CheckReward_Cmd = BASE_CMD + 2703;	
	public const int Response_Dragon_StageChange_Cmd = BASE_CMD + 2704;	
	public const int Response_Dragon_PointChange_Cmd = BASE_CMD + 2705;	
	public const int Request_Dragon_Reward_Cmd = BASE_CMD + 2706;	
	public const int Response_Dragon_Reward_Cmd = BASE_CMD + 2707;	
	public const int Response_Dragon_RewardChange_Cmd = BASE_CMD + 2708;	
	public const int Request_Dragon_SetHero_Cmd = BASE_CMD + 2709;	
	public const int Response_Dragon_SetHero_Cmd = BASE_CMD + 2710;	
	public const int Request_Dragon_SetEquip_Cmd = BASE_CMD + 2711;	
	public const int Response_Dragon_SetEquip_Cmd = BASE_CMD + 2712;	
	public const int Request_Dragon_SetItem_Cmd = BASE_CMD + 2713;	
	public const int Response_Dragon_SetItem_Cmd = BASE_CMD + 2714;	

}

public enum EErrorCode	
{
	EEC_Success = 0,	
	EEC_AppVersionUpdated = 101,	
	EEC_ResVersionUpdated = 102,	
	EEC_DuplicateLogin = 103,	
	EEC_BanLogin = 104,	
	EEC_BanChat = 105,	
	EEC_ServerMaintain = 106,	
	EEC_BindingFail = 201,	
	EEC_PayNotOpen = 202,	
	EEC_TransactionNotOpen = 203,	
	EEC_NetworkError = 10000,	
	EEC_NeedReLogin = 10001,	
	EEC_Union_HaveNoUnionData = 10002,	
	EEC_Union_NoMemberLimitData = 10003,	
	EEC_Union_ReachedMemberLimit = 10004,	
	EEC_Union_IsDeleted = 10005,	
	EEC_Union_CantEnterUnion = 10006,	
	EEC_Union_LevelLimit = 10007,	
	EEC_Union_NoUnionName = 10008,	
	EEC_Union_NextUnionId = 10009,	
	EEC_Union_UnionNameExisted = 10010,	
	EEC_Union_SettingPersonal = 10011,	
	EEC_Union_Other = 10012,	
	EEC_Union_AlreadyImpeach = 10013,	
	EEC_Union_ImpeachNotEnough = 10014,	
	EEC_Union_ImpeachFail = 10015,	
	EEC_Union_InvestLimit = 10016,	
	EEC_TriggerGuide_FurnitureUpgrade = 11001,	
	EEC_ExchangeCodeReward_Failed = 12001,	
	EEC_ExchangeCodeReward_CodeUsed = 12002,	
	EEC_ExchangeCodeReward_Rewarded = 12003,	
	EEC_ExchangeCodeReward_TimeOut = 12004,	
	EEC_ExchangeCodeReward_NotTime = 12005,	
	EEC_Worker_UnlockFailed = 13001,	
	EEC_OperatingActivity_DataError = 20000,	
	EEC_OperatingActivity_Over = 20001,	
	EEC_OperatingActivity_RewardOver = 20002,	
	EEC_OperatingActivity_RewardNotEnoughPoint = 20003,	
	EEC_OperatingActivity_Rewarded = 20004,	
	EEC_OperatingActivity_NotCanReward = 20005,	
	EEC_OperatingActivity_ExchangeOver = 20006,	
	EEC_OperatingActivity_ExchangeNotEnoughCoin = 20007,	
	EEC_OperatingActivity_ExchangeRefreshNotEnoughCoin = 20008,	
	EEC_OperatingActivity_UserRewardNotEnoughPoint = 20009,	
	EEC_Activity_ExpeditionError = 30000,	
	EEC_GoldCastle_DataError = 40000,	
	EEC_GoldCastle_Over = 40001,	
	EEC_GoldCastle_RewardOver = 40002,	
	EEC_GoldCastle_RewardNotEnoughPoint = 40003,	
	EEC_GoldCastle_Rewarded = 40004,	
	EEC_GoldCastle_NotCanReward = 40005,	
	EEC_GoldCastle_UserRewardNotEnoughPoint = 40006,	
	EEC_PointActivity_DataError = 50000,	
	EEC_PointActivity_Over = 50001,	
	EEC_PointActivity_RewardOver = 50002,	
	EEC_PointActivity_Rewarded = 50003,	
	EEC_PointActivity_NotCanReward = 50004,	
	EEC_PointActivity_UserRewardNotEnoughPoint = 50005,	
	EEC_PointActivity_ExchangeOver = 50006,	
	EEC_PointActivity_ExchangeNotEnoughCoin = 50007,	
	EEC_PointActivity2_DataError = 51000,	
	EEC_PointActivity2_Over = 51001,	
	EEC_PointActivity2_RewardOver = 51002,	
	EEC_PointActivity2_RewardNotEnoughPoint = 51003,	
	EEC_PointActivity2_Rewarded = 51004,	
	EEC_PointActivity2_NotCanReward = 51005,	
	EEC_PointActivity2_UserRewardNotEnoughPoint = 51006,	
	EEC_PointActivity2_ExchangeOver = 51006,	
	EEC_PointActivity2_ExchangeNotEnoughCoin = 51007,	
}

public enum EOsType	
{
	None = 0,	
	Android = 1,	
	Ios = 2,	
}

public enum EPlatform	
{
	Test = 0,	
	Google = 1,	
	Ios = 2,	
	QuickAndroid = 3,	
	QuickIos = 4,	
}

public enum EPlatform2OsType	
{
	Platform2OsType_0 = 0,	
	Platform2OsType_1 = 1,	
	Platform2OsType_2 = 2,	
	Platform2OsType_3 = 1,	
	Platform2OsType_4 = 2,	
}

public enum EBindingType	
{
	None = 0,	
	Google = 1,	
	GameCenter = 2,	
}

public enum EGender	
{
	Male = 1,	
	Female = 2,	
}

public enum ELangType	
{
	Cn = 0,	
	Tc = 1,	
	En = 2,	
	Min = 0,	
	Max = 2,	
}

public enum EGoldOrGem	
{
	None = 0,	
	Item1 = 1,	
	Gold = 10001,	
	Gem = 10002,	
}

public enum EUnionJob	
{
	Common = 0,	
	Manager = 1,	
	President = 8,	
}

public enum EUnionEnter	
{
	Public = 0,	
	Personal = 1,	
}

public enum EMarketBuybackTrigger	
{
	TriggerOFF = 0,	
	TriggerON = 1,	
}

public enum EMarketBuybackGroupType	
{
	Equip = 1,	
	Item = 2,	
}

public enum EMarketBuybackSubType	
{
	Equip_N = 1,	
	Equip_R = 2,	
	Equip_SR = 3,	
	Equip_SSR = 4,	
	Equip_Legend = 5,	
	Item_Resource = 6,	
	Item_Box = 8,	
}

public enum EUnionMessageType	
{
	EnterUnion = 1,	
	ChangeJobToMember = 2,	
	ChangeJobToManager = 3,	
	ChangeJobToPresident = 4,	
	LeaveUnion = 5,	
	UnionKickOut = 6,	
	Impeach = 7,	
}

public enum EDesignState	
{
	Idle = 0,	
	Upgrading = 1,	
	Finished = 2,	
	InStore = 3,	
}

public enum EDesignType	
{
	Wall = 1,	
	Floor = 2,	
	Carpet = 3,	
	WallDecoration = 4,	
	InsideDecoration = 5,	
	Counter = 6,	
	Shelf = 7,	
	StoreBasket = 8,	
	ResBasket = 9,	
	OutsideDecoration = 10,	
	PetFurniture = 11,	
}

public enum EShelfType	
{
	Firearm = 1,	
	Weapons = 2,	
	Armor = 3,	
	Item = 4,	
}

public enum EResBasketType	
{
	Iron = 1,	
	Wood = 2,	
	Leather = 3,	
	Herbs = 4,	
	Steel = 5,	
	Hardwood = 6,	
	Cloth = 7,	
	Oil = 8,	
	Jewel = 9,	
	Ether = 10,	
}

public enum EItemType	
{
	Gold = 1,	
	Gem = 2,	
	Energy = 3,	
	Piece = 4,	
	Production = 5,	
	CopyItem = 6,	
	Bag = 7,	
	Chest = 8,	
	Key = 9,	
	Stone = 10,	
	City = 11,	
	WarriorCoin = 12,	
	Hero = 13,	
	Worker = 14,	
	SpecialEquipItem = 15,	
	FixedEquipItem = 16,	
	LotteryItem = 17,	
	HeroExpCard = 18,	
	HeroChangeJobCard = 19,	
	ExploreTimeItem = 20,	
	ExploreAddDropItem = 21,	
	ExploreAddAtkItem = 22,	
	HeroRestResetItem = 23,	
	ExploreAddExpItem = 24,	
	FixEquipItem = 25,	
	Equip = 26,	
	Active = 27,	
	GiftPack = 28,	
	UnionCoin = 29,	
	UnionPoint = 30,	
	UnionPrestige = 31,	
	Furniture = 40,	
	UserDress = 41,	
	HeroJob1SSR = 42,	
	MakeSlotCount = 43,	
	ExploreSlotCount = 44,	
	ShopLevel = 45,	
	HeroSlotCount = 46,	
	SaleSlotCount = 47,	
	OperatingActivityCoin = 48,	
	EquipStartItem = 49,	
	HeroStatusItem = 50,	
	PetSkin = 51,	
	GoldCastlePoint = 53,	
	PointActivity2Point = 55,	
}

public enum EPetState	
{
	Lock = 1,	
	Idle = 2,	
	Store = 3,	
}

public enum EItemLogReason	
{
	Guide = 1,	
	GuideReturn = 2,	
	GuideSkip = 3,	
	GmCommand = 4,	
	ChangeName = 5,	
	ProductionResourceBuy = 6,	
	MailReward = 7,	
	UnionCreate = 8,	
	ShopperLevelUp = 9,	
	BuyDress = 10,	
	BagDel = 11,	
	ItemUse = 12,	
	GiftPack = 13,	
	PiggyBank = 14,	
	ExploreTimeItem = 15,	
	ExploreAddDropItem = 16,	
	ExploreAddAtkItem = 17,	
	ExploreAddExpItem = 18,	
	Prize = 19,	
	Pay = 20,	
	MainTask = 21,	
	MainTask2 = 22,	
	Pet = 23,	
	PetSlot = 24,	
	PetBuy = 25,	
	GuideTaskReward = 26,	
	GuideTaskShopperAward = 27,	
	TriggerGuideEffect = 28,	
	ShopUpgrade = 102,	
	CounterUpgrade = 103,	
	StoreBasketUpgrade = 104,	
	ResBasketUpgrade = 105,	
	ShelfUpgrade = 106,	
	DesignCounterSpeedUp = 107,	
	DesignStoreBasketSpeedUp = 108,	
	DesignResBasketSpeedUp = 109,	
	DesignShelfSpeedUp = 110,	
	EquipMaking = 200,	
	EquipProgressLevelUp = 201,	
	EquipMakeImprove = 202,	
	EquipInfoActivate = 203,	
	BuySlot = 204,	
	EquipMakingFaster = 205,	
	BuyFloor = 302,	
	BuyFurniture = 303,	
	BuyWall = 304,	
	DailyTask = 400,	
	Achievement = 401,	
	AchievementRoad = 402,	
	SevenDayTask = 403,	
	SevenDayTaskList = 404,	
	ShopperDiscount = 500,	
	ShopperDouble = 501,	
	ShopperChat = 502,	
	ShopperRefuse = 503,	
	ShopperCheckout = 504,	
	ShopperRecommend = 505,	
	ActiveReward = 506,	
	ShopperEnergy = 507,	
	HeroFieldUnlock = 600,	
	HeroListRefresh = 601,	
	HeroBuy = 602,	
	HeroEquipOn = 603,	
	HeroEquipOff = 604,	
	HeroWarriorRankUp = 605,	
	HeroRecover = 606,	
	HeroFire = 607,	
	HeroEquipFix = 608,	
	UnlockWorker = 609,	
	HeroTransfer = 610,	
	HeroExchange = 611,	
	ActivityStoreRefresh = 650,	
	ActivityStoreBuy = 651,	
	TransactionBoothItem = 700,	
	TransactionBoothItemOff = 701,	
	TransactionBuy = 702,	
	TransactionSell = 703,	
	TransactionManualBuy = 704,	
	TransactionManualSell = 705,	
	TreasureBoxOpen = 706,	
	ExploreFieldUnlock = 800,	
	ExplorePass = 801,	
	ExploreUnlock = 802,	
	ExploreImmediately = 803,	
	ActivityDailyGiftReward = 900,	
	BuildCost = 1000,	
	RubbishClaimed = 1100,	
	UnionHelpGem = 1200,	
	UnionTask = 1201,	
	UnionHelp = 1202,	
	AccountBinding = 1300,	
}

public enum EUserDataChangeType	
{
	Exp = 1,	
	Level = 2,	
	Gold = 3,	
	Gem = 4,	
	Energy = 5,	
	EnergyLimit = 6,	
	Drawing = 7,	
	Worth = 8,	
	Prosperity = 9,	
	MasterCount = 10,	
	BagLimit = 11,	
	PileLimit = 12,	
	FreeDesignBuyCount = 13,	
	FreeHeroBuyCount = 14,	
	FreeEquipImproveCount = 15,	
	FreeExploreImmediateCount = 16,	
	Invest = 17,	
	MemberJob = 18,	
	UnionCoin = 19,	
	Pet = 20,	
	UnionHelpCount = 21,	
	UnionTaskCrownCount = 22,	
	ShopperLevelUp = 23,	
}

public enum EUserProsperityType	
{
	ShelfUpgrade1 = 1,	
	ShelfUpgrade2 = 2,	
	ShopperLimit = 3,	
	ArmorSell = 4,	
	WeaponSell = 5,	
	OtherSell = 6,	
}

public enum EMainTaskType	
{
	MakeEquip = 1,	
	FurnitureLevelUp = 2,	
	FurnitureCount = 3,	
	HireWorker = 4,	
	HireHero = 5,	
	HeroTransfer = 6,	
	HeroLevel = 7,	
	GoldDeal = 8,	
	HeroEquip = 9,	
	ExploreHero = 10,	
	ExploreLevel = 11,	
	ShopLevelUp = 12,	
	ExploreID = 13,	
	OpenBox = 14,	
	ShopperLevel = 15,	
	InvestNum = 16,	
	SoldEquip = 17,	
	SoldEquipRaisePrice = 18,	
	SoldEquipDiscount = 19,	
	InvestBuilding = 20,	
}

public enum EMainTaskState	
{
	Idle = 1,	
	CanReward = 2,	
	Rewarded = 3,	
}

public enum EGuideTaskType	
{
	MakeEquip = 1,	
	FurnitureLevelUp = 2,	
	FurnitureCount = 3,	
	HireWorker = 4,	
	HeroEquip = 9,	
	ExploreHero = 10,	
	ExploreLevel = 11,	
	ShopLevelUp = 12,	
	SoldEquipRaisePrice = 18,	
	SoldEquipDiscount = 19,	
	FurnitureBuyAny = 20,	
	FurnitureLevelUpAny = 21,	
	FurnitureBuyDesignAny = 22,	
	FreeChat = 23,	
}

public enum EGuideTaskState	
{
	Idle = 1,	
	Done = 2,	
}

public enum EGuideTaskGroupState	
{
	Idle = 1,	
	CanReward = 2,	
	Rewarded = 3,	
	Done = 4,	
}

public enum EPetFeedType	
{
	Free = 1,	
	Gold = 2,	
	Gem = 3,	
}

public enum EShelfEquipChangeType	
{
	Off = 0,	
	On = 1,	
}

public enum EShelfEquipChangeFrom	
{
	Slot = 0,	
	StoreBasket = 1,	
}

public enum EEquipInfoState	
{
	NotUnlock = 0,	
	UnlockNotActivate = 1,	
	Activated = 2,	
}

public enum EMakingState	
{
	Idle = 0,	
	Making = 1,	
	Finish = 2,	
}

public enum EMakingStarEffectType	
{
	None = 0,	
	Return = 1,	
	Double = 2,	
	Upgrade = 3,	
}

public enum EDailyTaskType	
{
	SellItem = 1,	
	MakeItem = 2,	
	Double = 3,	
	Discount = 4,	
	Chat = 5,	
	Promote = 6,	
	SellAmount = 7,	
	ExploreItem = 8,	
	MarketSellGold = 9,	
	MarketSellEquip = 10,	
	ExploreHero = 11,	
	RefreshBar = 12,	
	BuildCost = 13,	
	ScienceCost = 14,	
	Gacha = 15,	
}

public enum EDailyTaskState	
{
	Doing = 0,	
	Reached = 1,	
}

public enum ETriggerGuideEffectType	
{
	AddEquip = 1,	
	AddItem = 2,	
	BuyFreeFurniture = 3,	
	UpgradeFurniture = 4,	
	FinishFurniture = 5,	
	RarePrize = 6,	
}

public enum EAchievementType	
{
	BaseLevel = 1,	
	SellItem = 2,	
	MakeItem = 3,	
	DungeonClear = 4,	
	HelpNum = 5,	
	SellAmountNumOnce = 6,	
	GachaRankHero = 7,	
	GachaNum = 8,	
	HeroLevel = 9,	
	HeroChangeJob = 10,	
	UnlockWorker = 11,	
	Furniture1Level = 121,	
	Furniture2Level = 122,	
	Furniture3Level = 123,	
	UseNormalRes = 13,	
	UseRareRes = 14,	
	UseSRareRes = 15,	
	DungeonDropRes = 16,	
	DefeatDungeonBoss = 17,	
	ItemStarRaise = 18,	
	MasterNum = 19,	
	ShopLevel = 20,	
	HighEnchant = 21,	
	UnlockItem = 22,	
	FinishGuide = 23,	
	TreasureChestOpened = 24,	
	AttackDamageOnce = 25,	
	EarnGoldNum = 26,	
	MakeItemFirstSuccess = 27,	
	DungeonFirstClear = 28,	
	BuildCost = 29,	
	GemCost = 31,	
}

public enum EAchievementState	
{
	NotDoable = 0,	
	Doing = 1,	
	Done = 2,	
	Rewarded = 3,	
}

public enum EAchievementRoadState	
{
	Disable = 0,	
	CheckReward = 1,	
	Finish = 2,	
}

public enum EAchievementRoadRewardState	
{
	Disable = 0,	
	CanReward = 1,	
	Rewarded = 2,	
}

public enum EAchievementFurnitureType	
{
	Counter = 1,	
	ShelfHot = 2,	
	ShelfCold = 3,	
	ShelfArmor = 4,	
	Other = 5,	
}

public enum EAchievementChangeType	
{
	Done = 0,	
	Change = 1,	
}

public enum ERoleState	
{
	Idle = 0,	
	Resting = 1,	
	Fighting = 2,	
	CantFight = 3,	
}

public enum EHeroRarity	
{
	N = 1,	
	R = 2,	
	SR = 3,	
	SSR = 4,	
}

public enum EWorkerState	
{
	Locked = 0,	
	CanUnlock = 1,	
	Unlock = 2,	
}

public enum ERecruitState	
{
	NotRecruited = 0,	
	Recruited = 1,	
}

public enum ERecoverCostType	
{
	Item = 1,	
	Gem = 10002,	
}

public enum EHeroExchangeState	
{
	Lock = 1,	
	Idle = 2,	
	Unlock = 3,	
}

public enum EShopperType	
{
	Buy = 0,	
	Sell = 1,	
	Warrior = 2,	
	Worker = 3,	
	HighPriceBuy = 4,	
	SellCopyItem = 5,	
	SellMultiple = 6,	
}

public enum EShopperComeType	
{
	Normal = 0,	
	GuideTask = 1,	
}

public enum EShopperAIType	
{
	None = 0,	
	Watch1 = 1001,	
	Watch2 = 1002,	
	Watch3 = 1003,	
	Buy1 = 2001,	
	Buy2 = 2002,	
	Buy3 = 2003,	
	NotBuy = 3001,	
	Pet1 = 4001,	
	Pet2 = 4002,	
}

public enum EShopperState	
{
	Idle = 0,	
	Walking = 1,	
	Queuing = 99,	
	Leaving = 100,	
}

public enum EPiggyBankState	
{
	hasNotStarted = 0,	
	Processing = 1,	
	Pending = 2,	
}

public enum EChatChannel	
{
	World = 0,	
	RaceLamp = 1,	
	Union = 2,	
	System = 3,	
}

public enum ESystemMsgType	
{
	EnterUnion = 1,	
	LeaveUnion = 2,	
	UnionHelp = 3,	
	UnionBuildCost = 4,	
	UnionHighPriceSold = 5,	
	UnionMakeMastered = 6,	
}

public enum EHelpFurnitureType	
{
	ShopInfo = 1,	
	CounterInfo = 2,	
	StoreBasketList = 3,	
	ResBasketList = 4,	
	ShelfList = 5,	
}

public enum EUnionTaskType	
{
	Equip = 1,	
	UnionGemHelp = 2,	
	OpenBox = 3,	
	ResourceItem = 4,	
	EquipSoldUp = 5,	
	EquipSoldDown = 6,	
	ExploreHeroCount = 7,	
}

public enum EUnionTaskShowType	
{
	Equip_Easy = 1,	
	Equip_Normal = 2,	
	Equip_Hard = 3,	
	UnionGemHelp = 4,	
	OpenBox = 5,	
	ResourceItem_Easy = 6,	
	ResourceItem_Normal = 7,	
	ResourceItem_Hard = 8,	
	EquipSoldUp_Easy = 9,	
	EquipSoldUp_Normal = 10,	
	EquipSoldUp_Hard = 11,	
	EquipSoldDown_Easy = 12,	
	EquipSoldDown_Normal = 13,	
	EquipSoldDown_Hard = 14,	
	ExploreHeroCount_Easy = 15,	
	ExploreHeroCount_Normal = 16,	
	ExploreHeroCount_Hard = 17,	
}

public enum EUnionTaskRandomType	
{
	Equip_Easy_Free = 1,	
	Equip_Normal_Free = 2,	
	Equip_Hard_Free = 3,	
	Equip_Easy = 4,	
	Equip_Normal = 5,	
	Equip_Hard = 6,	
	OpenBox = 7,	
	ResourceItem_Free = 8,	
	ResourceItem = 9,	
	ExploreHeroCount = 10,	
	EquipSoldUp = 11,	
	EquipSoldDown = 12,	
}

public enum EUnionTaskState	
{
	Idle = 1,	
	Doing = 2,	
	CanReward = 3,	
	Done = 4,	
}

public enum EUnionScienceType	
{
	UnionTaskLimit = 1,	
	ResItem1Limit = 3,	
	ResItem2Limit = 4,	
	ResItem3Limit = 5,	
	Shelf1Limit = 6,	
	Shelf2Limit = 7,	
	Shelf3Limit = 8,	
	Shelf4Limit = 9,	
	StoreBoxLimit = 10,	
	PileLimit = 11,	
	AccelSkill = 12,	
	ExploreSkill = 13,	
	ExpSkill = 14,	
	ResSkill = 15,	
	MarketBuyLimit = 16,	
	MarketSoldLimit = 17,	
	ResItem1Rate = 18,	
	ResItem2Rate = 19,	
	ResItem3Rate = 20,	
	UnionLevelUp = 21,	
}

public enum EUnionScienceSkillType	
{
	Type1 = 1,	
	Type2 = 2,	
}

public enum EUnionScienceState	
{
	Lock = 0,	
	Unlock = 1,	
}

public enum EUnionScienceSkillState	
{
	Lock = 0,	
	Unlock = 1,	
}

public enum JackpotDataState	
{
	NotBeenGet = 0,	
	BeenGet = 1,	
}

public enum PrizePoolStatus	
{
	hasBeenReset = 0,	
	hasNotBeenReset = 1,	
}

public enum EPrizePoolState	
{
	hasBeenReset = 0,	
	hasNotBeenReset = 1,	
}

public enum EPrizeRefreshType	
{
	NotOnce = 1,	
	OnlyOnce = 2,	
}

public enum DrawMoney	
{
	free = 0,	
	props = 1,	
	gem = 2,	
	vip = 3,	
	ad = 4,	
}

public enum EUserBehaviorType	
{
	GameUI = 1,	
}

public enum EItemUse	
{
	Success = 0,	
	Fail = 1,	
}

public enum EBuildState	
{
	EB_Lock = 0,	
	EB_Unlock = 1,	
	EB_Upgrading = 2,	
	EB_Finished = 3,	
}

public enum EBuildType	
{
	ResourceBuild = 1,	
	FunctionalBuild = 2,	
	ScienceProject = 3,	
}

public enum EBuildEffectType	
{
	EB_OutPut = 1,	
	EB_UpperLevel = 2,	
	EB_TimeReduce = 3,	
	EB_ResourceAdd = 4,	
	EB_HeroLevelLimit = 5,	
	EB_UnionMemberCountLimit = 6,	
}

public enum EExploreType	
{
	Normal = 1,	
	Boss = 2,	
}

public enum EExploringState	
{
	EE_Idle = 0,	
	EE_Exploring = 1,	
	EE_Finish = 2,	
}

public enum EBossExploreState	
{
	EB_Idle = 1,	
	EB_FightIng = 2,	
	EB_Wait = 3,	
	EB_Ready = 4,	
}

public enum EUserVipEffectType	
{
	FixBrokenEquip = 1,	
	BrokenEquipSpendGold = 2,	
	SevenDayReward = 3,	
	ExploreVipReward = 4,	
	OpenBoxVipReward = 5,	
	PiggyBankVipReward = 6,	
	DailyTaskVipQuest = 7,	
	DailyTaskVipQuestReward = 8,	
	PrizeTenVipPrice = 9,	
	GemMallVipPrice = 10,	
	HireHeroVipPrice = 11,	
	VipFurniture = 12,	
	VipExploreRest = 13,	
}

public enum EExploreSlotType	
{
	None = 0,	
	Normal = 1,	
	Tower = 2,	
	GoldCastle = 3,	
}

public enum EMailStatus	
{
	Unread = 0,	
	Read = 1,	
	Unclaimed = 2,	
	Claimed = 3,	
	Deleted = 99,	
}

public enum ESevenDayTaskType	
{
	EarnGold = 1,	
	MakeItem = 2,	
	UnlockEquip = 3,	
	GetLayout = 4,	
	EquipLevelUnlock = 5,	
	EquipMastered = 6,	
	BuyFurniture = 7,	
	LevelUpFurniture = 8,	
	ExploreShop = 9,	
	UnionType = 10,	
	LevelUpScience = 11,	
	LevelUpBuilding = 12,	
	BuildingLevel = 13,	
	HireHero = 14,	
	HeroChangeJob = 15,	
	HeroRare = 16,	
	HeroEquipRare = 17,	
	LevelUpExplore = 18,	
	ExploreClear = 19,	
	SlotExplore = 20,	
	PlayerLevelUp = 21,	
	ChestBoxOpen = 22,	
	ReputationRaise = 23,	
	MarketDeal = 24,	
	EnergyRaise = 25,	
	ExploreCount = 26,	
	SoldEquip = 27,	
	SoldEquipRaisePrice = 28,	
	EquipExchange = 29,	
	HeroLevelCount = 30,	
}

public enum ESevenDayTaskState	
{
	NotUnlock = 0,	
	Doing = 1,	
	CanReward = 2,	
	Rewarded = 3,	
	VIPRewarded = 4,	
}

public enum EPayActivityType	
{
	GeneralPurchase = 1,	
	DirectPurchase = 2,	
	DailySale = 3,	
	VipPurchase = 4,	
	OperatingActivityPurchase = 5,	
	ShopperLevelPurchase = 6,	
	SevenDayPurchase = 7,	
	GoldVipPurchase = 8,	
	PointActivityPurchase = 9,	
}

public enum EActivityBuffType	
{
	EquipMoneyUp = 1,	
	ShopOwnerExpUp = 2,	
	EnergyRaiseUp = 3,	
	EquipRaiseMoneyUp = 4,	
	MakeSpeedUp = 5,	
	EquipPropUp = 6,	
	ResourceSpeedUp = 7,	
	ExploreSpeedUp = 8,	
	HeroHealSpeedUp = 9,	
	ExploreDropUp = 10,	
	ExploreExpUp = 11,	
	RefreshBarHighRankHeroUp = 12,	
	ChestBoxItemRateUp = 13,	
}

public enum EActivityBuffState	
{
	None = 0,	
	Doing = 1,	
	Done = 2,	
}

public enum EFurnitureBuffType	
{
	SoldPriceSingle = 1,	
	SoldPriceAll = 2,	
	MakeSpeedSingle = 3,	
	MakeSpeedAll = 4,	
	HighRareSingle = 5,	
	HighRareAll = 6,	
	ProductionSpeedAll = 7,	
	ProductionSpeedSingle = 8,	
	HeroRefreshRate = 9,	
	EquipBrokenRate = 10,	
}

public enum EVIPState	
{
	None = 0,	
	Buy = 1,	
	Done = 2,	
}

public enum EVIPType	
{
	Month = 1,	
	Year = 2,	
}

public enum EVIPPayState	
{
	None = 0,	
	Buy = 1,	
}

public enum EOperatingActivityInfoType	
{
	EquipPropertyType = 1,	
	EquipPropertySubType = 2,	
	EquipDrawingId = 3,	
}

public enum EOperatingActivityRewardState	
{
	None = 0,	
	CanReward = 1,	
	Rewarded = 2,	
	VipRewarded = 3,	
}

public enum EOperatingActivityExchangeState	
{
	None = 0,	
	Exchanged = 1,	
}

public enum EOperatingActivityStringType	
{
	Name = 1,	
	Desc = 2,	
	PurchaseTitle = 3,	
	Icon = 4,	
	Panel = 5,	
}

public enum EAdType	
{
	Prize = 1,	
	PrizeChange = 2,	
	DailyBox = 3,	
}

public enum EOnlineRewardState	
{
	WaitTime = 0,	
	CanReward = 1,	
	NextDay = 2,	
}

public enum EOnlineRewardType	
{
	Beginner = 1,	
	Activity1 = 2,	
}

public enum ERankListType	
{
	PlayerWorth = 1,	
	PlayerProsperity = 2,	
	UnionWorth = 3,	
	HeroFight = 4,	
}

public enum EShopperLevelRewardState	
{
	None = 0,	
	Idle = 1,	
	CanReward = 2,	
	Rewarded = 3,	
}

public enum EUserDailyBoxState	
{
	None = 1,	
	Free = 2,	
	Ad = 3,	
	Vip = 4,	
}

public enum EUserDailyBoxRewardType	
{
	Free = 2,	
	Ad = 3,	
	Vip = 4,	
}

public enum ETowerExploreRewardState	
{
	Idle = 1,	
	CanReward = 2,	
	Rewarded = 3,	
}

public enum EPointActivityTaskType	
{
	LoginReward = 1,	
	PiggyBank = 2,	
	MakeEquip = 3,	
	SellEquip = 4,	
	SellChat = 5,	
	DoubleSellEquip = 6,	
	DisCountSellEquip = 7,	
	MakeEquipType1 = 8,	
	MakeEquipType2 = 9,	
	MakeEquipType3 = 10,	
	MakeEquipType4 = 11,	
	MakeEquipType5 = 12,	
	MakeEquipType6 = 13,	
	MakeEquipType7 = 14,	
	MakeEquipType8 = 15,	
	MakeEquipType9 = 16,	
	MakeEquipType10 = 17,	
	MakeEquipType11 = 18,	
	MakeEquipType12 = 19,	
	MakeEquipType13 = 20,	
	MakeEquipType14 = 21,	
	MakeEquipType15 = 22,	
	MakeEquipType16 = 23,	
	MakeEquipType17 = 24,	
	MakeEquipType18 = 25,	
	MakeEquipType19 = 26,	
	MakeEquipType20 = 27,	
	CostBagResource1 = 28,	
	CostBagResource2 = 29,	
	CostBagResource3 = 30,	
	CostBagResource4 = 31,	
	UnionTaskPoint = 32,	
	OpenBox = 33,	
	ExploreItem = 34,	
	ExploreInstance = 35,	
	ExploreBoss = 36,	
	DailyTaskPoint = 37,	
	HighQualityEquip = 38,	
	MakeSpecialEquip1 = 39,	
	MakeSpecialEquip2 = 40,	
	MakeSpecialEquip3 = 41,	
	HeroListRefresh = 42,	
	Prize = 43,	
	PayOrder = 44,	
	PayBalance = 45,	
	GoldStore = 46,	
}

public enum EPointActivityTaskState	
{
	Idle = 1,	
	CanReward = 2,	
	Rewarded = 3,	
}


public class VIPInfo
{
	public int level = 0;
	public int state = 0;
	public int type = 0;
	public int endTime = 0;
	public int remainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["level"] = level;
		json["state"] = state;
		json["type"] = type;
		json["endTime"] = endTime;
		json["remainTime"] = remainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != level)
		{
			json["b"] = level;
		}

		if (0 != state)
		{
			json["c"] = state;
		}

		if (0 != type)
		{
			json["d"] = type;
		}

		if (0 != endTime)
		{
			json["e"] = endTime;
		}

		if (0 != remainTime)
		{
			json["f"] = remainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				level = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				state = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				type = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				endTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				remainTime = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("VIPInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}













public class RoleDress
{
	public int modelColor = 0;
	public int face = 0;
	public int faceColor = 0;
	public int hair = 0;
	public int hairColor = 0;
	public int eyesColor = 0;
	public int weapon = 0;
	public int upper = 0;
	public int lower = 0;
	public int shoes = 0;
	public int headHat = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["modelColor"] = modelColor;
		json["face"] = face;
		json["faceColor"] = faceColor;
		json["hair"] = hair;
		json["hairColor"] = hairColor;
		json["eyesColor"] = eyesColor;
		json["weapon"] = weapon;
		json["upper"] = upper;
		json["lower"] = lower;
		json["shoes"] = shoes;
		json["headHat"] = headHat;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != modelColor)
		{
			json["b"] = modelColor;
		}

		if (0 != face)
		{
			json["c"] = face;
		}

		if (0 != faceColor)
		{
			json["d"] = faceColor;
		}

		if (0 != hair)
		{
			json["e"] = hair;
		}

		if (0 != hairColor)
		{
			json["f"] = hairColor;
		}

		if (0 != eyesColor)
		{
			json["g"] = eyesColor;
		}

		if (0 != weapon)
		{
			json["h"] = weapon;
		}

		if (0 != upper)
		{
			json["i"] = upper;
		}

		if (0 != lower)
		{
			json["j"] = lower;
		}

		if (0 != shoes)
		{
			json["k"] = shoes;
		}

		if (0 != headHat)
		{
			json["l"] = headHat;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				modelColor = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				face = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				faceColor = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				hair = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				hairColor = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				eyesColor = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				weapon = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				upper = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				lower = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				shoes = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				headHat = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("RoleDress Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UnionMember
{
	public string userId = "";
	public string nickName = "";
	public int gender = 0; //enum EGender
	public int memberJob = 0; //enum EUnionJob
	public long worth = 0;
	public long invest = 0;
	public int level = 0;
	public RoleDress roleDress = new RoleDress();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["userId"] = userId.ToString();
		json["nickName"] = nickName.ToString();
		json["gender"] = gender;
		json["memberJob"] = memberJob;
		json["worth"] = worth;
		json["invest"] = invest;
		json["level"] = level;
		json["roleDress"] = roleDress.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(userId))
		{
			json["b"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(nickName))
		{
			json["c"] = nickName.ToString();
		}
		if (0 != gender)
		{
			json["d"] = gender;
		}

		if (0 != memberJob)
		{
			json["e"] = memberJob;
		}

		if (0 != worth)
		{
			json["f"] = worth;
		}

		if (0 != invest)
		{
			json["g"] = invest;
		}

		if (0 != level)
		{
			json["h"] = level;
		}

		json["i"] = roleDress.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				userId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				nickName = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				gender = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				memberJob = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				worth = Int64.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				invest = Int64.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				level = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				roleDress.Decode(json["i"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionMember Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UnionDetailData
{
	public string unionId = "";
	public string unionName = "";
	public int unionLevel = 0;
	public string presidentUserId = "";
	public string presidentNickName = "";
	public int enterSetting = 0; //enum EUnionEnter
	public int enterLevel = 0;
	public int memberNumLimit = 0;
	public List<UnionMember> memberList = new List<UnionMember>();
	public long enterInvest = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["unionId"] = unionId.ToString();
		json["unionName"] = unionName.ToString();
		json["unionLevel"] = unionLevel;
		json["presidentUserId"] = presidentUserId.ToString();
		json["presidentNickName"] = presidentNickName.ToString();
		json["enterSetting"] = enterSetting;
		json["enterLevel"] = enterLevel;
		json["memberNumLimit"] = memberNumLimit;
		json["memberList"] = new JsonData();
		json["memberList"].SetJsonType(JsonType.Array);
		foreach(UnionMember temp in memberList)
		{
			json["memberList"].Add(temp.GetJsonData());
		}
		json["enterInvest"] = enterInvest;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(unionId))
		{
			json["b"] = unionId.ToString();
		}
		if (!String.IsNullOrEmpty(unionName))
		{
			json["c"] = unionName.ToString();
		}
		if (0 != unionLevel)
		{
			json["d"] = unionLevel;
		}

		if (!String.IsNullOrEmpty(presidentUserId))
		{
			json["e"] = presidentUserId.ToString();
		}
		if (!String.IsNullOrEmpty(presidentNickName))
		{
			json["f"] = presidentNickName.ToString();
		}
		if (0 != enterSetting)
		{
			json["g"] = enterSetting;
		}

		if (0 != enterLevel)
		{
			json["h"] = enterLevel;
		}

		if (0 != memberNumLimit)
		{
			json["i"] = memberNumLimit;
		}

		json["j"] = new JsonData();
		json["j"].SetJsonType(JsonType.Array);
		foreach(UnionMember temp in memberList)
		{
			json["j"].Add(temp.Encode());
		}
		if (0 != enterInvest)
		{
			json["k"] = enterInvest;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				unionId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				unionName = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				unionLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				presidentUserId = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				presidentNickName = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				enterSetting = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				enterLevel = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				memberNumLimit = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					UnionMember temp = new UnionMember();
					temp.Decode(j_item);
					memberList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				enterInvest = Int64.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionDetailData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UnionSimpleData
{
	public string unionId = "";
	public string unionName = "";
	public int unionLevel = 0;
	public string presidentUserId = "";
	public string presidentNickName = "";
	public int memberNum = 0;
	public int memberNumLimit = 0;
	public int enterSetting = 0; //enum EUnionEnter
	public int enterLevel = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["unionId"] = unionId.ToString();
		json["unionName"] = unionName.ToString();
		json["unionLevel"] = unionLevel;
		json["presidentUserId"] = presidentUserId.ToString();
		json["presidentNickName"] = presidentNickName.ToString();
		json["memberNum"] = memberNum;
		json["memberNumLimit"] = memberNumLimit;
		json["enterSetting"] = enterSetting;
		json["enterLevel"] = enterLevel;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(unionId))
		{
			json["b"] = unionId.ToString();
		}
		if (!String.IsNullOrEmpty(unionName))
		{
			json["c"] = unionName.ToString();
		}
		if (0 != unionLevel)
		{
			json["d"] = unionLevel;
		}

		if (!String.IsNullOrEmpty(presidentUserId))
		{
			json["e"] = presidentUserId.ToString();
		}
		if (!String.IsNullOrEmpty(presidentNickName))
		{
			json["f"] = presidentNickName.ToString();
		}
		if (0 != memberNum)
		{
			json["g"] = memberNum;
		}

		if (0 != memberNumLimit)
		{
			json["h"] = memberNumLimit;
		}

		if (0 != enterSetting)
		{
			json["i"] = enterSetting;
		}

		if (0 != enterLevel)
		{
			json["j"] = enterLevel;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				unionId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				unionName = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				unionLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				presidentUserId = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				presidentNickName = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				memberNum = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				memberNumLimit = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				enterSetting = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				enterLevel = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionSimpleData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatSkillItem
{
	public int skillId = 0;
	public int level = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["skillId"] = skillId;
		json["level"] = level;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != skillId)
		{
			json["b"] = skillId;
		}

		if (0 != level)
		{
			json["c"] = level;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				skillId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				level = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatSkillItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatFighter
{
	public int key = 0;
	public int site = 0;
	public int isMonster = 0;
	public int sex = 0;
	public string name = "";
	public int job = 0;
	public int level = 0;
	public int aptitude = 0;
	public int hp = 0;
	public int currentHp = 0;
	public int anger = 0;
	public int currentAnger = 0;
	public int str = 0;
	public int speed = 0;
	public int weapon = 0;
	public List<int> equips = new List<int>();
	public List<CombatSkillItem> activeSkill = new List<CombatSkillItem>();
	public List<CombatSkillItem> passiveSkill = new List<CombatSkillItem>();
	public RoleDress roleDress = new RoleDress();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["key"] = key;
		json["site"] = site;
		json["isMonster"] = isMonster;
		json["sex"] = sex;
		json["name"] = name.ToString();
		json["job"] = job;
		json["level"] = level;
		json["aptitude"] = aptitude;
		json["hp"] = hp;
		json["currentHp"] = currentHp;
		json["anger"] = anger;
		json["currentAnger"] = currentAnger;
		json["str"] = str;
		json["speed"] = speed;
		json["weapon"] = weapon;
		json["equips"] = new JsonData();
		json["equips"].SetJsonType(JsonType.Array);
		foreach(int temp in equips)
		{
			json["equips"].Add(temp);
		}
		json["activeSkill"] = new JsonData();
		json["activeSkill"].SetJsonType(JsonType.Array);
		foreach(CombatSkillItem temp in activeSkill)
		{
			json["activeSkill"].Add(temp.GetJsonData());
		}
		json["passiveSkill"] = new JsonData();
		json["passiveSkill"].SetJsonType(JsonType.Array);
		foreach(CombatSkillItem temp in passiveSkill)
		{
			json["passiveSkill"].Add(temp.GetJsonData());
		}
		json["roleDress"] = roleDress.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != key)
		{
			json["b"] = key;
		}

		if (0 != site)
		{
			json["c"] = site;
		}

		if (0 != isMonster)
		{
			json["d"] = isMonster;
		}

		if (0 != sex)
		{
			json["e"] = sex;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["f"] = name.ToString();
		}
		if (0 != job)
		{
			json["g"] = job;
		}

		if (0 != level)
		{
			json["h"] = level;
		}

		if (0 != aptitude)
		{
			json["i"] = aptitude;
		}

		if (0 != hp)
		{
			json["j"] = hp;
		}

		if (0 != currentHp)
		{
			json["k"] = currentHp;
		}

		if (0 != anger)
		{
			json["l"] = anger;
		}

		if (0 != currentAnger)
		{
			json["m"] = currentAnger;
		}

		if (0 != str)
		{
			json["n"] = str;
		}

		if (0 != speed)
		{
			json["o"] = speed;
		}

		if (0 != weapon)
		{
			json["p"] = weapon;
		}

		json["q"] = new JsonData();
		json["q"].SetJsonType(JsonType.Array);
		foreach(int temp in equips)
		{
			json["q"].Add(temp);
		}
		json["r"] = new JsonData();
		json["r"].SetJsonType(JsonType.Array);
		foreach(CombatSkillItem temp in activeSkill)
		{
			json["r"].Add(temp.Encode());
		}
		json["s"] = new JsonData();
		json["s"].SetJsonType(JsonType.Array);
		foreach(CombatSkillItem temp in passiveSkill)
		{
			json["s"].Add(temp.Encode());
		}
		json["t"] = roleDress.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				key = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				site = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				isMonster = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				sex = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				name = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				job = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				level = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				aptitude = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				hp = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				currentHp = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				anger = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				currentAnger = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				str = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				speed = Int32.Parse(json["o"].ToString());
			}

			if (oKeys.Contains("p"))
			{
				weapon = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				foreach(JsonData q_item in json["q"])
				{
					int temp = Int32.Parse(q_item.ToString());
					equips.Add(temp);
				}
			}
			if (oKeys.Contains("r"))
			{
				foreach(JsonData r_item in json["r"])
				{
					CombatSkillItem temp = new CombatSkillItem();
					temp.Decode(r_item);
					activeSkill.Add(temp);
				}
			}
			if (oKeys.Contains("s"))
			{
				foreach(JsonData s_item in json["s"])
				{
					CombatSkillItem temp = new CombatSkillItem();
					temp.Decode(s_item);
					passiveSkill.Add(temp);
				}
			}
			if (oKeys.Contains("t"))
			{
				roleDress.Decode(json["t"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatFighter Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatInfo
{
	public List<CombatFighter> attackers = new List<CombatFighter>();
	public List<CombatFighter> adversarys = new List<CombatFighter>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["attackers"] = new JsonData();
		json["attackers"].SetJsonType(JsonType.Array);
		foreach(CombatFighter temp in attackers)
		{
			json["attackers"].Add(temp.GetJsonData());
		}
		json["adversarys"] = new JsonData();
		json["adversarys"].SetJsonType(JsonType.Array);
		foreach(CombatFighter temp in adversarys)
		{
			json["adversarys"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(CombatFighter temp in attackers)
		{
			json["b"].Add(temp.Encode());
		}
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(CombatFighter temp in adversarys)
		{
			json["c"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					CombatFighter temp = new CombatFighter();
					temp.Decode(b_item);
					attackers.Add(temp);
				}
			}
			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					CombatFighter temp = new CombatFighter();
					temp.Decode(c_item);
					adversarys.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatAtker
{
	public int key = 0;
	public int weapon = 0;
	public int anger = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["key"] = key;
		json["weapon"] = weapon;
		json["anger"] = anger;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != key)
		{
			json["b"] = key;
		}

		if (0 != weapon)
		{
			json["c"] = weapon;
		}

		if (0 != anger)
		{
			json["d"] = anger;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				key = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				weapon = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				anger = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatAtker Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatTargetEffect
{
	public int hp = 0;
	public int critical = 0;
	public int hited = 0;
	public int piercingDmg = 0;
	public int burnDmg = 0;
	public int mentDmg = 0;
	public int electricityDmg = 0;
	public int radiationDmg = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["hp"] = hp;
		json["critical"] = critical;
		json["hited"] = hited;
		json["piercingDmg"] = piercingDmg;
		json["burnDmg"] = burnDmg;
		json["mentDmg"] = mentDmg;
		json["electricityDmg"] = electricityDmg;
		json["radiationDmg"] = radiationDmg;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != hp)
		{
			json["b"] = hp;
		}

		if (0 != critical)
		{
			json["c"] = critical;
		}

		if (0 != hited)
		{
			json["d"] = hited;
		}

		if (0 != piercingDmg)
		{
			json["e"] = piercingDmg;
		}

		if (0 != burnDmg)
		{
			json["f"] = burnDmg;
		}

		if (0 != mentDmg)
		{
			json["g"] = mentDmg;
		}

		if (0 != electricityDmg)
		{
			json["h"] = electricityDmg;
		}

		if (0 != radiationDmg)
		{
			json["i"] = radiationDmg;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				hp = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				critical = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				hited = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				piercingDmg = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				burnDmg = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				mentDmg = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				electricityDmg = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				radiationDmg = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatTargetEffect Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatTarget
{
	public int key = 0;
	public int weapon = 0;
	public int anger = 0;
	public List<CombatTargetEffect> effectList = new List<CombatTargetEffect>();
	public List<int> addBuffList = new List<int>();
	public List<int> removeBuffList = new List<int>();
	public List<CombatAction> actions = new List<CombatAction>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["key"] = key;
		json["weapon"] = weapon;
		json["anger"] = anger;
		json["effectList"] = new JsonData();
		json["effectList"].SetJsonType(JsonType.Array);
		foreach(CombatTargetEffect temp in effectList)
		{
			json["effectList"].Add(temp.GetJsonData());
		}
		json["addBuffList"] = new JsonData();
		json["addBuffList"].SetJsonType(JsonType.Array);
		foreach(int temp in addBuffList)
		{
			json["addBuffList"].Add(temp);
		}
		json["removeBuffList"] = new JsonData();
		json["removeBuffList"].SetJsonType(JsonType.Array);
		foreach(int temp in removeBuffList)
		{
			json["removeBuffList"].Add(temp);
		}
		json["actions"] = new JsonData();
		json["actions"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in actions)
		{
			json["actions"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != key)
		{
			json["b"] = key;
		}

		if (0 != weapon)
		{
			json["c"] = weapon;
		}

		if (0 != anger)
		{
			json["d"] = anger;
		}

		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(CombatTargetEffect temp in effectList)
		{
			json["e"].Add(temp.Encode());
		}
		json["f"] = new JsonData();
		json["f"].SetJsonType(JsonType.Array);
		foreach(int temp in addBuffList)
		{
			json["f"].Add(temp);
		}
		json["g"] = new JsonData();
		json["g"].SetJsonType(JsonType.Array);
		foreach(int temp in removeBuffList)
		{
			json["g"].Add(temp);
		}
		json["h"] = new JsonData();
		json["h"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in actions)
		{
			json["h"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				key = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				weapon = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				anger = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				foreach(JsonData e_item in json["e"])
				{
					CombatTargetEffect temp = new CombatTargetEffect();
					temp.Decode(e_item);
					effectList.Add(temp);
				}
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					int temp = Int32.Parse(f_item.ToString());
					addBuffList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					int temp = Int32.Parse(g_item.ToString());
					removeBuffList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					CombatAction temp = new CombatAction();
					temp.Decode(h_item);
					actions.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatTarget Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatAction
{
	public int actionId = 0;
	public int actionType = 0;
	public int skillId = 0;
	public int buffId = 0;
	public CombatAtker actionFrom = new CombatAtker();
	public List<CombatTarget> actionTarget = new List<CombatTarget>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["actionId"] = actionId;
		json["actionType"] = actionType;
		json["skillId"] = skillId;
		json["buffId"] = buffId;
		json["actionFrom"] = actionFrom.GetJsonData();
		json["actionTarget"] = new JsonData();
		json["actionTarget"].SetJsonType(JsonType.Array);
		foreach(CombatTarget temp in actionTarget)
		{
			json["actionTarget"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != actionId)
		{
			json["b"] = actionId;
		}

		if (0 != actionType)
		{
			json["c"] = actionType;
		}

		if (0 != skillId)
		{
			json["d"] = skillId;
		}

		if (0 != buffId)
		{
			json["e"] = buffId;
		}

		json["f"] = actionFrom.Encode();
		json["g"] = new JsonData();
		json["g"].SetJsonType(JsonType.Array);
		foreach(CombatTarget temp in actionTarget)
		{
			json["g"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				actionId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				actionType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				skillId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				buffId = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				actionFrom.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					CombatTarget temp = new CombatTarget();
					temp.Decode(g_item);
					actionTarget.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatAction Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatRound
{
	public int roundId = 0;
	public List<CombatAction> beforeActions = new List<CombatAction>();
	public List<CombatAction> actions = new List<CombatAction>();
	public List<CombatAction> endActions = new List<CombatAction>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["roundId"] = roundId;
		json["beforeActions"] = new JsonData();
		json["beforeActions"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in beforeActions)
		{
			json["beforeActions"].Add(temp.GetJsonData());
		}
		json["actions"] = new JsonData();
		json["actions"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in actions)
		{
			json["actions"].Add(temp.GetJsonData());
		}
		json["endActions"] = new JsonData();
		json["endActions"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in endActions)
		{
			json["endActions"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != roundId)
		{
			json["b"] = roundId;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in beforeActions)
		{
			json["c"].Add(temp.Encode());
		}
		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in actions)
		{
			json["d"].Add(temp.Encode());
		}
		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(CombatAction temp in endActions)
		{
			json["e"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				roundId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					CombatAction temp = new CombatAction();
					temp.Decode(c_item);
					beforeActions.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				foreach(JsonData d_item in json["d"])
				{
					CombatAction temp = new CombatAction();
					temp.Decode(d_item);
					actions.Add(temp);
				}
			}
			if (oKeys.Contains("e"))
			{
				foreach(JsonData e_item in json["e"])
				{
					CombatAction temp = new CombatAction();
					temp.Decode(e_item);
					endActions.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatRound Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatWave
{
	public int waveId = 0;
	public List<int> attackerKeys = new List<int>();
	public List<int> adversaryKeys = new List<int>();
	public List<CombatRound> rounds = new List<CombatRound>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["waveId"] = waveId;
		json["attackerKeys"] = new JsonData();
		json["attackerKeys"].SetJsonType(JsonType.Array);
		foreach(int temp in attackerKeys)
		{
			json["attackerKeys"].Add(temp);
		}
		json["adversaryKeys"] = new JsonData();
		json["adversaryKeys"].SetJsonType(JsonType.Array);
		foreach(int temp in adversaryKeys)
		{
			json["adversaryKeys"].Add(temp);
		}
		json["rounds"] = new JsonData();
		json["rounds"].SetJsonType(JsonType.Array);
		foreach(CombatRound temp in rounds)
		{
			json["rounds"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != waveId)
		{
			json["b"] = waveId;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(int temp in attackerKeys)
		{
			json["c"].Add(temp);
		}
		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(int temp in adversaryKeys)
		{
			json["d"].Add(temp);
		}
		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(CombatRound temp in rounds)
		{
			json["e"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				waveId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					int temp = Int32.Parse(c_item.ToString());
					attackerKeys.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				foreach(JsonData d_item in json["d"])
				{
					int temp = Int32.Parse(d_item.ToString());
					adversaryKeys.Add(temp);
				}
			}
			if (oKeys.Contains("e"))
			{
				foreach(JsonData e_item in json["e"])
				{
					CombatRound temp = new CombatRound();
					temp.Decode(e_item);
					rounds.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatWave Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatResultFighter
{
	public int key = 0;
	public int hp = 0;
	public int dead = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["key"] = key;
		json["hp"] = hp;
		json["dead"] = dead;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != key)
		{
			json["b"] = key;
		}

		if (0 != hp)
		{
			json["c"] = hp;
		}

		if (0 != dead)
		{
			json["d"] = dead;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				key = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				hp = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				dead = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatResultFighter Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatResult
{
	public int winSide = 0;
	public List<CombatResultFighter> attacker = new List<CombatResultFighter>();
	public List<CombatResultFighter> adversary = new List<CombatResultFighter>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["winSide"] = winSide;
		json["attacker"] = new JsonData();
		json["attacker"].SetJsonType(JsonType.Array);
		foreach(CombatResultFighter temp in attacker)
		{
			json["attacker"].Add(temp.GetJsonData());
		}
		json["adversary"] = new JsonData();
		json["adversary"].SetJsonType(JsonType.Array);
		foreach(CombatResultFighter temp in adversary)
		{
			json["adversary"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != winSide)
		{
			json["b"] = winSide;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(CombatResultFighter temp in attacker)
		{
			json["c"].Add(temp.Encode());
		}
		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(CombatResultFighter temp in adversary)
		{
			json["d"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				winSide = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					CombatResultFighter temp = new CombatResultFighter();
					temp.Decode(c_item);
					attacker.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				foreach(JsonData d_item in json["d"])
				{
					CombatResultFighter temp = new CombatResultFighter();
					temp.Decode(d_item);
					adversary.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatResult Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CombatReport
{
	public CombatInfo info = new CombatInfo();
	public List<CombatWave> waves = new List<CombatWave>();
	public CombatResult result = new CombatResult();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["info"] = info.GetJsonData();
		json["waves"] = new JsonData();
		json["waves"].SetJsonType(JsonType.Array);
		foreach(CombatWave temp in waves)
		{
			json["waves"].Add(temp.GetJsonData());
		}
		json["result"] = result.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = info.Encode();
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(CombatWave temp in waves)
		{
			json["c"].Add(temp.Encode());
		}
		json["d"] = result.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				info.Decode(json["b"]);
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					CombatWave temp = new CombatWave();
					temp.Decode(c_item);
					waves.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				result.Decode(json["d"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CombatReport Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Gm_Command : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Gm_Command_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string command = "";

	public Request_Gm_Command()
	{
		command = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["command"] = command.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(command))
		{
			json["c"] = command.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Gm_Command : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Gm_Command_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public CombatReport testReport = new CombatReport();

	public Response_Gm_Command()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		testReport =  new CombatReport();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				testReport.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Gm_Command Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["testReport"] = testReport.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Client_Error : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Client_Error_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string userId = "";
	public string ver = "";
	public string err = "";
	public int osType = 0; //enum EOsType
	public string stackTrack = "";

	public Request_Client_Error()
	{
		userId = String.Empty;
		ver = String.Empty;
		err = String.Empty;
		osType = 0;
		stackTrack = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["userId"] = userId.ToString();
		json["ver"] = ver.ToString();
		json["err"] = err.ToString();
		json["osType"] = osType;
		json["stackTrack"] = stackTrack.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(ver))
		{
			json["d"] = ver.ToString();
		}
		if (!String.IsNullOrEmpty(err))
		{
			json["e"] = err.ToString();
		}
		if (0 != osType)
		{
			json["f"] = osType;
		}

		if (!String.IsNullOrEmpty(stackTrack))
		{
			json["g"] = stackTrack.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Client_Error : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Client_Error_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Client_Error()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Client_Error Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Response_Client_Af : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Client_Af_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string eventName = "";
	public int eventArg = 0;

	public Response_Client_Af()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		eventName = String.Empty;
		eventArg = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				eventName = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				eventArg = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Client_Af Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["eventName"] = eventName.ToString();
		json["eventArg"] = eventArg;
		return json.ToJson();
	}
#endif
}

public class Notice
{
	public int lang = 0; //enum ELangType
	public string noticeTitle = "";
	public string noticeContent = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["lang"] = lang;
		json["noticeTitle"] = noticeTitle.ToString();
		json["noticeContent"] = noticeContent.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != lang)
		{
			json["b"] = lang;
		}

		if (!String.IsNullOrEmpty(noticeTitle))
		{
			json["c"] = noticeTitle.ToString();
		}
		if (!String.IsNullOrEmpty(noticeContent))
		{
			json["d"] = noticeContent.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				lang = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				noticeTitle = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				noticeContent = json["d"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Notice Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CsvFileMd5
{
	public string fileName = "";
	public string fileMd5 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["fileName"] = fileName.ToString();
		json["fileMd5"] = fileMd5.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(fileName))
		{
			json["b"] = fileName.ToString();
		}
		if (!String.IsNullOrEmpty(fileMd5))
		{
			json["c"] = fileMd5.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				fileName = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				fileMd5 = json["c"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CsvFileMd5 Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class CsvFileContent
{
	public string fileName = "";
	public string fileMd5 = "";
	public string fileContent = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["fileName"] = fileName.ToString();
		json["fileMd5"] = fileMd5.ToString();
		json["fileContent"] = fileContent.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(fileName))
		{
			json["b"] = fileName.ToString();
		}
		if (!String.IsNullOrEmpty(fileMd5))
		{
			json["c"] = fileMd5.ToString();
		}
		if (!String.IsNullOrEmpty(fileContent))
		{
			json["d"] = fileContent.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				fileName = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				fileMd5 = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				fileContent = json["d"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CsvFileContent Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Gate : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Gate_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int osType = 0; //enum EOsType
	public int lang = 0; //enum ELangType
	public string appVer = "";
	public string resVer = "";
	public string gameUrl = "";

	public Request_Gate()
	{
		osType = 0;
		lang = 0;
		appVer = String.Empty;
		resVer = String.Empty;
		gameUrl = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["osType"] = osType;
		json["lang"] = lang;
		json["appVer"] = appVer.ToString();
		json["resVer"] = resVer.ToString();
		json["gameUrl"] = gameUrl.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != osType)
		{
			json["c"] = osType;
		}

		if (0 != lang)
		{
			json["d"] = lang;
		}

		if (!String.IsNullOrEmpty(appVer))
		{
			json["e"] = appVer.ToString();
		}
		if (!String.IsNullOrEmpty(resVer))
		{
			json["f"] = resVer.ToString();
		}
		if (!String.IsNullOrEmpty(gameUrl))
		{
			json["g"] = gameUrl.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Gate : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Gate_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string appVer = "";
	public string resVer = "";
	public string gameUrl = "";
	public string resUrl = "";
	public int noticeAutoCloseTime = 0;
	public List<Notice> noticeList = new List<Notice>();
	public int userBehaviorReportFlag = 0;
	public int lei = 0;

	public Response_Gate()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		appVer = String.Empty;
		resVer = String.Empty;
		gameUrl = String.Empty;
		resUrl = String.Empty;
		noticeAutoCloseTime = 0;
		userBehaviorReportFlag = 0;
		lei = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				appVer = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				resVer = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				gameUrl = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				resUrl = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				noticeAutoCloseTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					Notice temp = new Notice();
					temp.Decode(k_item);
					noticeList.Add(temp);
				}
			}
			if (oKeys.Contains("l"))
			{
				userBehaviorReportFlag = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				lei = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Gate Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["appVer"] = appVer.ToString();
		json["resVer"] = resVer.ToString();
		json["gameUrl"] = gameUrl.ToString();
		json["resUrl"] = resUrl.ToString();
		json["noticeAutoCloseTime"] = noticeAutoCloseTime;
		json["noticeList"] = new JsonData();
		json["noticeList"].SetJsonType(JsonType.Array);
		foreach(Notice temp in noticeList)
		{
			json["noticeList"].Add(temp.GetJsonData());
		}
		json["userBehaviorReportFlag"] = userBehaviorReportFlag;
		json["lei"] = lei;
		return json.ToJson();
	}
#endif
}

public class Request_Csv_List : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Csv_List_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Csv_List()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Csv_List : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Csv_List_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<CsvFileMd5> csvFileMd5List = new List<CsvFileMd5>();

	public Response_Csv_List()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					CsvFileMd5 temp = new CsvFileMd5();
					temp.Decode(f_item);
					csvFileMd5List.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Csv_List Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["csvFileMd5List"] = new JsonData();
		json["csvFileMd5List"].SetJsonType(JsonType.Array);
		foreach(CsvFileMd5 temp in csvFileMd5List)
		{
			json["csvFileMd5List"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Csv_Load : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Csv_Load_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string csvFileNameList = "";

	public Request_Csv_Load()
	{
		csvFileNameList = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["csvFileNameList"] = csvFileNameList.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(csvFileNameList))
		{
			json["c"] = csvFileNameList.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Csv_Load : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Csv_Load_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<CsvFileContent> csvFileContentList = new List<CsvFileContent>();

	public Response_Csv_Load()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					CsvFileContent temp = new CsvFileContent();
					temp.Decode(f_item);
					csvFileContentList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Csv_Load Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["csvFileContentList"] = new JsonData();
		json["csvFileContentList"].SetJsonType(JsonType.Array);
		foreach(CsvFileContent temp in csvFileContentList)
		{
			json["csvFileContentList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Heartbeat : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Heartbeat_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string appVer = "";
	public string resVer = "";
	public int heartbeat = 0;
	public string unionId = "";
	public int lastDay = 0;
	public int onlineTime = 0;
	public int mailTime = 0;
	public int chatIndex = 0;
	public int raceLampIndex = 0;
	public int activityBuffVersion = 0;
	public string verStr = "";
	public int ver1 = 0;
	public int ver2 = 0;
	public int ver3 = 0;
	public int ver4 = 0;
	public int ver5 = 0;
	public int ver6 = 0;
	public int ver7 = 0;
	public int ver8 = 0;
	public int ver9 = 0;
	public int ver10 = 0;

	public Request_Heartbeat()
	{
		appVer = String.Empty;
		resVer = String.Empty;
		heartbeat = 0;
		unionId = String.Empty;
		lastDay = 0;
		onlineTime = 0;
		mailTime = 0;
		chatIndex = 0;
		raceLampIndex = 0;
		activityBuffVersion = 0;
		verStr = String.Empty;
		ver1 = 0;
		ver2 = 0;
		ver3 = 0;
		ver4 = 0;
		ver5 = 0;
		ver6 = 0;
		ver7 = 0;
		ver8 = 0;
		ver9 = 0;
		ver10 = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["appVer"] = appVer.ToString();
		json["resVer"] = resVer.ToString();
		json["heartbeat"] = heartbeat;
		json["unionId"] = unionId.ToString();
		json["lastDay"] = lastDay;
		json["onlineTime"] = onlineTime;
		json["mailTime"] = mailTime;
		json["chatIndex"] = chatIndex;
		json["raceLampIndex"] = raceLampIndex;
		json["activityBuffVersion"] = activityBuffVersion;
		json["verStr"] = verStr.ToString();
		json["ver1"] = ver1;
		json["ver2"] = ver2;
		json["ver3"] = ver3;
		json["ver4"] = ver4;
		json["ver5"] = ver5;
		json["ver6"] = ver6;
		json["ver7"] = ver7;
		json["ver8"] = ver8;
		json["ver9"] = ver9;
		json["ver10"] = ver10;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(appVer))
		{
			json["c"] = appVer.ToString();
		}
		if (!String.IsNullOrEmpty(resVer))
		{
			json["d"] = resVer.ToString();
		}
		if (0 != heartbeat)
		{
			json["e"] = heartbeat;
		}

		if (!String.IsNullOrEmpty(unionId))
		{
			json["f"] = unionId.ToString();
		}
		if (0 != lastDay)
		{
			json["g"] = lastDay;
		}

		if (0 != onlineTime)
		{
			json["h"] = onlineTime;
		}

		if (0 != mailTime)
		{
			json["i"] = mailTime;
		}

		if (0 != chatIndex)
		{
			json["j"] = chatIndex;
		}

		if (0 != raceLampIndex)
		{
			json["k"] = raceLampIndex;
		}

		if (0 != activityBuffVersion)
		{
			json["l"] = activityBuffVersion;
		}

		if (!String.IsNullOrEmpty(verStr))
		{
			json["m"] = verStr.ToString();
		}
		if (0 != ver1)
		{
			json["n"] = ver1;
		}

		if (0 != ver2)
		{
			json["o"] = ver2;
		}

		if (0 != ver3)
		{
			json["p"] = ver3;
		}

		if (0 != ver4)
		{
			json["q"] = ver4;
		}

		if (0 != ver5)
		{
			json["r"] = ver5;
		}

		if (0 != ver6)
		{
			json["s"] = ver6;
		}

		if (0 != ver7)
		{
			json["t"] = ver7;
		}

		if (0 != ver8)
		{
			json["u"] = ver8;
		}

		if (0 != ver9)
		{
			json["v"] = ver9;
		}

		if (0 != ver10)
		{
			json["w"] = ver10;
		}

		return json.ToJson();
	}
}

public class Response_Heartbeat : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Heartbeat_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heartbeat = 0;
	public int lastDay = 0;
	public int onlineTime = 0;
	public int mailTime = 0;
	public int chatIndex = 0;
	public int raceLampIndex = 0;
	public int newChatEvent = 0;
	public int newMailEvent = 0;
	public int newShopperEvent = 0;
	public int newDesignEvent = 0;
	public int newMarketEvent = 0;
	public int newUnionEvent = 0;
	public int newUnionScienceEvent = 0;
	public int newUnionSkillEvent = 0;
	public int newUnionBuildEvent = 0;
	public int newUnionHelpEvent = 0;
	public int newUnionTaskEvent = 0;
	public int newUnionOperatingActivityEvent = 0;
	public int newUnionGoldCastleEvent = 0;
	public int activityBuffVersion = 0;
	public string verStr = "";
	public int ver1 = 0;
	public int ver2 = 0;
	public int ver3 = 0;
	public int ver4 = 0;
	public int ver5 = 0;
	public int ver6 = 0;
	public int ver7 = 0;
	public int ver8 = 0;
	public int ver9 = 0;
	public int ver10 = 0;
	public int newSystemMsgEvent = 0;

	public Response_Heartbeat()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heartbeat = 0;
		lastDay = 0;
		onlineTime = 0;
		mailTime = 0;
		chatIndex = 0;
		raceLampIndex = 0;
		newChatEvent = 0;
		newMailEvent = 0;
		newShopperEvent = 0;
		newDesignEvent = 0;
		newMarketEvent = 0;
		newUnionEvent = 0;
		newUnionScienceEvent = 0;
		newUnionSkillEvent = 0;
		newUnionBuildEvent = 0;
		newUnionHelpEvent = 0;
		newUnionTaskEvent = 0;
		newUnionOperatingActivityEvent = 0;
		newUnionGoldCastleEvent = 0;
		activityBuffVersion = 0;
		verStr = String.Empty;
		ver1 = 0;
		ver2 = 0;
		ver3 = 0;
		ver4 = 0;
		ver5 = 0;
		ver6 = 0;
		ver7 = 0;
		ver8 = 0;
		ver9 = 0;
		ver10 = 0;
		newSystemMsgEvent = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heartbeat = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				lastDay = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				onlineTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				mailTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				chatIndex = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				raceLampIndex = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				newChatEvent = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				newMailEvent = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				newShopperEvent = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				newDesignEvent = Int32.Parse(json["o"].ToString());
			}

			if (oKeys.Contains("p"))
			{
				newMarketEvent = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				newUnionEvent = Int32.Parse(json["q"].ToString());
			}

			if (oKeys.Contains("r"))
			{
				newUnionScienceEvent = Int32.Parse(json["r"].ToString());
			}

			if (oKeys.Contains("s"))
			{
				newUnionSkillEvent = Int32.Parse(json["s"].ToString());
			}

			if (oKeys.Contains("t"))
			{
				newUnionBuildEvent = Int32.Parse(json["t"].ToString());
			}

			if (oKeys.Contains("u"))
			{
				newUnionHelpEvent = Int32.Parse(json["u"].ToString());
			}

			if (oKeys.Contains("v"))
			{
				newUnionTaskEvent = Int32.Parse(json["v"].ToString());
			}

			if (oKeys.Contains("w"))
			{
				newUnionOperatingActivityEvent = Int32.Parse(json["w"].ToString());
			}

			if (oKeys.Contains("x"))
			{
				newUnionGoldCastleEvent = Int32.Parse(json["x"].ToString());
			}

			if (oKeys.Contains("y"))
			{
				activityBuffVersion = Int32.Parse(json["y"].ToString());
			}

			if (oKeys.Contains("z"))
			{
				verStr = json["z"].ToString();
			}
			if (oKeys.Contains("a1"))
			{
				ver1 = Int32.Parse(json["a1"].ToString());
			}

			if (oKeys.Contains("a2"))
			{
				ver2 = Int32.Parse(json["a2"].ToString());
			}

			if (oKeys.Contains("a3"))
			{
				ver3 = Int32.Parse(json["a3"].ToString());
			}

			if (oKeys.Contains("a4"))
			{
				ver4 = Int32.Parse(json["a4"].ToString());
			}

			if (oKeys.Contains("a5"))
			{
				ver5 = Int32.Parse(json["a5"].ToString());
			}

			if (oKeys.Contains("a6"))
			{
				ver6 = Int32.Parse(json["a6"].ToString());
			}

			if (oKeys.Contains("a7"))
			{
				ver7 = Int32.Parse(json["a7"].ToString());
			}

			if (oKeys.Contains("a8"))
			{
				ver8 = Int32.Parse(json["a8"].ToString());
			}

			if (oKeys.Contains("a9"))
			{
				ver9 = Int32.Parse(json["a9"].ToString());
			}

			if (oKeys.Contains("aa"))
			{
				ver10 = Int32.Parse(json["aa"].ToString());
			}

			if (oKeys.Contains("ab"))
			{
				newSystemMsgEvent = Int32.Parse(json["ab"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Heartbeat Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heartbeat"] = heartbeat;
		json["lastDay"] = lastDay;
		json["onlineTime"] = onlineTime;
		json["mailTime"] = mailTime;
		json["chatIndex"] = chatIndex;
		json["raceLampIndex"] = raceLampIndex;
		json["newChatEvent"] = newChatEvent;
		json["newMailEvent"] = newMailEvent;
		json["newShopperEvent"] = newShopperEvent;
		json["newDesignEvent"] = newDesignEvent;
		json["newMarketEvent"] = newMarketEvent;
		json["newUnionEvent"] = newUnionEvent;
		json["newUnionScienceEvent"] = newUnionScienceEvent;
		json["newUnionSkillEvent"] = newUnionSkillEvent;
		json["newUnionBuildEvent"] = newUnionBuildEvent;
		json["newUnionHelpEvent"] = newUnionHelpEvent;
		json["newUnionTaskEvent"] = newUnionTaskEvent;
		json["newUnionOperatingActivityEvent"] = newUnionOperatingActivityEvent;
		json["newUnionGoldCastleEvent"] = newUnionGoldCastleEvent;
		json["activityBuffVersion"] = activityBuffVersion;
		json["verStr"] = verStr.ToString();
		json["ver1"] = ver1;
		json["ver2"] = ver2;
		json["ver3"] = ver3;
		json["ver4"] = ver4;
		json["ver5"] = ver5;
		json["ver6"] = ver6;
		json["ver7"] = ver7;
		json["ver8"] = ver8;
		json["ver9"] = ver9;
		json["ver10"] = ver10;
		json["newSystemMsgEvent"] = newSystemMsgEvent;
		return json.ToJson();
	}
#endif
}

public class Request_Heartbeat2 : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Heartbeat2_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heartbeat = 0;
	public string unionId = "";
	public int ver1 = 0;

	public Request_Heartbeat2()
	{
		heartbeat = 0;
		unionId = String.Empty;
		ver1 = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heartbeat"] = heartbeat;
		json["unionId"] = unionId.ToString();
		json["ver1"] = ver1;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heartbeat)
		{
			json["c"] = heartbeat;
		}

		if (!String.IsNullOrEmpty(unionId))
		{
			json["d"] = unionId.ToString();
		}
		if (0 != ver1)
		{
			json["e"] = ver1;
		}

		return json.ToJson();
	}
}

public class Response_Heartbeat2 : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Heartbeat2_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heartbeat = 0;
	public int newPointActivity2Event = 0;
	public int ver1 = 0;

	public Response_Heartbeat2()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heartbeat = 0;
		newPointActivity2Event = 0;
		ver1 = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heartbeat = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				newPointActivity2Event = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				ver1 = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Heartbeat2 Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heartbeat"] = heartbeat;
		json["newPointActivity2Event"] = newPointActivity2Event;
		json["ver1"] = ver1;
		return json.ToJson();
	}
#endif
}

public class Response_Notify : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Notify_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string text = "";

	public Response_Notify()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		text = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				text = json["f"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Notify Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["text"] = text.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_User_Login : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Login_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int platform = 0; //enum EPlatform
	public int osType = 0; //enum EOsType
	public string libCode = "";
	public string appVer = "";
	public string resVer = "";
	public string deviceId = "";
	public string accountToken = "";
	public string account = "";
	public string platformUid = "";
	public string platformToken = "";
	public string platformChannel = "";
	public string s1 = "";
	public string s2 = "";
	public string s3 = "";
	public string s4 = "";

	public Request_User_Login()
	{
		platform = 0;
		osType = 0;
		libCode = String.Empty;
		appVer = String.Empty;
		resVer = String.Empty;
		deviceId = String.Empty;
		accountToken = String.Empty;
		account = String.Empty;
		platformUid = String.Empty;
		platformToken = String.Empty;
		platformChannel = String.Empty;
		s1 = String.Empty;
		s2 = String.Empty;
		s3 = String.Empty;
		s4 = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["platform"] = platform;
		json["osType"] = osType;
		json["libCode"] = libCode.ToString();
		json["appVer"] = appVer.ToString();
		json["resVer"] = resVer.ToString();
		json["deviceId"] = deviceId.ToString();
		json["accountToken"] = accountToken.ToString();
		json["account"] = account.ToString();
		json["platformUid"] = platformUid.ToString();
		json["platformToken"] = platformToken.ToString();
		json["platformChannel"] = platformChannel.ToString();
		json["s1"] = s1.ToString();
		json["s2"] = s2.ToString();
		json["s3"] = s3.ToString();
		json["s4"] = s4.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != platform)
		{
			json["c"] = platform;
		}

		if (0 != osType)
		{
			json["d"] = osType;
		}

		if (!String.IsNullOrEmpty(libCode))
		{
			json["e"] = libCode.ToString();
		}
		if (!String.IsNullOrEmpty(appVer))
		{
			json["f"] = appVer.ToString();
		}
		if (!String.IsNullOrEmpty(resVer))
		{
			json["g"] = resVer.ToString();
		}
		if (!String.IsNullOrEmpty(deviceId))
		{
			json["h"] = deviceId.ToString();
		}
		if (!String.IsNullOrEmpty(accountToken))
		{
			json["i"] = accountToken.ToString();
		}
		if (!String.IsNullOrEmpty(account))
		{
			json["j"] = account.ToString();
		}
		if (!String.IsNullOrEmpty(platformUid))
		{
			json["k"] = platformUid.ToString();
		}
		if (!String.IsNullOrEmpty(platformToken))
		{
			json["l"] = platformToken.ToString();
		}
		if (!String.IsNullOrEmpty(platformChannel))
		{
			json["m"] = platformChannel.ToString();
		}
		if (!String.IsNullOrEmpty(s1))
		{
			json["n"] = s1.ToString();
		}
		if (!String.IsNullOrEmpty(s2))
		{
			json["o"] = s2.ToString();
		}
		if (!String.IsNullOrEmpty(s3))
		{
			json["p"] = s3.ToString();
		}
		if (!String.IsNullOrEmpty(s4))
		{
			json["q"] = s4.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_Login : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Login_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string account = "";
	public string userId = "";
	public string nickName = "";
	public string accountToken = "";
	public int bindingType = 0; //enum EBindingType
	public string bindingId = "";
	public int bindingClaimState = 0;
	public int isNewUser = 0;
	public string k1 = "";

	public Response_User_Login()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		account = String.Empty;
		userId = String.Empty;
		nickName = String.Empty;
		accountToken = String.Empty;
		bindingType = 0;
		bindingId = String.Empty;
		bindingClaimState = 0;
		isNewUser = 0;
		k1 = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				account = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				userId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				nickName = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				accountToken = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				bindingType = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				bindingId = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				bindingClaimState = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				isNewUser = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				k1 = json["n"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Login Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["account"] = account.ToString();
		json["userId"] = userId.ToString();
		json["nickName"] = nickName.ToString();
		json["accountToken"] = accountToken.ToString();
		json["bindingType"] = bindingType;
		json["bindingId"] = bindingId.ToString();
		json["bindingClaimState"] = bindingClaimState;
		json["isNewUser"] = isNewUser;
		json["k1"] = k1.ToString();
		return json.ToJson();
	}
#endif
}

public class UserDress
{
	public int dress1 = 0;
	public int dress2 = 0;
	public int dress3 = 0;
	public int dress4 = 0;
	public int dress5 = 0;
	public int dress6 = 0;
	public int dress7 = 0;
	public int dress8 = 0;
	public int dress20 = 0;
	public int dress21 = 0;
	public int dress22 = 0;
	public int dress23 = 0;
	public int dress24 = 0;
	public int dress25 = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["dress1"] = dress1;
		json["dress2"] = dress2;
		json["dress3"] = dress3;
		json["dress4"] = dress4;
		json["dress5"] = dress5;
		json["dress6"] = dress6;
		json["dress7"] = dress7;
		json["dress8"] = dress8;
		json["dress20"] = dress20;
		json["dress21"] = dress21;
		json["dress22"] = dress22;
		json["dress23"] = dress23;
		json["dress24"] = dress24;
		json["dress25"] = dress25;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != dress1)
		{
			json["b"] = dress1;
		}

		if (0 != dress2)
		{
			json["c"] = dress2;
		}

		if (0 != dress3)
		{
			json["d"] = dress3;
		}

		if (0 != dress4)
		{
			json["e"] = dress4;
		}

		if (0 != dress5)
		{
			json["f"] = dress5;
		}

		if (0 != dress6)
		{
			json["g"] = dress6;
		}

		if (0 != dress7)
		{
			json["h"] = dress7;
		}

		if (0 != dress8)
		{
			json["i"] = dress8;
		}

		if (0 != dress20)
		{
			json["j"] = dress20;
		}

		if (0 != dress21)
		{
			json["k"] = dress21;
		}

		if (0 != dress22)
		{
			json["l"] = dress22;
		}

		if (0 != dress23)
		{
			json["m"] = dress23;
		}

		if (0 != dress24)
		{
			json["n"] = dress24;
		}

		if (0 != dress25)
		{
			json["o"] = dress25;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				dress1 = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				dress2 = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				dress3 = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				dress4 = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				dress5 = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				dress6 = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				dress7 = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				dress8 = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				dress20 = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				dress21 = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				dress22 = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				dress23 = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				dress24 = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				dress25 = Int32.Parse(json["o"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UserDress Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UnionMemberData
{
	public string unionName = "";
	public UnionMember unionMember = new UnionMember();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["unionName"] = unionName.ToString();
		json["unionMember"] = unionMember.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(unionName))
		{
			json["b"] = unionName.ToString();
		}
		json["c"] = unionMember.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				unionName = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				unionMember.Decode(json["c"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionMemberData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_Create : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Create_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string nickName = "";
	public int gender = 0; //enum EGender
	public RoleDress userDress = new RoleDress();

	public Request_User_Create()
	{
		nickName = String.Empty;
		gender = 0;
		userDress =  new RoleDress();
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["nickName"] = nickName.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(nickName))
		{
			json["c"] = nickName.ToString();
		}
		if (0 != gender)
		{
			json["d"] = gender;
		}

		json["e"] = userDress.Encode();
		return json.ToJson();
	}
}

public class Response_User_Create : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Create_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string account = "";
	public string userId = "";

	public Response_User_Create()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		account = String.Empty;
		userId = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				account = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				userId = json["g"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Create Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["account"] = account.ToString();
		json["userId"] = userId.ToString();
		return json.ToJson();
	}
#endif
}

public class UserData
{
	public string nickName = "";
	public int gender = 0; //enum EGender
	public RoleDress userDress = new RoleDress();
	public long exp = 0;
	public int level = 0;
	public long gold = 0;
	public int gem = 0;
	public int energy = 0;
	public int energyLimit = 0;
	public int drawing = 0;
	public long worth = 0;
	public long invest = 0;
	public int prosperity = 0;
	public int masterCount = 0;
	public int bagLimit = 0;
	public int pileLimit = 0;
	public int guideId = 0;
	public int unionCoin = 0;
	public int unionHelpCount = 0;
	public int unionTaskCrownCount = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["nickName"] = nickName.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		json["exp"] = exp;
		json["level"] = level;
		json["gold"] = gold;
		json["gem"] = gem;
		json["energy"] = energy;
		json["energyLimit"] = energyLimit;
		json["drawing"] = drawing;
		json["worth"] = worth;
		json["invest"] = invest;
		json["prosperity"] = prosperity;
		json["masterCount"] = masterCount;
		json["bagLimit"] = bagLimit;
		json["pileLimit"] = pileLimit;
		json["guideId"] = guideId;
		json["unionCoin"] = unionCoin;
		json["unionHelpCount"] = unionHelpCount;
		json["unionTaskCrownCount"] = unionTaskCrownCount;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(nickName))
		{
			json["b"] = nickName.ToString();
		}
		if (0 != gender)
		{
			json["c"] = gender;
		}

		json["d"] = userDress.Encode();
		if (0 != exp)
		{
			json["e"] = exp;
		}

		if (0 != level)
		{
			json["f"] = level;
		}

		if (0 != gold)
		{
			json["g"] = gold;
		}

		if (0 != gem)
		{
			json["h"] = gem;
		}

		if (0 != energy)
		{
			json["i"] = energy;
		}

		if (0 != energyLimit)
		{
			json["j"] = energyLimit;
		}

		if (0 != drawing)
		{
			json["k"] = drawing;
		}

		if (0 != worth)
		{
			json["l"] = worth;
		}

		if (0 != invest)
		{
			json["m"] = invest;
		}

		if (0 != prosperity)
		{
			json["n"] = prosperity;
		}

		if (0 != masterCount)
		{
			json["o"] = masterCount;
		}

		if (0 != bagLimit)
		{
			json["p"] = bagLimit;
		}

		if (0 != pileLimit)
		{
			json["q"] = pileLimit;
		}

		if (0 != guideId)
		{
			json["r"] = guideId;
		}

		if (0 != unionCoin)
		{
			json["s"] = unionCoin;
		}

		if (0 != unionHelpCount)
		{
			json["t"] = unionHelpCount;
		}

		if (0 != unionTaskCrownCount)
		{
			json["u"] = unionTaskCrownCount;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				nickName = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				gender = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				userDress.Decode(json["d"]);
			}

			if (oKeys.Contains("e"))
			{
				exp = Int64.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				level = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				gold = Int64.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				gem = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				energy = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				energyLimit = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				drawing = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				worth = Int64.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				invest = Int64.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				prosperity = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				masterCount = Int32.Parse(json["o"].ToString());
			}

			if (oKeys.Contains("p"))
			{
				bagLimit = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				pileLimit = Int32.Parse(json["q"].ToString());
			}

			if (oKeys.Contains("r"))
			{
				guideId = Int32.Parse(json["r"].ToString());
			}

			if (oKeys.Contains("s"))
			{
				unionCoin = Int32.Parse(json["s"].ToString());
			}

			if (oKeys.Contains("t"))
			{
				unionHelpCount = Int32.Parse(json["t"].ToString());
			}

			if (oKeys.Contains("u"))
			{
				unionTaskCrownCount = Int32.Parse(json["u"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UserData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UserExtData
{
	public int freeNameCount = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["freeNameCount"] = freeNameCount;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != freeNameCount)
		{
			json["b"] = freeNameCount;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				freeNameCount = Int32.Parse(json["b"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UserExtData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class UnionData
{
	public string unionId = "";
	public string unionName = "";
	public int unionLevel = 0;
	public int memberJob = 0; //enum EUnionJob

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["unionId"] = unionId.ToString();
		json["unionName"] = unionName.ToString();
		json["unionLevel"] = unionLevel;
		json["memberJob"] = memberJob;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(unionId))
		{
			json["b"] = unionId.ToString();
		}
		if (!String.IsNullOrEmpty(unionName))
		{
			json["c"] = unionName.ToString();
		}
		if (0 != unionLevel)
		{
			json["d"] = unionLevel;
		}

		if (0 != memberJob)
		{
			json["e"] = memberJob;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				unionId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				unionName = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				unionLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				memberJob = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}


public class UnionMsgData
{
	public int unionMsgType = 0; //enum EUnionMessageType
	public int unionId = 0;
	public int eventTime = 0;
	public string userId = "";
	public string nickName = "";
	public string optionUserId = "";
	public int gender = 0; //enum EGender
	public int level = 0;
	public RoleDress userDress = new RoleDress();
	public int memberJob = 0; //enum EUnionJob

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["unionMsgType"] = unionMsgType;
		json["unionId"] = unionId;
		json["eventTime"] = eventTime;
		json["userId"] = userId.ToString();
		json["nickName"] = nickName.ToString();
		json["optionUserId"] = optionUserId.ToString();
		json["gender"] = gender;
		json["level"] = level;
		json["userDress"] = userDress.GetJsonData();
		json["memberJob"] = memberJob;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != unionMsgType)
		{
			json["b"] = unionMsgType;
		}

		if (0 != unionId)
		{
			json["c"] = unionId;
		}

		if (0 != eventTime)
		{
			json["d"] = eventTime;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["e"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(nickName))
		{
			json["f"] = nickName.ToString();
		}
		if (!String.IsNullOrEmpty(optionUserId))
		{
			json["g"] = optionUserId.ToString();
		}
		if (0 != gender)
		{
			json["h"] = gender;
		}

		if (0 != level)
		{
			json["i"] = level;
		}

		json["j"] = userDress.Encode();
		if (0 != memberJob)
		{
			json["k"] = memberJob;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				unionMsgType = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				unionId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				eventTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				userId = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nickName = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				optionUserId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				gender = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				level = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				userDress.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				memberJob = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("UnionMsgData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class GuildData
{
	public string guildName = "";
	public int guildLevel = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["guildName"] = guildName.ToString();
		json["guildLevel"] = guildLevel;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(guildName))
		{
			json["b"] = guildName.ToString();
		}
		if (0 != guildLevel)
		{
			json["c"] = guildLevel;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				guildName = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				guildLevel = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("GuildData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}





public class DesignData
{
	public int shopLevel = 0;
	public int shopState = 0; //enum EDesignState
	public int shopStateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["shopLevel"] = shopLevel;
		json["shopState"] = shopState;
		json["shopStateRemainTime"] = shopStateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != shopLevel)
		{
			json["b"] = shopLevel;
		}

		if (0 != shopState)
		{
			json["c"] = shopState;
		}

		if (0 != shopStateRemainTime)
		{
			json["d"] = shopStateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				shopLevel = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				shopState = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				shopStateRemainTime = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DesignData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class FreeData
{
	public int freeDesignBuyCount = 0;
	public int freeHeroBuyCount = 0;
	public int freeEquipImproveCount = 0;
	public int freeExploreImmediateCount = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["freeDesignBuyCount"] = freeDesignBuyCount;
		json["freeHeroBuyCount"] = freeHeroBuyCount;
		json["freeEquipImproveCount"] = freeEquipImproveCount;
		json["freeExploreImmediateCount"] = freeExploreImmediateCount;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != freeDesignBuyCount)
		{
			json["b"] = freeDesignBuyCount;
		}

		if (0 != freeHeroBuyCount)
		{
			json["c"] = freeHeroBuyCount;
		}

		if (0 != freeEquipImproveCount)
		{
			json["d"] = freeEquipImproveCount;
		}

		if (0 != freeExploreImmediateCount)
		{
			json["e"] = freeExploreImmediateCount;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				freeDesignBuyCount = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				freeHeroBuyCount = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				freeEquipImproveCount = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				freeExploreImmediateCount = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("FreeData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}


public class OneRewardItem
{
	public int itemType = 0; //enum EItemType
	public int itemId = 0;
	public int quality = 0;
	public long count = 0;
	public int recycledItemType1 = 0; //enum EItemType
	public int recycledItemId1 = 0;
	public int recycledQuality1 = 0;
	public long recycledCount1 = 0;
	public int recycledItemType2 = 0; //enum EItemType
	public int recycledItemId2 = 0;
	public int recycledQuality2 = 0;
	public long recycledCount2 = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["quality"] = quality;
		json["count"] = count;
		json["recycledItemType1"] = recycledItemType1;
		json["recycledItemId1"] = recycledItemId1;
		json["recycledQuality1"] = recycledQuality1;
		json["recycledCount1"] = recycledCount1;
		json["recycledItemType2"] = recycledItemType2;
		json["recycledItemId2"] = recycledItemId2;
		json["recycledQuality2"] = recycledQuality2;
		json["recycledCount2"] = recycledCount2;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemType)
		{
			json["b"] = itemType;
		}

		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != quality)
		{
			json["d"] = quality;
		}

		if (0 != count)
		{
			json["e"] = count;
		}

		if (0 != recycledItemType1)
		{
			json["f"] = recycledItemType1;
		}

		if (0 != recycledItemId1)
		{
			json["g"] = recycledItemId1;
		}

		if (0 != recycledQuality1)
		{
			json["h"] = recycledQuality1;
		}

		if (0 != recycledCount1)
		{
			json["i"] = recycledCount1;
		}

		if (0 != recycledItemType2)
		{
			json["j"] = recycledItemType2;
		}

		if (0 != recycledItemId2)
		{
			json["k"] = recycledItemId2;
		}

		if (0 != recycledQuality2)
		{
			json["l"] = recycledQuality2;
		}

		if (0 != recycledCount2)
		{
			json["m"] = recycledCount2;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemType = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				quality = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				count = Int64.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				recycledItemType1 = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				recycledItemId1 = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				recycledQuality1 = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				recycledCount1 = Int64.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				recycledItemType2 = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				recycledItemId2 = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				recycledQuality2 = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				recycledCount2 = Int64.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneRewardItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_User_CommonReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_CommonReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_CommonReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_CommonReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_ExchangeCodeReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_ExchangeCodeReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string exchangeCode = "";

	public Request_User_ExchangeCodeReward()
	{
		exchangeCode = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exchangeCode"] = exchangeCode.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(exchangeCode))
		{
			json["c"] = exchangeCode.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_ExchangeCodeReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_ExchangeCodeReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_ExchangeCodeReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_ExchangeCodeReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}


public class OnePetInfo
{
	public int petUid = 0;
	public int furnitureUid = 0;
	public int petId = 0;
	public string petName = "";
	public int petType = 0;
	public int petLevel = 0;
	public int petState = 0; //enum EPetState
	public int petExp = 0;
	public int petEnergy = 0;
	public int petReputation = 0;
	public int petNextFeedTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["petUid"] = petUid;
		json["furnitureUid"] = furnitureUid;
		json["petId"] = petId;
		json["petName"] = petName.ToString();
		json["petType"] = petType;
		json["petLevel"] = petLevel;
		json["petState"] = petState;
		json["petExp"] = petExp;
		json["petEnergy"] = petEnergy;
		json["petReputation"] = petReputation;
		json["petNextFeedTime"] = petNextFeedTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != petUid)
		{
			json["b"] = petUid;
		}

		if (0 != furnitureUid)
		{
			json["c"] = furnitureUid;
		}

		if (0 != petId)
		{
			json["d"] = petId;
		}

		if (!String.IsNullOrEmpty(petName))
		{
			json["e"] = petName.ToString();
		}
		if (0 != petType)
		{
			json["f"] = petType;
		}

		if (0 != petLevel)
		{
			json["g"] = petLevel;
		}

		if (0 != petState)
		{
			json["h"] = petState;
		}

		if (0 != petExp)
		{
			json["i"] = petExp;
		}

		if (0 != petEnergy)
		{
			json["j"] = petEnergy;
		}

		if (0 != petReputation)
		{
			json["k"] = petReputation;
		}

		if (0 != petNextFeedTime)
		{
			json["l"] = petNextFeedTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				petUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureUid = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				petId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				petName = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				petLevel = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				petState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				petExp = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				petEnergy = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				petReputation = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				petNextFeedTime = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OnePetInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UserData userData = new UserData();
	public UserExtData userExtData = new UserExtData();
	public DesignData designData = new DesignData();
	public UnionData unionData = new UnionData();
	public FreeData freeData = new FreeData();
	public VIPInfo vipData = new VIPInfo();
	public OnePetInfo petInfo = new OnePetInfo();
	public int mainPetUid = 0;

	public Response_User_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userData =  new UserData();
		userExtData =  new UserExtData();
		designData =  new DesignData();
		unionData =  new UnionData();
		freeData =  new FreeData();
		vipData =  new VIPInfo();
		petInfo =  new OnePetInfo();
		mainPetUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				userExtData.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				designData.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				unionData.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				freeData.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				vipData.Decode(json["k"]);
			}

			if (oKeys.Contains("l"))
			{
				petInfo.Decode(json["l"]);
			}

			if (oKeys.Contains("m"))
			{
				mainPetUid = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userData"] = userData.GetJsonData();
		json["userExtData"] = userExtData.GetJsonData();
		json["designData"] = designData.GetJsonData();
		json["unionData"] = unionData.GetJsonData();
		json["freeData"] = freeData.GetJsonData();
		json["vipData"] = vipData.GetJsonData();
		json["petInfo"] = petInfo.GetJsonData();
		json["mainPetUid"] = mainPetUid;
		return json.ToJson();
	}
#endif
}




public class Response_User_DataChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_DataChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int dataType = 0; //enum EUserDataChangeType
	public long oldValue = 0;
	public long changeValue = 0;
	public long newValue = 0;
	public int reason = 0; //enum EItemLogReason

	public Response_User_DataChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		dataType = 0;
		oldValue = 0;
		changeValue = 0;
		newValue = 0;
		reason = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				dataType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				oldValue = Int64.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				changeValue = Int64.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				newValue = Int64.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				reason = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_DataChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dataType"] = dataType;
		json["oldValue"] = oldValue;
		json["changeValue"] = changeValue;
		json["newValue"] = newValue;
		json["reason"] = reason;
		return json.ToJson();
	}
#endif
}

public class Request_User_ChangeName : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_ChangeName_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string nickName = "";

	public Request_User_ChangeName()
	{
		nickName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["nickName"] = nickName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(nickName))
		{
			json["c"] = nickName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_ChangeName : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_ChangeName_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string nickName = "";

	public Response_User_ChangeName()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nickName = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nickName = json["f"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_ChangeName Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["nickName"] = nickName.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_User_DressList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_DressList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_DressList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_DressList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_DressList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<int> dressList = new List<int>();

	public Response_User_DressList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					int temp = Int32.Parse(f_item.ToString());
					dressList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_DressList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dressList"] = new JsonData();
		json["dressList"].SetJsonType(JsonType.Array);
		foreach(int temp in dressList)
		{
			json["dressList"].Add(temp);
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_BuyDress : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BuyDress_Cmd;
	public MsgHead msgHead = new MsgHead();
	public List<int> dressIdList = new List<int>();

	public Request_User_BuyDress()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["dressIdList"] = new JsonData();
		json["dressIdList"].SetJsonType(JsonType.Array);
		foreach(int temp in dressIdList)
		{
			json["dressIdList"].Add(temp);
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(int temp in dressIdList)
		{
			json["c"].Add(temp);
		}
		return json.ToJson();
	}
}

public class Response_User_BuyDress : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BuyDress_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<int> dressIdList = new List<int>();
	public List<int> dressList = new List<int>();

	public Response_User_BuyDress()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					int temp = Int32.Parse(f_item.ToString());
					dressIdList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					int temp = Int32.Parse(g_item.ToString());
					dressList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BuyDress Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dressIdList"] = new JsonData();
		json["dressIdList"].SetJsonType(JsonType.Array);
		foreach(int temp in dressIdList)
		{
			json["dressIdList"].Add(temp);
		}
		json["dressList"] = new JsonData();
		json["dressList"].SetJsonType(JsonType.Array);
		foreach(int temp in dressList)
		{
			json["dressList"].Add(temp);
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_Custom : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Custom_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int gender = 0; //enum EGender
	public RoleDress userDress = new RoleDress();

	public Request_User_Custom()
	{
		gender = 0;
		userDress =  new RoleDress();
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != gender)
		{
			json["c"] = gender;
		}

		json["d"] = userDress.Encode();
		return json.ToJson();
	}
}

public class Response_User_Custom : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Custom_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int gender = 0; //enum EGender
	public RoleDress userDress = new RoleDress();

	public Response_User_Custom()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		gender = 0;
		userDress =  new RoleDress();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				gender = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userDress.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Custom Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_User_Detail : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Detail_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string userId = "";

	public Request_User_Detail()
	{
		userId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["userId"] = userId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_Detail : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Detail_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string userId = "";
	public string unionId = "";
	public UserData userData = new UserData();
	public GuildData guildData = new GuildData();
	public ShopData shopData = new ShopData();
	public FloorData floorData = new FloorData();
	public WallData wallData = new WallData();
	public List<OneFurniture> furnitureList = new List<OneFurniture>();
	public List<OnePetInfo> petList = new List<OnePetInfo>();

	public Response_User_Detail()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userId = String.Empty;
		unionId = String.Empty;
		userData =  new UserData();
		guildData =  new GuildData();
		shopData =  new ShopData();
		floorData =  new FloorData();
		wallData =  new WallData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				unionId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				userData.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				guildData.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				shopData.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				floorData.Decode(json["k"]);
			}

			if (oKeys.Contains("l"))
			{
				wallData.Decode(json["l"]);
			}

			if (oKeys.Contains("m"))
			{
				foreach(JsonData m_item in json["m"])
				{
					OneFurniture temp = new OneFurniture();
					temp.Decode(m_item);
					furnitureList.Add(temp);
				}
			}
			if (oKeys.Contains("n"))
			{
				foreach(JsonData n_item in json["n"])
				{
					OnePetInfo temp = new OnePetInfo();
					temp.Decode(n_item);
					petList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Detail Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userId"] = userId.ToString();
		json["unionId"] = unionId.ToString();
		json["userData"] = userData.GetJsonData();
		json["guildData"] = guildData.GetJsonData();
		json["shopData"] = shopData.GetJsonData();
		json["floorData"] = floorData.GetJsonData();
		json["wallData"] = wallData.GetJsonData();
		json["furnitureList"] = new JsonData();
		json["furnitureList"].SetJsonType(JsonType.Array);
		foreach(OneFurniture temp in furnitureList)
		{
			json["furnitureList"].Add(temp.GetJsonData());
		}
		json["petList"] = new JsonData();
		json["petList"].SetJsonType(JsonType.Array);
		foreach(OnePetInfo temp in petList)
		{
			json["petList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_SetGuide : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_SetGuide_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int guideId = 0;

	public Request_User_SetGuide()
	{
		guideId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["guideId"] = guideId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != guideId)
		{
			json["c"] = guideId;
		}

		return json.ToJson();
	}
}

public class Response_User_SetGuide : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_SetGuide_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int guideId = 0;

	public Response_User_SetGuide()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		guideId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				guideId = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_SetGuide Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["guideId"] = guideId;
		return json.ToJson();
	}
#endif
}

public class Request_User_SkipGuide : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_SkipGuide_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int guideId = 0;

	public Request_User_SkipGuide()
	{
		guideId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["guideId"] = guideId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != guideId)
		{
			json["c"] = guideId;
		}

		return json.ToJson();
	}
}

public class Response_User_SkipGuide : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_SkipGuide_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int guideId = 0;

	public Response_User_SkipGuide()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		guideId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				guideId = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_SkipGuide Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["guideId"] = guideId;
		return json.ToJson();
	}
#endif
}

public class Request_User_BindingQuery : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BindingQuery_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int platform = 0; //enum EPlatform
	public int osType = 0; //enum EOsType
	public string platformUid = "";
	public string platformToken = "";

	public Request_User_BindingQuery()
	{
		platform = 0;
		osType = 0;
		platformUid = String.Empty;
		platformToken = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["platform"] = platform;
		json["osType"] = osType;
		json["platformUid"] = platformUid.ToString();
		json["platformToken"] = platformToken.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != platform)
		{
			json["c"] = platform;
		}

		if (0 != osType)
		{
			json["d"] = osType;
		}

		if (!String.IsNullOrEmpty(platformUid))
		{
			json["e"] = platformUid.ToString();
		}
		if (!String.IsNullOrEmpty(platformToken))
		{
			json["f"] = platformToken.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_BindingQuery : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BindingQuery_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int isBinding = 0;
	public UserData alreadyBindingUser = new UserData();
	public string alreadyBindingAccountToken = "";

	public Response_User_BindingQuery()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		isBinding = 0;
		alreadyBindingUser =  new UserData();
		alreadyBindingAccountToken = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				isBinding = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				alreadyBindingUser.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				alreadyBindingAccountToken = json["h"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BindingQuery Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["isBinding"] = isBinding;
		json["alreadyBindingUser"] = alreadyBindingUser.GetJsonData();
		json["alreadyBindingAccountToken"] = alreadyBindingAccountToken.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_User_Binding : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Binding_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int platform = 0; //enum EPlatform
	public int osType = 0; //enum EOsType
	public string platformUid = "";
	public string platformToken = "";
	public string platformUserName = "";

	public Request_User_Binding()
	{
		platform = 0;
		osType = 0;
		platformUid = String.Empty;
		platformToken = String.Empty;
		platformUserName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["platform"] = platform;
		json["osType"] = osType;
		json["platformUid"] = platformUid.ToString();
		json["platformToken"] = platformToken.ToString();
		json["platformUserName"] = platformUserName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != platform)
		{
			json["c"] = platform;
		}

		if (0 != osType)
		{
			json["d"] = osType;
		}

		if (!String.IsNullOrEmpty(platformUid))
		{
			json["e"] = platformUid.ToString();
		}
		if (!String.IsNullOrEmpty(platformToken))
		{
			json["f"] = platformToken.ToString();
		}
		if (!String.IsNullOrEmpty(platformUserName))
		{
			json["g"] = platformUserName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_Binding : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Binding_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int bindingType = 0; //enum EBindingType
	public string bindingId = "";
	public int bindingClaimState = 0;

	public Response_User_Binding()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		bindingType = 0;
		bindingId = String.Empty;
		bindingClaimState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				bindingType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				bindingId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				bindingClaimState = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Binding Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["bindingType"] = bindingType;
		json["bindingId"] = bindingId.ToString();
		json["bindingClaimState"] = bindingClaimState;
		return json.ToJson();
	}
#endif
}

public class Request_User_BindingClaim : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BindingClaim_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_BindingClaim()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_BindingClaim : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BindingClaim_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int bindingType = 0; //enum EBindingType
	public string bindingId = "";
	public int bindingClaimState = 0;

	public Response_User_BindingClaim()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		bindingType = 0;
		bindingId = String.Empty;
		bindingClaimState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				bindingType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				bindingId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				bindingClaimState = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BindingClaim Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["bindingType"] = bindingType;
		json["bindingId"] = bindingId.ToString();
		json["bindingClaimState"] = bindingClaimState;
		return json.ToJson();
	}
#endif
}



public class OneMainTask
{
	public int taskId = 0;
	public int taskParam = 0;
	public int taskLimit = 0;
	public int taskState = 0; //enum EMainTaskState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["taskId"] = taskId;
		json["taskParam"] = taskParam;
		json["taskLimit"] = taskLimit;
		json["taskState"] = taskState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != taskId)
		{
			json["b"] = taskId;
		}

		if (0 != taskParam)
		{
			json["c"] = taskParam;
		}

		if (0 != taskLimit)
		{
			json["d"] = taskLimit;
		}

		if (0 != taskState)
		{
			json["e"] = taskState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				taskId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				taskParam = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				taskLimit = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				taskState = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneMainTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_MainTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_MainTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_MainTask()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_MainTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_MainTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int mainTaskFlag = 0;
	public int taskIndex = 0;
	public OneMainTask task = new OneMainTask();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_MainTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		mainTaskFlag = 0;
		taskIndex = 0;
		task =  new OneMainTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mainTaskFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				taskIndex = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				task.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_MainTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mainTaskFlag"] = mainTaskFlag;
		json["taskIndex"] = taskIndex;
		json["task"] = task.GetJsonData();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_User_MainTaskChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_MainTaskChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int taskIndex = 0;
	public OneMainTask task = new OneMainTask();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_MainTaskChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		taskIndex = 0;
		task =  new OneMainTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				taskIndex = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				task.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(h_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_MainTaskChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskIndex"] = taskIndex;
		json["task"] = task.GetJsonData();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_MainTaskReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_MainTaskReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_MainTaskReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_MainTaskReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_MainTaskReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int mainTaskFlag = 0;
	public int taskIndex = 0;
	public OneMainTask task = new OneMainTask();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public OneMainTask nowTask = new OneMainTask();
	public List<OneRewardItem> nowRewardList = new List<OneRewardItem>();

	public Response_User_MainTaskReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		mainTaskFlag = 0;
		taskIndex = 0;
		task =  new OneMainTask();
		nowTask =  new OneMainTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mainTaskFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				taskIndex = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				task.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				nowTask.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(k_item);
					nowRewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_MainTaskReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mainTaskFlag"] = mainTaskFlag;
		json["taskIndex"] = taskIndex;
		json["task"] = task.GetJsonData();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["nowTask"] = nowTask.GetJsonData();
		json["nowRewardList"] = new JsonData();
		json["nowRewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in nowRewardList)
		{
			json["nowRewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class OneTriggerGuide
{
	public int groupId = 0;
	public int groupFlag = 0;
	public int groupParam = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["groupId"] = groupId;
		json["groupFlag"] = groupFlag;
		json["groupParam"] = groupParam;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != groupId)
		{
			json["b"] = groupId;
		}

		if (0 != groupFlag)
		{
			json["c"] = groupFlag;
		}

		if (0 != groupParam)
		{
			json["d"] = groupParam;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				groupId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				groupFlag = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				groupParam = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneTriggerGuide Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_TriggerGuide : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_TriggerGuide_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_TriggerGuide()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_TriggerGuide : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_TriggerGuide_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneTriggerGuide> triggerGuideList = new List<OneTriggerGuide>();

	public Response_User_TriggerGuide()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneTriggerGuide temp = new OneTriggerGuide();
					temp.Decode(f_item);
					triggerGuideList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_TriggerGuide Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["triggerGuideList"] = new JsonData();
		json["triggerGuideList"].SetJsonType(JsonType.Array);
		foreach(OneTriggerGuide temp in triggerGuideList)
		{
			json["triggerGuideList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_CheckTriggerGuide : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_CheckTriggerGuide_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;

	public Request_User_CheckTriggerGuide()
	{
		groupId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		return json.ToJson();
	}
}

public class Response_User_CheckTriggerGuide : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_CheckTriggerGuide_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneTriggerGuide triggerGuideData = new OneTriggerGuide();

	public Response_User_CheckTriggerGuide()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		triggerGuideData =  new OneTriggerGuide();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				triggerGuideData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_CheckTriggerGuide Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["triggerGuideData"] = triggerGuideData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_User_TriggerGuideFurnitureUpgrade : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_TriggerGuideFurnitureUpgrade_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;
	public int furnitureUid = 0;
	public int designType = 0;

	public Request_User_TriggerGuideFurnitureUpgrade()
	{
		groupId = 0;
		furnitureUid = 0;
		designType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		json["furnitureUid"] = furnitureUid;
		json["designType"] = designType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		if (0 != furnitureUid)
		{
			json["d"] = furnitureUid;
		}

		if (0 != designType)
		{
			json["e"] = designType;
		}

		return json.ToJson();
	}
}

public class Response_User_TriggerGuideFurnitureUpgrade : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_TriggerGuideFurnitureUpgrade_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneTriggerGuide triggerGuideData = new OneTriggerGuide();
	public OneFurniture furnitureInfo = new OneFurniture();

	public Response_User_TriggerGuideFurnitureUpgrade()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		triggerGuideData =  new OneTriggerGuide();
		furnitureInfo =  new OneFurniture();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				triggerGuideData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				furnitureInfo.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_TriggerGuideFurnitureUpgrade Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["triggerGuideData"] = triggerGuideData.GetJsonData();
		json["furnitureInfo"] = furnitureInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}




public class OneGuideTask
{
	public int taskId = 0;
	public int taskGroupId = 0;
	public int taskParam = 0;
	public int taskLimit = 0;
	public int taskState = 0; //enum EGuideTaskState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["taskId"] = taskId;
		json["taskGroupId"] = taskGroupId;
		json["taskParam"] = taskParam;
		json["taskLimit"] = taskLimit;
		json["taskState"] = taskState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != taskId)
		{
			json["b"] = taskId;
		}

		if (0 != taskGroupId)
		{
			json["c"] = taskGroupId;
		}

		if (0 != taskParam)
		{
			json["d"] = taskParam;
		}

		if (0 != taskLimit)
		{
			json["e"] = taskLimit;
		}

		if (0 != taskState)
		{
			json["f"] = taskState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				taskId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				taskGroupId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				taskParam = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				taskLimit = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				taskState = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneGuideTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_GuideTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_GuideTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_GuideTask()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_GuideTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_GuideTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int guideTaskFlag = 0;
	public int taskIndex = 0;
	public int guideTaskState = 0; //enum EGuideTaskGroupState
	public List<OneGuideTask> taskList = new List<OneGuideTask>();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_GuideTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		guideTaskFlag = 0;
		taskIndex = 0;
		guideTaskState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				guideTaskFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				taskIndex = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				guideTaskState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneGuideTask temp = new OneGuideTask();
					temp.Decode(i_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_GuideTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["guideTaskFlag"] = guideTaskFlag;
		json["taskIndex"] = taskIndex;
		json["guideTaskState"] = guideTaskState;
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneGuideTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_User_GuideTaskChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_GuideTaskChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int taskIndex = 0;
	public int guideTaskState = 0; //enum EGuideTaskGroupState
	public List<OneGuideTask> taskList = new List<OneGuideTask>();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_User_GuideTaskChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		taskIndex = 0;
		guideTaskState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				taskIndex = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				guideTaskState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneGuideTask temp = new OneGuideTask();
					temp.Decode(h_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_GuideTaskChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskIndex"] = taskIndex;
		json["guideTaskState"] = guideTaskState;
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneGuideTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_GuideTaskReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_GuideTaskReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_GuideTaskReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_GuideTaskReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_GuideTaskReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int guideTaskFlag = 0;
	public int taskIndex = 0;
	public int guideTaskState = 0; //enum EGuideTaskGroupState
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public List<OneGuideTask> nowTaskList = new List<OneGuideTask>();
	public List<OneRewardItem> nowRewardList = new List<OneRewardItem>();

	public Response_User_GuideTaskReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		guideTaskFlag = 0;
		taskIndex = 0;
		guideTaskState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				guideTaskFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				taskIndex = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				guideTaskState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneGuideTask temp = new OneGuideTask();
					temp.Decode(j_item);
					nowTaskList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(k_item);
					nowRewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_GuideTaskReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["guideTaskFlag"] = guideTaskFlag;
		json["taskIndex"] = taskIndex;
		json["guideTaskState"] = guideTaskState;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["nowTaskList"] = new JsonData();
		json["nowTaskList"].SetJsonType(JsonType.Array);
		foreach(OneGuideTask temp in nowTaskList)
		{
			json["nowTaskList"].Add(temp.GetJsonData());
		}
		json["nowRewardList"] = new JsonData();
		json["nowRewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in nowRewardList)
		{
			json["nowRewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}


public class OneUserPetInfo
{
	public int petId = 0;
	public int existTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["petId"] = petId;
		json["existTime"] = existTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != petId)
		{
			json["b"] = petId;
		}

		if (0 != existTime)
		{
			json["c"] = existTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				petId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				existTime = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUserPetInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_PetInfo : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_PetInfo_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_PetInfo()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_PetInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_PetInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OnePetInfo> petList = new List<OnePetInfo>();
	public int petCount = 0;
	public List<OneUserPetInfo> petInfoList = new List<OneUserPetInfo>();
	public int mainPetUid = 0;

	public Response_User_PetInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petCount = 0;
		mainPetUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OnePetInfo temp = new OnePetInfo();
					temp.Decode(f_item);
					petList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				petCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneUserPetInfo temp = new OneUserPetInfo();
					temp.Decode(h_item);
					petInfoList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				mainPetUid = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_PetInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petList"] = new JsonData();
		json["petList"].SetJsonType(JsonType.Array);
		foreach(OnePetInfo temp in petList)
		{
			json["petList"].Add(temp.GetJsonData());
		}
		json["petCount"] = petCount;
		json["petInfoList"] = new JsonData();
		json["petInfoList"].SetJsonType(JsonType.Array);
		foreach(OneUserPetInfo temp in petInfoList)
		{
			json["petInfoList"].Add(temp.GetJsonData());
		}
		json["mainPetUid"] = mainPetUid;
		return json.ToJson();
	}
#endif
}

public class Request_User_SetMainPet : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_SetMainPet_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petUid = 0;

	public Request_User_SetMainPet()
	{
		petUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petUid"] = petUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petUid)
		{
			json["c"] = petUid;
		}

		return json.ToJson();
	}
}

public class Response_User_SetMainPet : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_SetMainPet_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int mainPetUid = 0;

	public Response_User_SetMainPet()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		mainPetUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mainPetUid = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_SetMainPet Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mainPetUid"] = mainPetUid;
		return json.ToJson();
	}
#endif
}

public class Request_User_BuyPetSlot : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BuyPetSlot_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int costType = 0;

	public Request_User_BuyPetSlot()
	{
		costType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["costType"] = costType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != costType)
		{
			json["c"] = costType;
		}

		return json.ToJson();
	}
}

public class Response_User_BuyPetSlot : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BuyPetSlot_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePetInfo petInfo = new OnePetInfo();
	public int petCount = 0;

	public Response_User_BuyPetSlot()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petInfo =  new OnePetInfo();
		petCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petInfo.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				petCount = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BuyPetSlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfo"] = petInfo.GetJsonData();
		json["petCount"] = petCount;
		return json.ToJson();
	}
#endif
}

public class Request_User_BuyPet : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BuyPet_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petId = 0;
	public int costType = 0;

	public Request_User_BuyPet()
	{
		petId = 0;
		costType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petId"] = petId;
		json["costType"] = costType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petId)
		{
			json["c"] = petId;
		}

		if (0 != costType)
		{
			json["d"] = costType;
		}

		return json.ToJson();
	}
}

public class Response_User_BuyPet : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BuyPet_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUserPetInfo> petInfoList = new List<OneUserPetInfo>();

	public Response_User_BuyPet()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUserPetInfo temp = new OneUserPetInfo();
					temp.Decode(f_item);
					petInfoList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BuyPet Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfoList"] = new JsonData();
		json["petInfoList"].SetJsonType(JsonType.Array);
		foreach(OneUserPetInfo temp in petInfoList)
		{
			json["petInfoList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_SetPetSlot : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_SetPetSlot_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petUid = 0;
	public int petId = 0;
	public string petName = "";

	public Request_User_SetPetSlot()
	{
		petUid = 0;
		petId = 0;
		petName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petUid"] = petUid;
		json["petId"] = petId;
		json["petName"] = petName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petUid)
		{
			json["c"] = petUid;
		}

		if (0 != petId)
		{
			json["d"] = petId;
		}

		if (!String.IsNullOrEmpty(petName))
		{
			json["e"] = petName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_SetPetSlot : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_SetPetSlot_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePetInfo petInfo = new OnePetInfo();
	public OneFurniture furnitureInfo = new OneFurniture();
	public int createFlag = 0;

	public Response_User_SetPetSlot()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petInfo =  new OnePetInfo();
		furnitureInfo =  new OneFurniture();
		createFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petInfo.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				furnitureInfo.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				createFlag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_SetPetSlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfo"] = petInfo.GetJsonData();
		json["furnitureInfo"] = furnitureInfo.GetJsonData();
		json["createFlag"] = createFlag;
		return json.ToJson();
	}
#endif
}

public class Request_User_PetChangeName : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_PetChangeName_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petUid = 0;
	public string petName = "";

	public Request_User_PetChangeName()
	{
		petUid = 0;
		petName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petUid"] = petUid;
		json["petName"] = petName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petUid)
		{
			json["c"] = petUid;
		}

		if (!String.IsNullOrEmpty(petName))
		{
			json["d"] = petName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_PetChangeName : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_PetChangeName_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePetInfo petInfo = new OnePetInfo();

	public Response_User_PetChangeName()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petInfo =  new OnePetInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_PetChangeName Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfo"] = petInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_User_PetFeed : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_PetFeed_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petUid = 0;
	public int petFeedType = 0; //enum EPetFeedType

	public Request_User_PetFeed()
	{
		petUid = 0;
		petFeedType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petUid"] = petUid;
		json["petFeedType"] = petFeedType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petUid)
		{
			json["c"] = petUid;
		}

		if (0 != petFeedType)
		{
			json["d"] = petFeedType;
		}

		return json.ToJson();
	}
}

public class Response_User_PetFeed : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_PetFeed_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePetInfo petInfo = new OnePetInfo();

	public Response_User_PetFeed()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petInfo =  new OnePetInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_PetFeed Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfo"] = petInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_User_PetInfoUpdate : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_PetInfoUpdate_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int petUid = 0;

	public Request_User_PetInfoUpdate()
	{
		petUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["petUid"] = petUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != petUid)
		{
			json["c"] = petUid;
		}

		return json.ToJson();
	}
}

public class Response_User_PetInfoUpdate : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_PetInfoUpdate_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePetInfo petInfo = new OnePetInfo();

	public Response_User_PetInfoUpdate()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		petInfo =  new OnePetInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				petInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_PetInfoUpdate Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["petInfo"] = petInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_User_UserPetInfoUpdate : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_UserPetInfoUpdate_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneUserPetInfo userPetInfo = new OneUserPetInfo();

	public Response_User_UserPetInfoUpdate()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userPetInfo =  new OneUserPetInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userPetInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_UserPetInfoUpdate Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userPetInfo"] = userPetInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class CounterData
{
	public int counterUid = 0;
	public int furnitureId = 0;
	public int counterLevel = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;
	public int state = 0; //enum EDesignState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["counterUid"] = counterUid;
		json["furnitureId"] = furnitureId;
		json["counterLevel"] = counterLevel;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		json["state"] = state;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != counterUid)
		{
			json["b"] = counterUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != counterLevel)
		{
			json["d"] = counterLevel;
		}

		if (0 != x)
		{
			json["e"] = x;
		}

		if (0 != y)
		{
			json["f"] = y;
		}

		if (0 != rotate)
		{
			json["g"] = rotate;
		}

		if (0 != state)
		{
			json["h"] = state;
		}

		if (0 != stateStartTime)
		{
			json["i"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["j"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["k"] = stateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				counterUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				counterLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				x = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				y = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rotate = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				state = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				stateStartTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateEndTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				stateRemainTime = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("CounterData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ShopData
{
	public int shopLevel = 0;
	public int state = 0; //enum EDesignState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["shopLevel"] = shopLevel;
		json["state"] = state;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != shopLevel)
		{
			json["b"] = shopLevel;
		}

		if (0 != state)
		{
			json["c"] = state;
		}

		if (0 != stateStartTime)
		{
			json["d"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["e"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["f"] = stateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				shopLevel = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				state = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				stateStartTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				stateEndTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				stateRemainTime = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ShopData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneStoreBasket
{
	public int storeUid = 0;
	public int furnitureId = 0;
	public int storeLevel = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;
	public int state = 0; //enum EDesignState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["storeUid"] = storeUid;
		json["furnitureId"] = furnitureId;
		json["storeLevel"] = storeLevel;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		json["state"] = state;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != storeUid)
		{
			json["b"] = storeUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != storeLevel)
		{
			json["d"] = storeLevel;
		}

		if (0 != x)
		{
			json["e"] = x;
		}

		if (0 != y)
		{
			json["f"] = y;
		}

		if (0 != rotate)
		{
			json["g"] = rotate;
		}

		if (0 != state)
		{
			json["h"] = state;
		}

		if (0 != stateStartTime)
		{
			json["i"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["j"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["k"] = stateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				storeUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				storeLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				x = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				y = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rotate = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				state = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				stateStartTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateEndTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				stateRemainTime = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneStoreBasket Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneResBasket
{
	public int resUid = 0;
	public int furnitureId = 0;
	public int resType = 0;
	public int resLevel = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;
	public int state = 0; //enum EDesignState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["resUid"] = resUid;
		json["furnitureId"] = furnitureId;
		json["resType"] = resType;
		json["resLevel"] = resLevel;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		json["state"] = state;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != resUid)
		{
			json["b"] = resUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != resType)
		{
			json["d"] = resType;
		}

		if (0 != resLevel)
		{
			json["e"] = resLevel;
		}

		if (0 != x)
		{
			json["f"] = x;
		}

		if (0 != y)
		{
			json["g"] = y;
		}

		if (0 != rotate)
		{
			json["h"] = rotate;
		}

		if (0 != state)
		{
			json["i"] = state;
		}

		if (0 != stateStartTime)
		{
			json["j"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["k"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["l"] = stateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				resUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				resType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				resLevel = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				x = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				y = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				rotate = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				state = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateStartTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				stateEndTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				stateRemainTime = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneResBasket Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ShelfEquip
{
	public int fieldId = 0;
	public string equipUid = "";
	public int equipId = 0;
	public int equipQuality = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["fieldId"] = fieldId;
		json["equipUid"] = equipUid.ToString();
		json["equipId"] = equipId;
		json["equipQuality"] = equipQuality;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != fieldId)
		{
			json["b"] = fieldId;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["c"] = equipUid.ToString();
		}
		if (0 != equipId)
		{
			json["d"] = equipId;
		}

		if (0 != equipQuality)
		{
			json["e"] = equipQuality;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				fieldId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipUid = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				equipId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				equipQuality = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ShelfEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneShelf
{
	public int shelfUid = 0;
	public int furnitureId = 0;
	public int shelfType = 0;
	public int shelfLevel = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;
	public int state = 0; //enum EDesignState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;
	public List<ShelfEquip> equipList = new List<ShelfEquip>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["shelfUid"] = shelfUid;
		json["furnitureId"] = furnitureId;
		json["shelfType"] = shelfType;
		json["shelfLevel"] = shelfLevel;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		json["state"] = state;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		json["equipList"] = new JsonData();
		json["equipList"].SetJsonType(JsonType.Array);
		foreach(ShelfEquip temp in equipList)
		{
			json["equipList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != shelfUid)
		{
			json["b"] = shelfUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != shelfType)
		{
			json["d"] = shelfType;
		}

		if (0 != shelfLevel)
		{
			json["e"] = shelfLevel;
		}

		if (0 != x)
		{
			json["f"] = x;
		}

		if (0 != y)
		{
			json["g"] = y;
		}

		if (0 != rotate)
		{
			json["h"] = rotate;
		}

		if (0 != state)
		{
			json["i"] = state;
		}

		if (0 != stateStartTime)
		{
			json["j"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["k"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["l"] = stateRemainTime;
		}

		json["m"] = new JsonData();
		json["m"].SetJsonType(JsonType.Array);
		foreach(ShelfEquip temp in equipList)
		{
			json["m"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				shelfUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				shelfType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				shelfLevel = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				x = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				y = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				rotate = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				state = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateStartTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				stateEndTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				stateRemainTime = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				foreach(JsonData m_item in json["m"])
				{
					ShelfEquip temp = new ShelfEquip();
					temp.Decode(m_item);
					equipList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneShelf Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneFurniture
{
	public int furnitureUid = 0;
	public int furnitureId = 0;
	public int level = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;
	public int state = 0; //enum EDesignState
	public List<ShelfEquip> equipList = new List<ShelfEquip>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["furnitureUid"] = furnitureUid;
		json["furnitureId"] = furnitureId;
		json["level"] = level;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		json["state"] = state;
		json["equipList"] = new JsonData();
		json["equipList"].SetJsonType(JsonType.Array);
		foreach(ShelfEquip temp in equipList)
		{
			json["equipList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != furnitureUid)
		{
			json["b"] = furnitureUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != level)
		{
			json["d"] = level;
		}

		if (0 != x)
		{
			json["e"] = x;
		}

		if (0 != y)
		{
			json["f"] = y;
		}

		if (0 != rotate)
		{
			json["g"] = rotate;
		}

		if (0 != stateStartTime)
		{
			json["h"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["i"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["j"] = stateRemainTime;
		}

		if (0 != state)
		{
			json["k"] = state;
		}

		json["l"] = new JsonData();
		json["l"].SetJsonType(JsonType.Array);
		foreach(ShelfEquip temp in equipList)
		{
			json["l"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				furnitureUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				level = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				x = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				y = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rotate = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				stateStartTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				stateEndTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateRemainTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				state = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				foreach(JsonData l_item in json["l"])
				{
					ShelfEquip temp = new ShelfEquip();
					temp.Decode(l_item);
					equipList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneFurniture Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneFloor
{
	public int x = 0;
	public int y = 0;
	public int furnitureId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["x"] = x;
		json["y"] = y;
		json["furnitureId"] = furnitureId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != x)
		{
			json["b"] = x;
		}

		if (0 != y)
		{
			json["c"] = y;
		}

		if (0 != furnitureId)
		{
			json["d"] = furnitureId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				x = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				y = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				furnitureId = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneFloor Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class FloorData
{
	public List<int> ownedFloorList = new List<int>();
	public List<OneFloor> floorList = new List<OneFloor>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["ownedFloorList"] = new JsonData();
		json["ownedFloorList"].SetJsonType(JsonType.Array);
		foreach(int temp in ownedFloorList)
		{
			json["ownedFloorList"].Add(temp);
		}
		json["floorList"] = new JsonData();
		json["floorList"].SetJsonType(JsonType.Array);
		foreach(OneFloor temp in floorList)
		{
			json["floorList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(int temp in ownedFloorList)
		{
			json["b"].Add(temp);
		}
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneFloor temp in floorList)
		{
			json["c"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					int temp = Int32.Parse(b_item.ToString());
					ownedFloorList.Add(temp);
				}
			}
			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					OneFloor temp = new OneFloor();
					temp.Decode(c_item);
					floorList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("FloorData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneWall
{
	public int x = 0;
	public int y = 0;
	public int furnitureId = 0;
	public int index = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["x"] = x;
		json["y"] = y;
		json["furnitureId"] = furnitureId;
		json["index"] = index;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != x)
		{
			json["b"] = x;
		}

		if (0 != y)
		{
			json["c"] = y;
		}

		if (0 != furnitureId)
		{
			json["d"] = furnitureId;
		}

		if (0 != index)
		{
			json["e"] = index;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				x = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				y = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				furnitureId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				index = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneWall Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class WallData
{
	public List<int> ownedWallList = new List<int>();
	public List<OneWall> wallList = new List<OneWall>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["ownedWallList"] = new JsonData();
		json["ownedWallList"].SetJsonType(JsonType.Array);
		foreach(int temp in ownedWallList)
		{
			json["ownedWallList"].Add(temp);
		}
		json["wallList"] = new JsonData();
		json["wallList"].SetJsonType(JsonType.Array);
		foreach(OneWall temp in wallList)
		{
			json["wallList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(int temp in ownedWallList)
		{
			json["b"].Add(temp);
		}
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneWall temp in wallList)
		{
			json["c"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					int temp = Int32.Parse(b_item.ToString());
					ownedWallList.Add(temp);
				}
			}
			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					OneWall temp = new OneWall();
					temp.Decode(c_item);
					wallList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("WallData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OwnedFurniture
{
	public int uid = 0;
	public int designType = 0; //enum EDesignType
	public int furnitureId = 0;
	public int level = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["uid"] = uid;
		json["designType"] = designType;
		json["furnitureId"] = furnitureId;
		json["level"] = level;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != uid)
		{
			json["b"] = uid;
		}

		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != furnitureId)
		{
			json["d"] = furnitureId;
		}

		if (0 != level)
		{
			json["e"] = level;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				uid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				designType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				furnitureId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				level = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OwnedFurniture Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Design_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Design_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Design_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ShopData shopData = new ShopData();
	public FloorData floorData = new FloorData();
	public WallData wallData = new WallData();
	public List<OneFurniture> furnitureList = new List<OneFurniture>();

	public Response_Design_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopData =  new ShopData();
		floorData =  new FloorData();
		wallData =  new WallData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				floorData.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				wallData.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneFurniture temp = new OneFurniture();
					temp.Decode(i_item);
					furnitureList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopData"] = shopData.GetJsonData();
		json["floorData"] = floorData.GetJsonData();
		json["wallData"] = wallData.GetJsonData();
		json["furnitureList"] = new JsonData();
		json["furnitureList"].SetJsonType(JsonType.Array);
		foreach(OneFurniture temp in furnitureList)
		{
			json["furnitureList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Design_ShopUpgrade : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_ShopUpgrade_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int useGem = 0;

	public Request_Design_ShopUpgrade()
	{
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != useGem)
		{
			json["c"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Design_ShopUpgrade : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShopUpgrade_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ShopData shopData = new ShopData();

	public Response_Design_ShopUpgrade()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopData =  new ShopData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShopUpgrade Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopData"] = shopData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_ShopRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_ShopRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Design_ShopRefresh()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Design_ShopRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShopRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ShopData shopData = new ShopData();

	public Response_Design_ShopRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopData =  new ShopData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShopRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopData"] = shopData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_ShopFinish : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_ShopFinish_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Design_ShopFinish()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Design_ShopFinish : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShopFinish_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ShopData shopData = new ShopData();

	public Response_Design_ShopFinish()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopData =  new ShopData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShopFinish Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopData"] = shopData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_ShopImmediately : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_ShopImmediately_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Design_ShopImmediately()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Design_ShopImmediately : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShopImmediately_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ShopData shopData = new ShopData();

	public Response_Design_ShopImmediately()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopData =  new ShopData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShopImmediately Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopData"] = shopData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_Buy : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Buy_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int furnitureId = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;

	public Request_Design_Buy()
	{
		designType = 0;
		furnitureId = 0;
		x = 0;
		y = 0;
		rotate = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["furnitureId"] = furnitureId;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != furnitureId)
		{
			json["d"] = furnitureId;
		}

		if (0 != x)
		{
			json["e"] = x;
		}

		if (0 != y)
		{
			json["f"] = y;
		}

		if (0 != rotate)
		{
			json["g"] = rotate;
		}

		return json.ToJson();
	}
}

public class Response_Design_Buy : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Buy_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int furnitureId = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;

	public Response_Design_Buy()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		furnitureId = 0;
		x = 0;
		y = 0;
		rotate = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				furnitureId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				x = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				y = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				rotate = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Buy Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["furnitureId"] = furnitureId;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		return json.ToJson();
	}
#endif
}

public class Request_Design_Move : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Move_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;
	public int x = 0;
	public int y = 0;
	public int rotate = 0;

	public Request_Design_Move()
	{
		designType = 0;
		uid = 0;
		x = 0;
		y = 0;
		rotate = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		json["x"] = x;
		json["y"] = y;
		json["rotate"] = rotate;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		if (0 != x)
		{
			json["e"] = x;
		}

		if (0 != y)
		{
			json["f"] = y;
		}

		if (0 != rotate)
		{
			json["g"] = rotate;
		}

		return json.ToJson();
	}
}

public class Response_Design_Move : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Move_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Design_Move()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Move Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Design_Upgrade : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Upgrade_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;
	public int useGem = 0;

	public Request_Design_Upgrade()
	{
		designType = 0;
		uid = 0;
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		if (0 != useGem)
		{
			json["e"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Design_Upgrade : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Upgrade_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Design_Upgrade()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Upgrade Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Design_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Request_Design_Refresh()
	{
		designType = 0;
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Design_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Design_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Design_Finish : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Finish_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Request_Design_Finish()
	{
		designType = 0;
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Design_Finish : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Finish_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Response_Design_Finish()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		designType = 0;
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				designType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Finish Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Design_Immediately : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_Immediately_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Request_Design_Immediately()
	{
		designType = 0;
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Design_Immediately : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_Immediately_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Response_Design_Immediately()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		designType = 0;
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				designType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_Immediately Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Design_InStore : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_InStore_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Request_Design_InStore()
	{
		designType = 0;
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != uid)
		{
			json["d"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Design_InStore : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_InStore_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int designType = 0; //enum EDesignType
	public int uid = 0;

	public Response_Design_InStore()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		designType = 0;
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				designType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_InStore Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["designType"] = designType;
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Design_SetFloor : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_SetFloor_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buyFloorId = 0;
	public List<OneFloor> floorList = new List<OneFloor>();

	public Request_Design_SetFloor()
	{
		buyFloorId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buyFloorId"] = buyFloorId;
		json["floorList"] = new JsonData();
		json["floorList"].SetJsonType(JsonType.Array);
		foreach(OneFloor temp in floorList)
		{
			json["floorList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buyFloorId)
		{
			json["c"] = buyFloorId;
		}

		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(OneFloor temp in floorList)
		{
			json["d"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_Design_SetFloor : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_SetFloor_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public FloorData floorData = new FloorData();

	public Response_Design_SetFloor()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		floorData =  new FloorData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				floorData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_SetFloor Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["floorData"] = floorData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_SetWall : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_SetWall_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buyWallId = 0;
	public List<OneWall> wallList = new List<OneWall>();

	public Request_Design_SetWall()
	{
		buyWallId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buyWallId"] = buyWallId;
		json["wallList"] = new JsonData();
		json["wallList"].SetJsonType(JsonType.Array);
		foreach(OneWall temp in wallList)
		{
			json["wallList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buyWallId)
		{
			json["c"] = buyWallId;
		}

		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(OneWall temp in wallList)
		{
			json["d"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_Design_SetWall : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_SetWall_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public WallData wallData = new WallData();

	public Response_Design_SetWall()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		wallData =  new WallData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				wallData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_SetWall Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["wallData"] = wallData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_CounterChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_CounterChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public CounterData counterData = new CounterData();

	public Response_Design_CounterChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		counterData =  new CounterData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				counterData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_CounterChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["counterData"] = counterData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_FloorChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_FloorChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public FloorData floorData = new FloorData();

	public Response_Design_FloorChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		floorData =  new FloorData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				floorData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_FloorChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["floorData"] = floorData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_StoreBasketChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_StoreBasketChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneStoreBasket storeBasket = new OneStoreBasket();

	public Response_Design_StoreBasketChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		storeBasket =  new OneStoreBasket();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				storeBasket.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_StoreBasketChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["storeBasket"] = storeBasket.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_ResBasketChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ResBasketChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneResBasket resBasket = new OneResBasket();

	public Response_Design_ResBasketChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		resBasket =  new OneResBasket();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				resBasket.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ResBasketChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["resBasket"] = resBasket.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_ShelfChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShelfChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneShelf shelf = new OneShelf();

	public Response_Design_ShelfChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shelf =  new OneShelf();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shelf.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShelfChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shelf"] = shelf.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Design_FurnitureChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_FurnitureChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneFurniture furniture = new OneFurniture();

	public Response_Design_FurnitureChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		furniture =  new OneFurniture();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				furniture.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_FurnitureChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["furniture"] = furniture.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Design_OnShelf : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_OnShelf_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int shelfUid = 0;
	public int fieldId = 0;
	public string equipUid = "";

	public Request_Design_OnShelf()
	{
		designType = 0;
		shelfUid = 0;
		fieldId = 0;
		equipUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["shelfUid"] = shelfUid;
		json["fieldId"] = fieldId;
		json["equipUid"] = equipUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != shelfUid)
		{
			json["d"] = shelfUid;
		}

		if (0 != fieldId)
		{
			json["e"] = fieldId;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["f"] = equipUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Design_OnShelf : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_OnShelf_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Design_OnShelf()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_OnShelf Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Design_OffShelf : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Design_OffShelf_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int designType = 0; //enum EDesignType
	public int shelfUid = 0;
	public int fieldId = 0;
	public string equipUid = "";

	public Request_Design_OffShelf()
	{
		designType = 0;
		shelfUid = 0;
		fieldId = 0;
		equipUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["designType"] = designType;
		json["shelfUid"] = shelfUid;
		json["fieldId"] = fieldId;
		json["equipUid"] = equipUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != designType)
		{
			json["c"] = designType;
		}

		if (0 != shelfUid)
		{
			json["d"] = shelfUid;
		}

		if (0 != fieldId)
		{
			json["e"] = fieldId;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["f"] = equipUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Design_OffShelf : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_OffShelf_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Design_OffShelf()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_OffShelf Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}



public class Response_Design_ShelfEquipChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Design_ShelfEquipChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int isAuto = 0;
	public int shelfUid = 0;
	public int furnitureId = 0;
	public int onOrOff = 0;
	public ShelfEquip shelfEquip = new ShelfEquip();
	public int isFromSlotOrBox = 0;

	public Response_Design_ShelfEquipChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		isAuto = 0;
		shelfUid = 0;
		furnitureId = 0;
		onOrOff = 0;
		shelfEquip =  new ShelfEquip();
		isFromSlotOrBox = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				isAuto = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				shelfUid = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				furnitureId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				onOrOff = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				shelfEquip.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				isFromSlotOrBox = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Design_ShelfEquipChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["isAuto"] = isAuto;
		json["shelfUid"] = shelfUid;
		json["furnitureId"] = furnitureId;
		json["onOrOff"] = onOrOff;
		json["shelfEquip"] = shelfEquip.GetJsonData();
		json["isFromSlotOrBox"] = isFromSlotOrBox;
		return json.ToJson();
	}
#endif
}

public class BagResource
{
	public int itemId = 0;
	public int count = 0;
	public int rarity = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemId"] = itemId;
		json["count"] = count;
		json["rarity"] = rarity;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemId)
		{
			json["b"] = itemId;
		}

		if (0 != count)
		{
			json["c"] = count;
		}

		if (0 != rarity)
		{
			json["d"] = rarity;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				count = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				rarity = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("BagResource Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class BagEquip
{
	public string equipUid = "";
	public int equipId = 0;
	public int count = 0;
	public int getTime = 0;
	public int isLock = 0;
	public int onShelfCount = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["equipUid"] = equipUid.ToString();
		json["equipId"] = equipId;
		json["count"] = count;
		json["getTime"] = getTime;
		json["isLock"] = isLock;
		json["onShelfCount"] = onShelfCount;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(equipUid))
		{
			json["b"] = equipUid.ToString();
		}
		if (0 != equipId)
		{
			json["c"] = equipId;
		}

		if (0 != count)
		{
			json["d"] = count;
		}

		if (0 != getTime)
		{
			json["e"] = getTime;
		}

		if (0 != isLock)
		{
			json["f"] = isLock;
		}

		if (0 != onShelfCount)
		{
			json["g"] = onShelfCount;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				equipUid = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				equipId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				count = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				getTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				isLock = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				onShelfCount = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("BagEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ResourceLimit
{
	public int itemId = 0;
	public int limitCount = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemId"] = itemId;
		json["limitCount"] = limitCount;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemId)
		{
			json["b"] = itemId;
		}

		if (0 != limitCount)
		{
			json["c"] = limitCount;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				limitCount = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ResourceLimit Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Bag_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Bag_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Bag_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Bag_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Bag_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int bagLimit = 0;
	public List<ResourceLimit> resourceLimitList = new List<ResourceLimit>();
	public List<BagResource> bagResourceList = new List<BagResource>();
	public List<BagEquip> bagEquipList = new List<BagEquip>();

	public Response_Bag_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		bagLimit = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				bagLimit = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					ResourceLimit temp = new ResourceLimit();
					temp.Decode(g_item);
					resourceLimitList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					BagResource temp = new BagResource();
					temp.Decode(h_item);
					bagResourceList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					BagEquip temp = new BagEquip();
					temp.Decode(i_item);
					bagEquipList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Bag_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["bagLimit"] = bagLimit;
		json["resourceLimitList"] = new JsonData();
		json["resourceLimitList"].SetJsonType(JsonType.Array);
		foreach(ResourceLimit temp in resourceLimitList)
		{
			json["resourceLimitList"].Add(temp.GetJsonData());
		}
		json["bagResourceList"] = new JsonData();
		json["bagResourceList"].SetJsonType(JsonType.Array);
		foreach(BagResource temp in bagResourceList)
		{
			json["bagResourceList"].Add(temp.GetJsonData());
		}
		json["bagEquipList"] = new JsonData();
		json["bagEquipList"].SetJsonType(JsonType.Array);
		foreach(BagEquip temp in bagEquipList)
		{
			json["bagEquipList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_Bag_ResourceChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Bag_ResourceChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagResource resource = new BagResource();

	public Response_Bag_ResourceChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		resource =  new BagResource();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				resource.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Bag_ResourceChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["resource"] = resource.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Bag_Del : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Bag_Del_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int delType = 0;
	public int itemId = 0;
	public string equipUid = "";
	public int delCount = 0;

	public Request_Bag_Del()
	{
		delType = 0;
		itemId = 0;
		equipUid = String.Empty;
		delCount = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["delType"] = delType;
		json["itemId"] = itemId;
		json["equipUid"] = equipUid.ToString();
		json["delCount"] = delCount;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != delType)
		{
			json["c"] = delType;
		}

		if (0 != itemId)
		{
			json["d"] = itemId;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["e"] = equipUid.ToString();
		}
		if (0 != delCount)
		{
			json["f"] = delCount;
		}

		return json.ToJson();
	}
}

public class Response_Bag_Del : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Bag_Del_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Bag_Del()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Bag_Del Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Bag_LockEquip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Bag_LockEquip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string equipUid = "";
	public int lockOrUnlock = 0;

	public Request_Bag_LockEquip()
	{
		equipUid = String.Empty;
		lockOrUnlock = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipUid"] = equipUid.ToString();
		json["lockOrUnlock"] = lockOrUnlock;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(equipUid))
		{
			json["c"] = equipUid.ToString();
		}
		if (0 != lockOrUnlock)
		{
			json["d"] = lockOrUnlock;
		}

		return json.ToJson();
	}
}

public class Response_Bag_LockEquip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Bag_LockEquip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Bag_LockEquip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Bag_LockEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class OneProduction
{
	public int itemId = 0;
	public int count = 0;
	public int lastCollectTime = 0;
	public int nextCollectTime = 0;
	public int collectSpeedTime = 0;
	public int countLimit = 0;
	public int lastBuyTime = 0;
	public int dailyBuyLimit = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemId"] = itemId;
		json["count"] = count;
		json["lastCollectTime"] = lastCollectTime;
		json["nextCollectTime"] = nextCollectTime;
		json["collectSpeedTime"] = collectSpeedTime;
		json["countLimit"] = countLimit;
		json["lastBuyTime"] = lastBuyTime;
		json["dailyBuyLimit"] = dailyBuyLimit;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemId)
		{
			json["b"] = itemId;
		}

		if (0 != count)
		{
			json["c"] = count;
		}

		if (0 != lastCollectTime)
		{
			json["d"] = lastCollectTime;
		}

		if (0 != nextCollectTime)
		{
			json["e"] = nextCollectTime;
		}

		if (0 != collectSpeedTime)
		{
			json["f"] = collectSpeedTime;
		}

		if (0 != countLimit)
		{
			json["g"] = countLimit;
		}

		if (0 != lastBuyTime)
		{
			json["h"] = lastBuyTime;
		}

		if (0 != dailyBuyLimit)
		{
			json["i"] = dailyBuyLimit;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				count = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				lastCollectTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				nextCollectTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				collectSpeedTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				countLimit = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				lastBuyTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				dailyBuyLimit = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneProduction Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Resource_ProductionList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Resource_ProductionList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Resource_ProductionList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Resource_ProductionList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Resource_ProductionList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneProduction> productionList = new List<OneProduction>();

	public Response_Resource_ProductionList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneProduction temp = new OneProduction();
					temp.Decode(f_item);
					productionList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Resource_ProductionList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["productionList"] = new JsonData();
		json["productionList"].SetJsonType(JsonType.Array);
		foreach(OneProduction temp in productionList)
		{
			json["productionList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Resource_ProductionRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Resource_ProductionRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;

	public Request_Resource_ProductionRefresh()
	{
		itemId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		return json.ToJson();
	}
}

public class Response_Resource_ProductionRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Resource_ProductionRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagResource resource = new BagResource();
	public OneProduction production = new OneProduction();

	public Response_Resource_ProductionRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		resource =  new BagResource();
		production =  new OneProduction();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				resource.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				production.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Resource_ProductionRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["resource"] = resource.GetJsonData();
		json["production"] = production.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Resource_BuyProduction : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Resource_BuyProduction_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;

	public Request_Resource_BuyProduction()
	{
		itemId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		return json.ToJson();
	}
}

public class Response_Resource_BuyProduction : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Resource_BuyProduction_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagResource resource = new BagResource();

	public Response_Resource_BuyProduction()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		resource =  new BagResource();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				resource.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Resource_BuyProduction Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["resource"] = resource.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Resource_BuyProductionDaily : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Resource_BuyProductionDaily_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;

	public Request_Resource_BuyProductionDaily()
	{
		itemId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		return json.ToJson();
	}
}

public class Response_Resource_BuyProductionDaily : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Resource_BuyProductionDaily_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagResource resource = new BagResource();

	public Response_Resource_BuyProductionDaily()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		resource =  new BagResource();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				resource.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Resource_BuyProductionDaily Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["resource"] = resource.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Resource_ProductionChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Resource_ProductionChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneProduction production = new OneProduction();

	public Response_Resource_ProductionChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		production =  new OneProduction();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				production.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Resource_ProductionChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["production"] = production.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class EquipInfo
{
	public int equipDrawingId = 0;
	public int equipState = 0; //enum EEquipInfoState
	public int beenMake = 0;
	public int progressLevel = 0;
	public int lastMakeTime = 0;
	public int activateTime = 0;
	public int unlockTime = 0;
	public int isFavorite = 0;
	public int makeNeedTime = 0;
	public int starLevel = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["equipDrawingId"] = equipDrawingId;
		json["equipState"] = equipState;
		json["beenMake"] = beenMake;
		json["progressLevel"] = progressLevel;
		json["lastMakeTime"] = lastMakeTime;
		json["activateTime"] = activateTime;
		json["unlockTime"] = unlockTime;
		json["isFavorite"] = isFavorite;
		json["makeNeedTime"] = makeNeedTime;
		json["starLevel"] = starLevel;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != equipDrawingId)
		{
			json["b"] = equipDrawingId;
		}

		if (0 != equipState)
		{
			json["c"] = equipState;
		}

		if (0 != beenMake)
		{
			json["d"] = beenMake;
		}

		if (0 != progressLevel)
		{
			json["e"] = progressLevel;
		}

		if (0 != lastMakeTime)
		{
			json["f"] = lastMakeTime;
		}

		if (0 != activateTime)
		{
			json["g"] = activateTime;
		}

		if (0 != unlockTime)
		{
			json["h"] = unlockTime;
		}

		if (0 != isFavorite)
		{
			json["i"] = isFavorite;
		}

		if (0 != makeNeedTime)
		{
			json["j"] = makeNeedTime;
		}

		if (0 != starLevel)
		{
			json["k"] = starLevel;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				equipDrawingId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipState = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				beenMake = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				progressLevel = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				lastMakeTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				activateTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unlockTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				isFavorite = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				makeNeedTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				starLevel = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("EquipInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}


public class MakingSlot
{
	public int slotId = 0;
	public int equipDrawingId = 0;
	public int startTime = 0;
	public int endTime = 0;
	public int remainTime = 0;
	public int makingState = 0; //enum EMakingState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["slotId"] = slotId;
		json["equipDrawingId"] = equipDrawingId;
		json["startTime"] = startTime;
		json["endTime"] = endTime;
		json["remainTime"] = remainTime;
		json["makingState"] = makingState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != slotId)
		{
			json["b"] = slotId;
		}

		if (0 != equipDrawingId)
		{
			json["c"] = equipDrawingId;
		}

		if (0 != startTime)
		{
			json["d"] = startTime;
		}

		if (0 != endTime)
		{
			json["e"] = endTime;
		}

		if (0 != remainTime)
		{
			json["f"] = remainTime;
		}

		if (0 != makingState)
		{
			json["g"] = makingState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				slotId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipDrawingId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				startTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				endTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				remainTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				makingState = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("MakingSlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Equip_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Equip_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Equip_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<EquipInfo> equipList = new List<EquipInfo>();
	public List<MakingSlot> makingList = new List<MakingSlot>();

	public Response_Equip_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					EquipInfo temp = new EquipInfo();
					temp.Decode(f_item);
					equipList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					MakingSlot temp = new MakingSlot();
					temp.Decode(g_item);
					makingList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["equipList"] = new JsonData();
		json["equipList"].SetJsonType(JsonType.Array);
		foreach(EquipInfo temp in equipList)
		{
			json["equipList"].Add(temp.GetJsonData());
		}
		json["makingList"] = new JsonData();
		json["makingList"].SetJsonType(JsonType.Array);
		foreach(MakingSlot temp in makingList)
		{
			json["makingList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_Equip_BagEquipChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_BagEquipChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagEquip bagEquip = new BagEquip();

	public Response_Equip_BagEquipChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		bagEquip =  new BagEquip();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				bagEquip.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_BagEquipChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["bagEquip"] = bagEquip.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Equip_EquipInfoChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_EquipInfoChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public EquipInfo equipInfo = new EquipInfo();
	public int quiet = 0;

	public Response_Equip_EquipInfoChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		equipInfo =  new EquipInfo();
		quiet = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				equipInfo.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				quiet = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_EquipInfoChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["equipInfo"] = equipInfo.GetJsonData();
		json["quiet"] = quiet;
		return json.ToJson();
	}
#endif
}

public class MakeStartSlot
{
	public int slotId = 0;
	public int equipDrawingId = 0;
	public int startTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["slotId"] = slotId;
		json["equipDrawingId"] = equipDrawingId;
		json["startTime"] = startTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != slotId)
		{
			json["b"] = slotId;
		}

		if (0 != equipDrawingId)
		{
			json["c"] = equipDrawingId;
		}

		if (0 != startTime)
		{
			json["d"] = startTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				slotId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipDrawingId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				startTime = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("MakeStartSlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Equip_MakeStart : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_MakeStart_Cmd;
	public MsgHead msgHead = new MsgHead();
	public List<MakeStartSlot> makeStartList = new List<MakeStartSlot>();

	public Request_Equip_MakeStart()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["makeStartList"] = new JsonData();
		json["makeStartList"].SetJsonType(JsonType.Array);
		foreach(MakeStartSlot temp in makeStartList)
		{
			json["makeStartList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(MakeStartSlot temp in makeStartList)
		{
			json["c"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_Equip_MakeStart : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakeStart_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<MakingSlot> makingList = new List<MakingSlot>();

	public Response_Equip_MakeStart()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					MakingSlot temp = new MakingSlot();
					temp.Decode(f_item);
					makingList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakeStart Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingList"] = new JsonData();
		json["makingList"].SetJsonType(JsonType.Array);
		foreach(MakingSlot temp in makingList)
		{
			json["makingList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Equip_MakeRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_MakeRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_Equip_MakeRefresh()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_Equip_MakeRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakeRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public MakingSlot makingSlot = new MakingSlot();

	public Response_Equip_MakeRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		makingSlot =  new MakingSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				makingSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakeRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingSlot"] = makingSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class Request_Equip_MakeEnd : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_MakeEnd_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_Equip_MakeEnd()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_Equip_MakeEnd : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakeEnd_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public MakingSlot makingSlot = new MakingSlot();
	public BagEquip bagEquip = new BagEquip();
	public int rewardPiece = 0;
	public EquipInfo equipInfo = new EquipInfo();
	public int makeExp = 0;
	public int toStoreBasket = 0;
	public int starEffectType = 0; //enum EMakingStarEffectType

	public Response_Equip_MakeEnd()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		makingSlot =  new MakingSlot();
		bagEquip =  new BagEquip();
		rewardPiece = 0;
		equipInfo =  new EquipInfo();
		makeExp = 0;
		toStoreBasket = 0;
		starEffectType = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				makingSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				bagEquip.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				rewardPiece = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				equipInfo.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				makeExp = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				toStoreBasket = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				starEffectType = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakeEnd Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingSlot"] = makingSlot.GetJsonData();
		json["bagEquip"] = bagEquip.GetJsonData();
		json["rewardPiece"] = rewardPiece;
		json["equipInfo"] = equipInfo.GetJsonData();
		json["makeExp"] = makeExp;
		json["toStoreBasket"] = toStoreBasket;
		json["starEffectType"] = starEffectType;
		return json.ToJson();
	}
#endif
}

public class Request_Equip_MakeFaster : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_MakeFaster_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;
	public int useGem = 0;

	public Request_Equip_MakeFaster()
	{
		slotId = 0;
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		if (0 != useGem)
		{
			json["d"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Equip_MakeFaster : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakeFaster_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public MakingSlot makingSlot = new MakingSlot();

	public Response_Equip_MakeFaster()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		makingSlot =  new MakingSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				makingSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakeFaster Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingSlot"] = makingSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Equip_MakeImprove : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_MakeImprove_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string equipUid = "";

	public Request_Equip_MakeImprove()
	{
		equipUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipUid"] = equipUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(equipUid))
		{
			json["c"] = equipUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Equip_MakeImprove : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakeImprove_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BagEquip bagEquip = new BagEquip();

	public Response_Equip_MakeImprove()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		bagEquip =  new BagEquip();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				bagEquip.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakeImprove Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["bagEquip"] = bagEquip.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Equip_BuySlot : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_BuySlot_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int useGem = 0;

	public Request_Equip_BuySlot()
	{
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != useGem)
		{
			json["c"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Equip_BuySlot : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_BuySlot_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public MakingSlot makingSlot = new MakingSlot();

	public Response_Equip_BuySlot()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		makingSlot =  new MakingSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				makingSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_BuySlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingSlot"] = makingSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Equip_Activate : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_Activate_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int equipDrawingId = 0;

	public Request_Equip_Activate()
	{
		equipDrawingId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipDrawingId"] = equipDrawingId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != equipDrawingId)
		{
			json["c"] = equipDrawingId;
		}

		return json.ToJson();
	}
}

public class Response_Equip_Activate : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_Activate_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public EquipInfo equipInfo = new EquipInfo();

	public Response_Equip_Activate()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		equipInfo =  new EquipInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				equipInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_Activate Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["equipInfo"] = equipInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Equip_FavoriteEquip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Equip_FavoriteEquip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int equipDrawingId = 0;
	public int favorite = 0;

	public Request_Equip_FavoriteEquip()
	{
		equipDrawingId = 0;
		favorite = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipDrawingId"] = equipDrawingId;
		json["favorite"] = favorite;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != equipDrawingId)
		{
			json["c"] = equipDrawingId;
		}

		if (0 != favorite)
		{
			json["d"] = favorite;
		}

		return json.ToJson();
	}
}

public class Response_Equip_FavoriteEquip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_FavoriteEquip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Equip_FavoriteEquip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_FavoriteEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Response_Equip_MakingList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Equip_MakingList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<MakingSlot> makingList = new List<MakingSlot>();

	public Response_Equip_MakingList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					MakingSlot temp = new MakingSlot();
					temp.Decode(f_item);
					makingList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Equip_MakingList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["makingList"] = new JsonData();
		json["makingList"].SetJsonType(JsonType.Array);
		foreach(MakingSlot temp in makingList)
		{
			json["makingList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}



public class OneDailyTask
{
	public int taskId = 0;
	public int taskType = 0; //enum EDailyTaskType
	public int taskState = 0; //enum EDailyTaskState
	public int taskTarget = 0;
	public int taskCondition = 0;
	public int taskProgress = 0;
	public int rewardId = 0;
	public int rewardNumber = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["taskId"] = taskId;
		json["taskType"] = taskType;
		json["taskState"] = taskState;
		json["taskTarget"] = taskTarget;
		json["taskCondition"] = taskCondition;
		json["taskProgress"] = taskProgress;
		json["rewardId"] = rewardId;
		json["rewardNumber"] = rewardNumber;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != taskId)
		{
			json["b"] = taskId;
		}

		if (0 != taskType)
		{
			json["c"] = taskType;
		}

		if (0 != taskState)
		{
			json["d"] = taskState;
		}

		if (0 != taskTarget)
		{
			json["e"] = taskTarget;
		}

		if (0 != taskCondition)
		{
			json["f"] = taskCondition;
		}

		if (0 != taskProgress)
		{
			json["g"] = taskProgress;
		}

		if (0 != rewardId)
		{
			json["h"] = rewardId;
		}

		if (0 != rewardNumber)
		{
			json["i"] = rewardNumber;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				taskId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				taskType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				taskState = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				taskTarget = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				taskCondition = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				taskProgress = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				rewardId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				rewardNumber = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneDailyTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneActiveRewarditem
{
	public int id = 0;
	public int count = 0;
	public int chance = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["count"] = count;
		json["chance"] = chance;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != count)
		{
			json["c"] = count;
		}

		if (0 != chance)
		{
			json["d"] = chance;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				count = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				chance = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneActiveRewarditem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneActiveReward
{
	public int activeRewardId = 0;
	public int activeRewardState = 0;
	public int activeRewardItemLimit = 0;
	public OneActiveRewarditem activeRewardItem = new OneActiveRewarditem();
	public List<OneActiveRewarditem> activeRewardItemList = new List<OneActiveRewarditem>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["activeRewardId"] = activeRewardId;
		json["activeRewardState"] = activeRewardState;
		json["activeRewardItemLimit"] = activeRewardItemLimit;
		json["activeRewardItem"] = activeRewardItem.GetJsonData();
		json["activeRewardItemList"] = new JsonData();
		json["activeRewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneActiveRewarditem temp in activeRewardItemList)
		{
			json["activeRewardItemList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != activeRewardId)
		{
			json["b"] = activeRewardId;
		}

		if (0 != activeRewardState)
		{
			json["c"] = activeRewardState;
		}

		if (0 != activeRewardItemLimit)
		{
			json["d"] = activeRewardItemLimit;
		}

		json["e"] = activeRewardItem.Encode();
		json["f"] = new JsonData();
		json["f"].SetJsonType(JsonType.Array);
		foreach(OneActiveRewarditem temp in activeRewardItemList)
		{
			json["f"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				activeRewardId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				activeRewardState = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				activeRewardItemLimit = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				activeRewardItem.Decode(json["e"]);
			}

			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneActiveRewarditem temp = new OneActiveRewarditem();
					temp.Decode(f_item);
					activeRewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneActiveReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_DailyTask_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_DailyTask_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_DailyTask_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_DailyTask_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_DailyTask_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneDailyTask> taskList = new List<OneDailyTask>();
	public int nextTime = 0;
	public int refreshTime = 0;
	public int refreshNumber = 0;
	public int activeRewardTime = 0;
	public int activePoint = 0;
	public List<OneActiveReward> activeRewardList = new List<OneActiveReward>();
	public int activeRefreshTime = 0;

	public Response_DailyTask_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextTime = 0;
		refreshTime = 0;
		refreshNumber = 0;
		activeRewardTime = 0;
		activePoint = 0;
		activeRefreshTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneDailyTask temp = new OneDailyTask();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				nextTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				refreshNumber = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				activeRewardTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				activePoint = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				foreach(JsonData l_item in json["l"])
				{
					OneActiveReward temp = new OneActiveReward();
					temp.Decode(l_item);
					activeRewardList.Add(temp);
				}
			}
			if (oKeys.Contains("m"))
			{
				activeRefreshTime = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_DailyTask_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneDailyTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["nextTime"] = nextTime;
		json["refreshTime"] = refreshTime;
		json["refreshNumber"] = refreshNumber;
		json["activeRewardTime"] = activeRewardTime;
		json["activePoint"] = activePoint;
		json["activeRewardList"] = new JsonData();
		json["activeRewardList"].SetJsonType(JsonType.Array);
		foreach(OneActiveReward temp in activeRewardList)
		{
			json["activeRewardList"].Add(temp.GetJsonData());
		}
		json["activeRefreshTime"] = activeRefreshTime;
		return json.ToJson();
	}
#endif
}

public class Request_DailyTask_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_DailyTask_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_DailyTask_Reward()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_DailyTask_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_DailyTask_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneDailyTask> taskList = new List<OneDailyTask>();
	public int nextTime = 0;
	public int refreshTime = 0;
	public int refreshNumber = 0;
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public int activeRewardTime = 0;
	public int activePoint = 0;
	public List<OneActiveReward> activeRewardList = new List<OneActiveReward>();
	public int taskId = 0;

	public Response_DailyTask_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextTime = 0;
		refreshTime = 0;
		refreshNumber = 0;
		activeRewardTime = 0;
		activePoint = 0;
		taskId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneDailyTask temp = new OneDailyTask();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				nextTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				refreshNumber = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				activeRewardTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				activePoint = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				foreach(JsonData m_item in json["m"])
				{
					OneActiveReward temp = new OneActiveReward();
					temp.Decode(m_item);
					activeRewardList.Add(temp);
				}
			}
			if (oKeys.Contains("n"))
			{
				taskId = Int32.Parse(json["n"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_DailyTask_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneDailyTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["nextTime"] = nextTime;
		json["refreshTime"] = refreshTime;
		json["refreshNumber"] = refreshNumber;
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["activeRewardTime"] = activeRewardTime;
		json["activePoint"] = activePoint;
		json["activeRewardList"] = new JsonData();
		json["activeRewardList"].SetJsonType(JsonType.Array);
		foreach(OneActiveReward temp in activeRewardList)
		{
			json["activeRewardList"].Add(temp.GetJsonData());
		}
		json["taskId"] = taskId;
		return json.ToJson();
	}
#endif
}

public class Request_Active_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Active_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int activeRewardId = 0;

	public Request_Active_Reward()
	{
		activeRewardId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["activeRewardId"] = activeRewardId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != activeRewardId)
		{
			json["c"] = activeRewardId;
		}

		return json.ToJson();
	}
}

public class Response_Active_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Active_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneDailyTask> taskList = new List<OneDailyTask>();
	public int nextTime = 0;
	public int refreshTime = 0;
	public int refreshNumber = 0;
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public int activeRewardTime = 0;
	public int activePoint = 0;
	public List<OneActiveReward> activeRewardList = new List<OneActiveReward>();

	public Response_Active_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextTime = 0;
		refreshTime = 0;
		refreshNumber = 0;
		activeRewardTime = 0;
		activePoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneDailyTask temp = new OneDailyTask();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				nextTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				refreshNumber = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				activeRewardTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				activePoint = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				foreach(JsonData m_item in json["m"])
				{
					OneActiveReward temp = new OneActiveReward();
					temp.Decode(m_item);
					activeRewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Active_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneDailyTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["nextTime"] = nextTime;
		json["refreshTime"] = refreshTime;
		json["refreshNumber"] = refreshNumber;
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["activeRewardTime"] = activeRewardTime;
		json["activePoint"] = activePoint;
		json["activeRewardList"] = new JsonData();
		json["activeRewardList"].SetJsonType(JsonType.Array);
		foreach(OneActiveReward temp in activeRewardList)
		{
			json["activeRewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_DailyTask_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_DailyTask_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_DailyTask_Refresh()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_DailyTask_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_DailyTask_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneDailyTask> taskList = new List<OneDailyTask>();
	public int nextTime = 0;
	public int refreshTime = 0;
	public int refreshNumber = 0;
	public int activeRewardTime = 0;
	public int activePoint = 0;
	public List<OneActiveReward> activeRewardList = new List<OneActiveReward>();

	public Response_DailyTask_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextTime = 0;
		refreshTime = 0;
		refreshNumber = 0;
		activeRewardTime = 0;
		activePoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneDailyTask temp = new OneDailyTask();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				nextTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				refreshNumber = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				activeRewardTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				activePoint = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				foreach(JsonData l_item in json["l"])
				{
					OneActiveReward temp = new OneActiveReward();
					temp.Decode(l_item);
					activeRewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_DailyTask_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneDailyTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["nextTime"] = nextTime;
		json["refreshTime"] = refreshTime;
		json["refreshNumber"] = refreshNumber;
		json["activeRewardTime"] = activeRewardTime;
		json["activePoint"] = activePoint;
		json["activeRewardList"] = new JsonData();
		json["activeRewardList"].SetJsonType(JsonType.Array);
		foreach(OneActiveReward temp in activeRewardList)
		{
			json["activeRewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_DailyTask_Change : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_DailyTask_Change_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneDailyTask task = new OneDailyTask();

	public Response_DailyTask_Change()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		task =  new OneDailyTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				task.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_DailyTask_Change Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["task"] = task.GetJsonData();
		return json.ToJson();
	}
#endif
}







public class OneAchievement
{
	public int id = 0;
	public int states = 0; //enum EAchievementState
	public long process = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["states"] = states;
		json["process"] = process;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != states)
		{
			json["c"] = states;
		}

		if (0 != process)
		{
			json["d"] = process;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				states = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				process = Int64.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneAchievement Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneAchievementRoad
{
	public int achievementRoadId = 0;
	public int achievementRoadState = 0; //enum EAchievementRoadRewardState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["achievementRoadId"] = achievementRoadId;
		json["achievementRoadState"] = achievementRoadState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != achievementRoadId)
		{
			json["b"] = achievementRoadId;
		}

		if (0 != achievementRoadState)
		{
			json["c"] = achievementRoadState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				achievementRoadId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				achievementRoadState = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneAchievementRoad Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Achievement_Check : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Achievement_Check_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Achievement_Check()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Achievement_Check : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Achievement_Check_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneAchievement> achievementList = new List<OneAchievement>();
	public List<OneAchievementRoad> achievementRoadList = new List<OneAchievementRoad>();
	public int achievementRoadId = 0;
	public int achievementRoadState = 0; //enum EAchievementRoadState
	public int achievementRoadPoint = 0;
	public int achievementRoadPointLimit = 0;

	public Response_Achievement_Check()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		achievementRoadId = 0;
		achievementRoadState = 0;
		achievementRoadPoint = 0;
		achievementRoadPointLimit = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneAchievement temp = new OneAchievement();
					temp.Decode(f_item);
					achievementList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneAchievementRoad temp = new OneAchievementRoad();
					temp.Decode(g_item);
					achievementRoadList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				achievementRoadId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				achievementRoadState = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				achievementRoadPoint = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				achievementRoadPointLimit = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Achievement_Check Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["achievementList"] = new JsonData();
		json["achievementList"].SetJsonType(JsonType.Array);
		foreach(OneAchievement temp in achievementList)
		{
			json["achievementList"].Add(temp.GetJsonData());
		}
		json["achievementRoadList"] = new JsonData();
		json["achievementRoadList"].SetJsonType(JsonType.Array);
		foreach(OneAchievementRoad temp in achievementRoadList)
		{
			json["achievementRoadList"].Add(temp.GetJsonData());
		}
		json["achievementRoadId"] = achievementRoadId;
		json["achievementRoadState"] = achievementRoadState;
		json["achievementRoadPoint"] = achievementRoadPoint;
		json["achievementRoadPointLimit"] = achievementRoadPointLimit;
		return json.ToJson();
	}
#endif
}


public class OneAchievementChange
{
	public int type = 0; //enum EAchievementChangeType
	public OneAchievement achievement = new OneAchievement();
	public long paramBefore = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["type"] = type;
		json["achievement"] = achievement.GetJsonData();
		json["paramBefore"] = paramBefore;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != type)
		{
			json["b"] = type;
		}

		json["c"] = achievement.Encode();
		if (0 != paramBefore)
		{
			json["d"] = paramBefore;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				type = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				achievement.Decode(json["c"]);
			}

			if (oKeys.Contains("d"))
			{
				paramBefore = Int64.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneAchievementChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Achievement_Change : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Achievement_Change_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneAchievementChange> achievementChangeList = new List<OneAchievementChange>();

	public Response_Achievement_Change()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneAchievementChange temp = new OneAchievementChange();
					temp.Decode(f_item);
					achievementChangeList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Achievement_Change Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["achievementChangeList"] = new JsonData();
		json["achievementChangeList"].SetJsonType(JsonType.Array);
		foreach(OneAchievementChange temp in achievementChangeList)
		{
			json["achievementChangeList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Achievement_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Achievement_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int achievementId = 0;

	public Request_Achievement_Reward()
	{
		achievementId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["achievementId"] = achievementId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != achievementId)
		{
			json["c"] = achievementId;
		}

		return json.ToJson();
	}
}

public class Response_Achievement_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Achievement_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneAchievement> reward = new List<OneAchievement>();
	public List<OneAchievementRoad> achievementRoadList = new List<OneAchievementRoad>();
	public int achievementRoadId = 0;
	public int achievementRoadState = 0; //enum EAchievementRoadState
	public int achievementRoadPoint = 0;
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();
	public int achievementId = 0;

	public Response_Achievement_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		achievementRoadId = 0;
		achievementRoadState = 0;
		achievementRoadPoint = 0;
		achievementId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneAchievement temp = new OneAchievement();
					temp.Decode(f_item);
					reward.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneAchievementRoad temp = new OneAchievementRoad();
					temp.Decode(g_item);
					achievementRoadList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				achievementRoadId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				achievementRoadState = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				achievementRoadPoint = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(k_item);
					rewardItemList.Add(temp);
				}
			}
			if (oKeys.Contains("l"))
			{
				achievementId = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Achievement_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["reward"] = new JsonData();
		json["reward"].SetJsonType(JsonType.Array);
		foreach(OneAchievement temp in reward)
		{
			json["reward"].Add(temp.GetJsonData());
		}
		json["achievementRoadList"] = new JsonData();
		json["achievementRoadList"].SetJsonType(JsonType.Array);
		foreach(OneAchievementRoad temp in achievementRoadList)
		{
			json["achievementRoadList"].Add(temp.GetJsonData());
		}
		json["achievementRoadId"] = achievementRoadId;
		json["achievementRoadState"] = achievementRoadState;
		json["achievementRoadPoint"] = achievementRoadPoint;
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		json["achievementId"] = achievementId;
		return json.ToJson();
	}
#endif
}

public class Request_AchievementRoad_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_AchievementRoad_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int achievementRoadId = 0;

	public Request_AchievementRoad_Reward()
	{
		achievementRoadId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["achievementRoadId"] = achievementRoadId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != achievementRoadId)
		{
			json["c"] = achievementRoadId;
		}

		return json.ToJson();
	}
}

public class Response_AchievementRoad_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_AchievementRoad_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneAchievementRoad> achievementRoadList = new List<OneAchievementRoad>();
	public int achievementRoadId = 0;
	public int achievementRoadState = 0; //enum EAchievementRoadState
	public int achievementRoadPoint = 0;
	public int achievementRoadPointLimit = 0;
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();

	public Response_AchievementRoad_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		achievementRoadId = 0;
		achievementRoadState = 0;
		achievementRoadPoint = 0;
		achievementRoadPointLimit = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneAchievementRoad temp = new OneAchievementRoad();
					temp.Decode(f_item);
					achievementRoadList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				achievementRoadId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				achievementRoadState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				achievementRoadPoint = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				achievementRoadPointLimit = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(k_item);
					rewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_AchievementRoad_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["achievementRoadList"] = new JsonData();
		json["achievementRoadList"].SetJsonType(JsonType.Array);
		foreach(OneAchievementRoad temp in achievementRoadList)
		{
			json["achievementRoadList"].Add(temp.GetJsonData());
		}
		json["achievementRoadId"] = achievementRoadId;
		json["achievementRoadState"] = achievementRoadState;
		json["achievementRoadPoint"] = achievementRoadPoint;
		json["achievementRoadPointLimit"] = achievementRoadPointLimit;
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}



public class HeroEquip
{
	public int equipId = 0;
	public int equipPosId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["equipId"] = equipId;
		json["equipPosId"] = equipPosId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != equipId)
		{
			json["b"] = equipId;
		}

		if (0 != equipPosId)
		{
			json["c"] = equipPosId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				equipId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipPosId = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("HeroEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class HeroBrokenEquip
{
	public int heroUid = 0;
	public int equipId = 0;
	public int equipPositionId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["heroUid"] = heroUid;
		json["equipId"] = equipId;
		json["equipPositionId"] = equipPositionId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != heroUid)
		{
			json["b"] = heroUid;
		}

		if (0 != equipId)
		{
			json["c"] = equipId;
		}

		if (0 != equipPositionId)
		{
			json["d"] = equipPositionId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				heroUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				equipId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				equipPositionId = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("HeroBrokenEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class HeroInfo
{
	public int heroUid = 0;
	public int heroId = 0;
	public string nickName = "";
	public int aptitude = 0;
	public int talentId = 0;
	public int level = 0;
	public int exp = 0;
	public int currentState = 0; //enum ERoleState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int stateRemainTime = 0;
	public int createTime = 0;
	public HeroEquip equip1 = new HeroEquip();
	public HeroEquip equip2 = new HeroEquip();
	public HeroEquip equip3 = new HeroEquip();
	public HeroEquip equip4 = new HeroEquip();
	public HeroEquip equip5 = new HeroEquip();
	public HeroEquip equip6 = new HeroEquip();
	public int gender = 0; //enum EGender
	public RoleDress roleDress = new RoleDress();
	public HeroBrokenEquip brokenEquip = new HeroBrokenEquip();
	public int fightPoint = 0;
	public int remainHp = 0;
	public int hpAdd = 0;
	public int atkAdd = 0;
	public int defAdd = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["heroUid"] = heroUid;
		json["heroId"] = heroId;
		json["nickName"] = nickName.ToString();
		json["aptitude"] = aptitude;
		json["talentId"] = talentId;
		json["level"] = level;
		json["exp"] = exp;
		json["currentState"] = currentState;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["stateRemainTime"] = stateRemainTime;
		json["createTime"] = createTime;
		json["equip1"] = equip1.GetJsonData();
		json["equip2"] = equip2.GetJsonData();
		json["equip3"] = equip3.GetJsonData();
		json["equip4"] = equip4.GetJsonData();
		json["equip5"] = equip5.GetJsonData();
		json["equip6"] = equip6.GetJsonData();
		json["gender"] = gender;
		json["roleDress"] = roleDress.GetJsonData();
		json["brokenEquip"] = brokenEquip.GetJsonData();
		json["fightPoint"] = fightPoint;
		json["remainHp"] = remainHp;
		json["hpAdd"] = hpAdd;
		json["atkAdd"] = atkAdd;
		json["defAdd"] = defAdd;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != heroUid)
		{
			json["b"] = heroUid;
		}

		if (0 != heroId)
		{
			json["c"] = heroId;
		}

		if (!String.IsNullOrEmpty(nickName))
		{
			json["d"] = nickName.ToString();
		}
		if (0 != aptitude)
		{
			json["e"] = aptitude;
		}

		if (0 != talentId)
		{
			json["f"] = talentId;
		}

		if (0 != level)
		{
			json["g"] = level;
		}

		if (0 != exp)
		{
			json["h"] = exp;
		}

		if (0 != currentState)
		{
			json["i"] = currentState;
		}

		if (0 != stateStartTime)
		{
			json["j"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["k"] = stateEndTime;
		}

		if (0 != stateRemainTime)
		{
			json["l"] = stateRemainTime;
		}

		if (0 != createTime)
		{
			json["m"] = createTime;
		}

		json["n"] = equip1.Encode();
		json["o"] = equip2.Encode();
		json["p"] = equip3.Encode();
		json["q"] = equip4.Encode();
		json["r"] = equip5.Encode();
		json["s"] = equip6.Encode();
		if (0 != gender)
		{
			json["t"] = gender;
		}

		json["u"] = roleDress.Encode();
		json["v"] = brokenEquip.Encode();
		if (0 != fightPoint)
		{
			json["w"] = fightPoint;
		}

		if (0 != remainHp)
		{
			json["x"] = remainHp;
		}

		if (0 != hpAdd)
		{
			json["y"] = hpAdd;
		}

		if (0 != atkAdd)
		{
			json["z"] = atkAdd;
		}

		if (0 != defAdd)
		{
			json["a1"] = defAdd;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				heroUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				heroId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				nickName = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				aptitude = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				talentId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				level = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				exp = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				currentState = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				stateStartTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				stateEndTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				stateRemainTime = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				createTime = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				equip1.Decode(json["n"]);
			}

			if (oKeys.Contains("o"))
			{
				equip2.Decode(json["o"]);
			}

			if (oKeys.Contains("p"))
			{
				equip3.Decode(json["p"]);
			}

			if (oKeys.Contains("q"))
			{
				equip4.Decode(json["q"]);
			}

			if (oKeys.Contains("r"))
			{
				equip5.Decode(json["r"]);
			}

			if (oKeys.Contains("s"))
			{
				equip6.Decode(json["s"]);
			}

			if (oKeys.Contains("t"))
			{
				gender = Int32.Parse(json["t"].ToString());
			}

			if (oKeys.Contains("u"))
			{
				roleDress.Decode(json["u"]);
			}

			if (oKeys.Contains("v"))
			{
				brokenEquip.Decode(json["v"]);
			}

			if (oKeys.Contains("w"))
			{
				fightPoint = Int32.Parse(json["w"].ToString());
			}

			if (oKeys.Contains("x"))
			{
				remainHp = Int32.Parse(json["x"].ToString());
			}

			if (oKeys.Contains("y"))
			{
				hpAdd = Int32.Parse(json["y"].ToString());
			}

			if (oKeys.Contains("z"))
			{
				atkAdd = Int32.Parse(json["z"].ToString());
			}

			if (oKeys.Contains("a1"))
			{
				defAdd = Int32.Parse(json["a1"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("HeroInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class WarriorInfo
{
	public int warriorUid = 0;
	public int warriorId = 0;
	public int level = 0;
	public int exp = 0;
	public int rank = 0;
	public int currentState = 0; //enum ERoleState
	public int stateStartTime = 0;
	public int stateEndTime = 0;
	public int createTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["warriorUid"] = warriorUid;
		json["warriorId"] = warriorId;
		json["level"] = level;
		json["exp"] = exp;
		json["rank"] = rank;
		json["currentState"] = currentState;
		json["stateStartTime"] = stateStartTime;
		json["stateEndTime"] = stateEndTime;
		json["createTime"] = createTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != warriorUid)
		{
			json["b"] = warriorUid;
		}

		if (0 != warriorId)
		{
			json["c"] = warriorId;
		}

		if (0 != level)
		{
			json["d"] = level;
		}

		if (0 != exp)
		{
			json["e"] = exp;
		}

		if (0 != rank)
		{
			json["f"] = rank;
		}

		if (0 != currentState)
		{
			json["g"] = currentState;
		}

		if (0 != stateStartTime)
		{
			json["h"] = stateStartTime;
		}

		if (0 != stateEndTime)
		{
			json["i"] = stateEndTime;
		}

		if (0 != createTime)
		{
			json["j"] = createTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				warriorUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				warriorId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				level = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				exp = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				rank = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				currentState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				stateStartTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				stateEndTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				createTime = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("WarriorInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}


public class WorkerInfo
{
	public int workerUid = 0;
	public int workerId = 0;
	public int workerState = 0; //enum EWorkerState
	public int exp = 0;
	public int workerLevel = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["workerUid"] = workerUid;
		json["workerId"] = workerId;
		json["workerState"] = workerState;
		json["exp"] = exp;
		json["workerLevel"] = workerLevel;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != workerUid)
		{
			json["b"] = workerUid;
		}

		if (0 != workerId)
		{
			json["c"] = workerId;
		}

		if (0 != workerState)
		{
			json["d"] = workerState;
		}

		if (0 != exp)
		{
			json["e"] = exp;
		}

		if (0 != workerLevel)
		{
			json["f"] = workerLevel;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				workerUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				workerId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				workerState = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				exp = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				workerLevel = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("WorkerInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Hero_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Hero_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heroFieldLimit = 0;
	public List<HeroInfo> heroList = new List<HeroInfo>();
	public List<WarriorInfo> warriorList = new List<WarriorInfo>();
	public List<WorkerInfo> workerList = new List<WorkerInfo>();

	public Response_Hero_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heroFieldLimit = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heroFieldLimit = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(g_item);
					heroList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					WarriorInfo temp = new WarriorInfo();
					temp.Decode(h_item);
					warriorList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					WorkerInfo temp = new WorkerInfo();
					temp.Decode(i_item);
					workerList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroFieldLimit"] = heroFieldLimit;
		json["heroList"] = new JsonData();
		json["heroList"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroList)
		{
			json["heroList"].Add(temp.GetJsonData());
		}
		json["warriorList"] = new JsonData();
		json["warriorList"].SetJsonType(JsonType.Array);
		foreach(WarriorInfo temp in warriorList)
		{
			json["warriorList"].Add(temp.GetJsonData());
		}
		json["workerList"] = new JsonData();
		json["workerList"].SetJsonType(JsonType.Array);
		foreach(WorkerInfo temp in workerList)
		{
			json["workerList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Hero_FieldUnlock : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_FieldUnlock_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int useGem = 0;

	public Request_Hero_FieldUnlock()
	{
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != useGem)
		{
			json["c"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Hero_FieldUnlock : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_FieldUnlock_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heroFieldLimit = 0;

	public Response_Hero_FieldUnlock()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heroFieldLimit = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heroFieldLimit = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_FieldUnlock Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroFieldLimit"] = heroFieldLimit;
		return json.ToJson();
	}
#endif
}

public class Request_Hero_BuyList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_BuyList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Hero_BuyList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}


public class EnlistHeroInfo
{
	public int heroIndex = 0;
	public int heroId = 0;
	public int aptitude = 0;
	public int recruitCostGold = 0;
	public int recruitCostGem = 0;
	public int recruitState = 0; //enum ERecruitState
	public HeroEquip equip1 = new HeroEquip();
	public HeroEquip equip2 = new HeroEquip();
	public HeroEquip equip3 = new HeroEquip();
	public HeroEquip equip4 = new HeroEquip();
	public HeroEquip equip5 = new HeroEquip();
	public HeroEquip equip6 = new HeroEquip();
	public int gender = 0; //enum EGender
	public RoleDress roleDress = new RoleDress();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["heroIndex"] = heroIndex;
		json["heroId"] = heroId;
		json["aptitude"] = aptitude;
		json["recruitCostGold"] = recruitCostGold;
		json["recruitCostGem"] = recruitCostGem;
		json["recruitState"] = recruitState;
		json["equip1"] = equip1.GetJsonData();
		json["equip2"] = equip2.GetJsonData();
		json["equip3"] = equip3.GetJsonData();
		json["equip4"] = equip4.GetJsonData();
		json["equip5"] = equip5.GetJsonData();
		json["equip6"] = equip6.GetJsonData();
		json["gender"] = gender;
		json["roleDress"] = roleDress.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != heroIndex)
		{
			json["b"] = heroIndex;
		}

		if (0 != heroId)
		{
			json["c"] = heroId;
		}

		if (0 != aptitude)
		{
			json["d"] = aptitude;
		}

		if (0 != recruitCostGold)
		{
			json["e"] = recruitCostGold;
		}

		if (0 != recruitCostGem)
		{
			json["f"] = recruitCostGem;
		}

		if (0 != recruitState)
		{
			json["g"] = recruitState;
		}

		json["h"] = equip1.Encode();
		json["i"] = equip2.Encode();
		json["j"] = equip3.Encode();
		json["k"] = equip4.Encode();
		json["l"] = equip5.Encode();
		json["m"] = equip6.Encode();
		if (0 != gender)
		{
			json["n"] = gender;
		}

		json["o"] = roleDress.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				heroIndex = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				heroId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				aptitude = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				recruitCostGold = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				recruitCostGem = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				recruitState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				equip1.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				equip2.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				equip3.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				equip4.Decode(json["k"]);
			}

			if (oKeys.Contains("l"))
			{
				equip5.Decode(json["l"]);
			}

			if (oKeys.Contains("m"))
			{
				equip6.Decode(json["m"]);
			}

			if (oKeys.Contains("n"))
			{
				gender = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				roleDress.Decode(json["o"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("EnlistHeroInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Hero_BuyList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_BuyList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int nextRefreshTime = 0;
	public int refreshCostType = 0; //enum EGoldOrGem
	public int refreshCostValue = 0;
	public List<EnlistHeroInfo> enlistHeroList = new List<EnlistHeroInfo>();
	public int recruitRefreshCount = 0;

	public Response_Hero_BuyList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextRefreshTime = 0;
		refreshCostType = 0;
		refreshCostValue = 0;
		recruitRefreshCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nextRefreshTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				refreshCostType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshCostValue = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					EnlistHeroInfo temp = new EnlistHeroInfo();
					temp.Decode(i_item);
					enlistHeroList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				recruitRefreshCount = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_BuyList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["nextRefreshTime"] = nextRefreshTime;
		json["refreshCostType"] = refreshCostType;
		json["refreshCostValue"] = refreshCostValue;
		json["enlistHeroList"] = new JsonData();
		json["enlistHeroList"].SetJsonType(JsonType.Array);
		foreach(EnlistHeroInfo temp in enlistHeroList)
		{
			json["enlistHeroList"].Add(temp.GetJsonData());
		}
		json["recruitRefreshCount"] = recruitRefreshCount;
		return json.ToJson();
	}
#endif
}

public class Request_Hero_BuyListRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_BuyListRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int refreshCostType = 0; //enum EGoldOrGem

	public Request_Hero_BuyListRefresh()
	{
		refreshCostType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["refreshCostType"] = refreshCostType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != refreshCostType)
		{
			json["c"] = refreshCostType;
		}

		return json.ToJson();
	}
}

public class Response_Hero_BuyListRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_BuyListRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Hero_BuyListRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_BuyListRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Buy : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Buy_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroIndex = 0;
	public int costType = 0; //enum EGoldOrGem

	public Request_Hero_Buy()
	{
		heroIndex = 0;
		costType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroIndex"] = heroIndex;
		json["costType"] = costType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroIndex)
		{
			json["c"] = heroIndex;
		}

		if (0 != costType)
		{
			json["d"] = costType;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Buy : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Buy_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo newHero = new HeroInfo();

	public Response_Hero_Buy()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		newHero =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				newHero.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Buy Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["newHero"] = newHero.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Equip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Equip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public int equipField = 0;
	public int onOrOff = 0;
	public string equipUid = "";

	public Request_Hero_Equip()
	{
		heroUid = 0;
		equipField = 0;
		onOrOff = 0;
		equipUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["equipField"] = equipField;
		json["onOrOff"] = onOrOff;
		json["equipUid"] = equipUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (0 != equipField)
		{
			json["d"] = equipField;
		}

		if (0 != onOrOff)
		{
			json["e"] = onOrOff;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["f"] = equipUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Hero_Equip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Equip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heroUid = 0;
	public int equipField = 0;
	public int onOrOff = 0;
	public HeroEquip equip = new HeroEquip();

	public Response_Hero_Equip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heroUid = 0;
		equipField = 0;
		onOrOff = 0;
		equip =  new HeroEquip();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heroUid = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				equipField = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				onOrOff = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				equip.Decode(json["i"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Equip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroUid"] = heroUid;
		json["equipField"] = equipField;
		json["onOrOff"] = onOrOff;
		json["equip"] = equip.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class HeroEquipAuto
{
	public string equipId = "";
	public int equipPosId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["equipId"] = equipId.ToString();
		json["equipPosId"] = equipPosId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(equipId))
		{
			json["b"] = equipId.ToString();
		}
		if (0 != equipPosId)
		{
			json["c"] = equipPosId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				equipId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				equipPosId = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("HeroEquipAuto Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Hero_EquipAuto : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_EquipAuto_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public List<HeroEquipAuto> equip = new List<HeroEquipAuto>();

	public Request_Hero_EquipAuto()
	{
		heroUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["equip"] = new JsonData();
		json["equip"].SetJsonType(JsonType.Array);
		foreach(HeroEquipAuto temp in equip)
		{
			json["equip"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		json["d"] = new JsonData();
		json["d"].SetJsonType(JsonType.Array);
		foreach(HeroEquipAuto temp in equip)
		{
			json["d"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_Hero_EquipAuto : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_EquipAuto_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int heroUid = 0;
	public List<HeroEquip> equip = new List<HeroEquip>();

	public Response_Hero_EquipAuto()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heroUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heroUid = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					HeroEquip temp = new HeroEquip();
					temp.Decode(g_item);
					equip.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_EquipAuto Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroUid"] = heroUid;
		json["equip"] = new JsonData();
		json["equip"].SetJsonType(JsonType.Array);
		foreach(HeroEquip temp in equip)
		{
			json["equip"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Hero_WarriorRankUp : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_WarriorRankUp_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int warriorId = 0;

	public Request_Hero_WarriorRankUp()
	{
		warriorId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["warriorId"] = warriorId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != warriorId)
		{
			json["c"] = warriorId;
		}

		return json.ToJson();
	}
}

public class Response_Hero_WarriorRankUp : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_WarriorRankUp_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public WarriorInfo warriorInfo = new WarriorInfo();

	public Response_Hero_WarriorRankUp()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		warriorInfo =  new WarriorInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				warriorInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_WarriorRankUp Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["warriorInfo"] = warriorInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Setting : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Setting_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public string nickName = "";

	public Request_Hero_Setting()
	{
		heroUid = 0;
		nickName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["nickName"] = nickName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (!String.IsNullOrEmpty(nickName))
		{
			json["d"] = nickName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Hero_Setting : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Setting_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo hero = new HeroInfo();

	public Response_Hero_Setting()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		hero =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				hero.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Setting Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["hero"] = hero.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Fire : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Fire_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;

	public Request_Hero_Fire()
	{
		heroUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Fire : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Fire_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo hero = new HeroInfo();

	public Response_Hero_Fire()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		hero =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				hero.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Fire Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["hero"] = hero.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Transfer : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Transfer_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public int targetHeroId = 0;

	public Request_Hero_Transfer()
	{
		heroUid = 0;
		targetHeroId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["targetHeroId"] = targetHeroId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (0 != targetHeroId)
		{
			json["d"] = targetHeroId;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Transfer : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Transfer_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo hero = new HeroInfo();

	public Response_Hero_Transfer()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		hero =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				hero.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Transfer Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["hero"] = hero.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_DataRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_DataRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;

	public Request_Hero_DataRefresh()
	{
		heroUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		return json.ToJson();
	}
}

public class Response_Hero_DataRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_DataRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo hero = new HeroInfo();

	public Response_Hero_DataRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		hero =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				hero.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_DataRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["hero"] = hero.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class Request_Hero_Recover : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Recover_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public int costType = 0; //enum ERecoverCostType

	public Request_Hero_Recover()
	{
		heroUid = 0;
		costType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["costType"] = costType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (0 != costType)
		{
			json["d"] = costType;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Recover : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Recover_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Hero_Recover()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Recover Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_FixBrokenEquip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_FixBrokenEquip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public int costType = 0; //enum EItemType

	public Request_Hero_FixBrokenEquip()
	{
		heroUid = 0;
		costType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["costType"] = costType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (0 != costType)
		{
			json["d"] = costType;
		}

		return json.ToJson();
	}
}

public class Response_Hero_FixBrokenEquip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_FixBrokenEquip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public HeroInfo heroInfo = new HeroInfo();

	public Response_Hero_FixBrokenEquip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		heroInfo =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				heroInfo.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_FixBrokenEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroInfo"] = heroInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Hero_Change : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Change_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<HeroInfo> heroList = new List<HeroInfo>();

	public Response_Hero_Change()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(f_item);
					heroList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Change Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroList"] = new JsonData();
		json["heroList"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroList)
		{
			json["heroList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}


public class ExchangeHeroInfo
{
	public int id = 0;
	public HeroInfo heroInfo = new HeroInfo();
	public int unlockLevel = 0;
	public long unlockCost = 0;
	public int exchangeState = 0; //enum EHeroExchangeState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["heroInfo"] = heroInfo.GetJsonData();
		json["unlockLevel"] = unlockLevel;
		json["unlockCost"] = unlockCost;
		json["exchangeState"] = exchangeState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		json["c"] = heroInfo.Encode();
		if (0 != unlockLevel)
		{
			json["d"] = unlockLevel;
		}

		if (0 != unlockCost)
		{
			json["e"] = unlockCost;
		}

		if (0 != exchangeState)
		{
			json["f"] = exchangeState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				heroInfo.Decode(json["c"]);
			}

			if (oKeys.Contains("d"))
			{
				unlockLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				unlockCost = Int64.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				exchangeState = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ExchangeHeroInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Hero_ExchangeList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_ExchangeList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Hero_ExchangeList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Hero_ExchangeList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_ExchangeList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ExchangeHeroInfo> exchangeHeroList = new List<ExchangeHeroInfo>();

	public Response_Hero_ExchangeList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ExchangeHeroInfo temp = new ExchangeHeroInfo();
					temp.Decode(f_item);
					exchangeHeroList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_ExchangeList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchangeHeroList"] = new JsonData();
		json["exchangeHeroList"].SetJsonType(JsonType.Array);
		foreach(ExchangeHeroInfo temp in exchangeHeroList)
		{
			json["exchangeHeroList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Hero_Exchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_Exchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int id = 0;

	public Request_Hero_Exchange()
	{
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != id)
		{
			json["c"] = id;
		}

		return json.ToJson();
	}
}

public class Response_Hero_Exchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_Exchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ExchangeHeroInfo> exchangeHeroList = new List<ExchangeHeroInfo>();

	public Response_Hero_Exchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ExchangeHeroInfo temp = new ExchangeHeroInfo();
					temp.Decode(f_item);
					exchangeHeroList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_Exchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchangeHeroList"] = new JsonData();
		json["exchangeHeroList"].SetJsonType(JsonType.Array);
		foreach(ExchangeHeroInfo temp in exchangeHeroList)
		{
			json["exchangeHeroList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class WorkerMakeExp
{
	public int makeExpCount = 0;
	public int makeLevelWorker = 0;
	public int makeSpeed = 0;
	public int makeWorkerId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["makeExpCount"] = makeExpCount;
		json["makeLevelWorker"] = makeLevelWorker;
		json["makeSpeed"] = makeSpeed;
		json["makeWorkerId"] = makeWorkerId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != makeExpCount)
		{
			json["b"] = makeExpCount;
		}

		if (0 != makeLevelWorker)
		{
			json["c"] = makeLevelWorker;
		}

		if (0 != makeSpeed)
		{
			json["d"] = makeSpeed;
		}

		if (0 != makeWorkerId)
		{
			json["e"] = makeWorkerId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				makeExpCount = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				makeLevelWorker = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				makeSpeed = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				makeWorkerId = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("WorkerMakeExp Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Worker_MakeExp : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Worker_MakeExp_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<WorkerMakeExp> workerMakeExpList = new List<WorkerMakeExp>();

	public Response_Worker_MakeExp()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					WorkerMakeExp temp = new WorkerMakeExp();
					temp.Decode(f_item);
					workerMakeExpList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Worker_MakeExp Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["workerMakeExpList"] = new JsonData();
		json["workerMakeExpList"].SetJsonType(JsonType.Array);
		foreach(WorkerMakeExp temp in workerMakeExpList)
		{
			json["workerMakeExpList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_Hero_WorkerChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_WorkerChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public WorkerInfo worker = new WorkerInfo();
	public int reason = 0; //enum EItemLogReason

	public Response_Hero_WorkerChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		worker =  new WorkerInfo();
		reason = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				worker.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reason = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_WorkerChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["worker"] = worker.GetJsonData();
		json["reason"] = reason;
		return json.ToJson();
	}
#endif
}

public class Request_Hero_WorkerUnlock : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_WorkerUnlock_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int workerId = 0;
	public int unlockItemType = 0;

	public Request_Hero_WorkerUnlock()
	{
		workerId = 0;
		unlockItemType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["workerId"] = workerId;
		json["unlockItemType"] = unlockItemType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != workerId)
		{
			json["c"] = workerId;
		}

		if (0 != unlockItemType)
		{
			json["d"] = unlockItemType;
		}

		return json.ToJson();
	}
}

public class Response_Hero_WorkerUnlock : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_WorkerUnlock_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<WorkerInfo> workerList = new List<WorkerInfo>();

	public Response_Hero_WorkerUnlock()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					WorkerInfo temp = new WorkerInfo();
					temp.Decode(f_item);
					workerList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_WorkerUnlock Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["workerList"] = new JsonData();
		json["workerList"].SetJsonType(JsonType.Array);
		foreach(WorkerInfo temp in workerList)
		{
			json["workerList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}





public class OneShopper
{
	public int shopperUid = 0;
	public int shopperType = 0; //enum EShopperType
	public int shopperState = 0; //enum EShopperState
	public int isGuide = 0;
	public int shopperId = 0;
	public int shopperLevel = 0;
	public int dressId = 0;
	public int targetEquipId = 0;
	public string targetEquipUid = "";
	public int targetItemId = 0;
	public int targetCount = 0;
	public int price = 0;
	public int energy = 0;
	public int hasChat = 0;
	public int hasDisCount = 0;
	public int hasDouble = 0;
	public int rewardItemId = 0;
	public int rewardItemCount = 0;
	public List<HeroEquip> equips = new List<HeroEquip>();
	public int gender = 0; //enum EGender
	public RoleDress roleDress = new RoleDress();
	public int energyTimes = 0;
	public int leaveTime = 0;
	public int param1 = 0;
	public int param2 = 0;
	public int param3 = 0;
	public int param4 = 0;
	public int param5 = 0;
	public string param6 = "";
	public string param7 = "";
	public int shopperComeType = 0; //enum EShopperComeType
	public int shopperAIType = 0; //enum EShopperAIType
	public int shopperGuideTaskId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["shopperUid"] = shopperUid;
		json["shopperType"] = shopperType;
		json["shopperState"] = shopperState;
		json["isGuide"] = isGuide;
		json["shopperId"] = shopperId;
		json["shopperLevel"] = shopperLevel;
		json["dressId"] = dressId;
		json["targetEquipId"] = targetEquipId;
		json["targetEquipUid"] = targetEquipUid.ToString();
		json["targetItemId"] = targetItemId;
		json["targetCount"] = targetCount;
		json["price"] = price;
		json["energy"] = energy;
		json["hasChat"] = hasChat;
		json["hasDisCount"] = hasDisCount;
		json["hasDouble"] = hasDouble;
		json["rewardItemId"] = rewardItemId;
		json["rewardItemCount"] = rewardItemCount;
		json["equips"] = new JsonData();
		json["equips"].SetJsonType(JsonType.Array);
		foreach(HeroEquip temp in equips)
		{
			json["equips"].Add(temp.GetJsonData());
		}
		json["gender"] = gender;
		json["roleDress"] = roleDress.GetJsonData();
		json["energyTimes"] = energyTimes;
		json["leaveTime"] = leaveTime;
		json["param1"] = param1;
		json["param2"] = param2;
		json["param3"] = param3;
		json["param4"] = param4;
		json["param5"] = param5;
		json["param6"] = param6.ToString();
		json["param7"] = param7.ToString();
		json["shopperComeType"] = shopperComeType;
		json["shopperAIType"] = shopperAIType;
		json["shopperGuideTaskId"] = shopperGuideTaskId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != shopperUid)
		{
			json["b"] = shopperUid;
		}

		if (0 != shopperType)
		{
			json["c"] = shopperType;
		}

		if (0 != shopperState)
		{
			json["d"] = shopperState;
		}

		if (0 != isGuide)
		{
			json["e"] = isGuide;
		}

		if (0 != shopperId)
		{
			json["f"] = shopperId;
		}

		if (0 != shopperLevel)
		{
			json["g"] = shopperLevel;
		}

		if (0 != dressId)
		{
			json["h"] = dressId;
		}

		if (0 != targetEquipId)
		{
			json["i"] = targetEquipId;
		}

		if (!String.IsNullOrEmpty(targetEquipUid))
		{
			json["j"] = targetEquipUid.ToString();
		}
		if (0 != targetItemId)
		{
			json["k"] = targetItemId;
		}

		if (0 != targetCount)
		{
			json["l"] = targetCount;
		}

		if (0 != price)
		{
			json["m"] = price;
		}

		if (0 != energy)
		{
			json["n"] = energy;
		}

		if (0 != hasChat)
		{
			json["o"] = hasChat;
		}

		if (0 != hasDisCount)
		{
			json["p"] = hasDisCount;
		}

		if (0 != hasDouble)
		{
			json["q"] = hasDouble;
		}

		if (0 != rewardItemId)
		{
			json["r"] = rewardItemId;
		}

		if (0 != rewardItemCount)
		{
			json["s"] = rewardItemCount;
		}

		json["t"] = new JsonData();
		json["t"].SetJsonType(JsonType.Array);
		foreach(HeroEquip temp in equips)
		{
			json["t"].Add(temp.Encode());
		}
		if (0 != gender)
		{
			json["u"] = gender;
		}

		json["v"] = roleDress.Encode();
		if (0 != energyTimes)
		{
			json["w"] = energyTimes;
		}

		if (0 != leaveTime)
		{
			json["x"] = leaveTime;
		}

		if (0 != param1)
		{
			json["y"] = param1;
		}

		if (0 != param2)
		{
			json["z"] = param2;
		}

		if (0 != param3)
		{
			json["a1"] = param3;
		}

		if (0 != param4)
		{
			json["a2"] = param4;
		}

		if (0 != param5)
		{
			json["a3"] = param5;
		}

		if (!String.IsNullOrEmpty(param6))
		{
			json["a4"] = param6.ToString();
		}
		if (!String.IsNullOrEmpty(param7))
		{
			json["a5"] = param7.ToString();
		}
		if (0 != shopperComeType)
		{
			json["a6"] = shopperComeType;
		}

		if (0 != shopperAIType)
		{
			json["a7"] = shopperAIType;
		}

		if (0 != shopperGuideTaskId)
		{
			json["a8"] = shopperGuideTaskId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				shopperUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				shopperType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				shopperState = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				isGuide = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				shopperId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				shopperLevel = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				dressId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				targetEquipId = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				targetEquipUid = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				targetItemId = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				targetCount = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				price = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				energy = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				hasChat = Int32.Parse(json["o"].ToString());
			}

			if (oKeys.Contains("p"))
			{
				hasDisCount = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				hasDouble = Int32.Parse(json["q"].ToString());
			}

			if (oKeys.Contains("r"))
			{
				rewardItemId = Int32.Parse(json["r"].ToString());
			}

			if (oKeys.Contains("s"))
			{
				rewardItemCount = Int32.Parse(json["s"].ToString());
			}

			if (oKeys.Contains("t"))
			{
				foreach(JsonData t_item in json["t"])
				{
					HeroEquip temp = new HeroEquip();
					temp.Decode(t_item);
					equips.Add(temp);
				}
			}
			if (oKeys.Contains("u"))
			{
				gender = Int32.Parse(json["u"].ToString());
			}

			if (oKeys.Contains("v"))
			{
				roleDress.Decode(json["v"]);
			}

			if (oKeys.Contains("w"))
			{
				energyTimes = Int32.Parse(json["w"].ToString());
			}

			if (oKeys.Contains("x"))
			{
				leaveTime = Int32.Parse(json["x"].ToString());
			}

			if (oKeys.Contains("y"))
			{
				param1 = Int32.Parse(json["y"].ToString());
			}

			if (oKeys.Contains("z"))
			{
				param2 = Int32.Parse(json["z"].ToString());
			}

			if (oKeys.Contains("a1"))
			{
				param3 = Int32.Parse(json["a1"].ToString());
			}

			if (oKeys.Contains("a2"))
			{
				param4 = Int32.Parse(json["a2"].ToString());
			}

			if (oKeys.Contains("a3"))
			{
				param5 = Int32.Parse(json["a3"].ToString());
			}

			if (oKeys.Contains("a4"))
			{
				param6 = json["a4"].ToString();
			}
			if (oKeys.Contains("a5"))
			{
				param7 = json["a5"].ToString();
			}
			if (oKeys.Contains("a6"))
			{
				shopperComeType = Int32.Parse(json["a6"].ToString());
			}

			if (oKeys.Contains("a7"))
			{
				shopperAIType = Int32.Parse(json["a7"].ToString());
			}

			if (oKeys.Contains("a8"))
			{
				shopperGuideTaskId = Int32.Parse(json["a8"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneShopper Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Shopper_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Shopper_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneShopper> shopperList = new List<OneShopper>();

	public Response_Shopper_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneShopper temp = new OneShopper();
					temp.Decode(f_item);
					shopperList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopperList"] = new JsonData();
		json["shopperList"].SetJsonType(JsonType.Array);
		foreach(OneShopper temp in shopperList)
		{
			json["shopperList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Coming : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Coming_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string shopperUidList = "";

	public Request_Shopper_Coming()
	{
		shopperUidList = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUidList"] = shopperUidList.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(shopperUidList))
		{
			json["c"] = shopperUidList.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Shopper_Coming : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Coming_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Shopper_Coming()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Coming Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Response_Shopper_Change : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Change_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneShopper shopper = new OneShopper();
	public int flag = 0;

	public Response_Shopper_Change()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopper =  new OneShopper();
		flag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopper.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				flag = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Change Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopper"] = shopper.GetJsonData();
		json["flag"] = flag;
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Chat : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Chat_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;

	public Request_Shopper_Chat()
	{
		shopperUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Chat : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Chat_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int chatSuccess = 0;

	public Response_Shopper_Chat()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		chatSuccess = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				chatSuccess = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Chat Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["chatSuccess"] = chatSuccess;
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Discount : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Discount_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;

	public Request_Shopper_Discount()
	{
		shopperUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Discount : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Discount_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Shopper_Discount()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Discount Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Double : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Double_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;

	public Request_Shopper_Double()
	{
		shopperUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Double : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Double_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Shopper_Double()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Double Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Refuse : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Refuse_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;

	public Request_Shopper_Refuse()
	{
		shopperUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Refuse : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Refuse_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Shopper_Refuse()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Refuse Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Checkout : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Checkout_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;

	public Request_Shopper_Checkout()
	{
		shopperUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Checkout : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Checkout_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int shopperUid = 0;
	public int shopperEquipId = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_Shopper_Checkout()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopperUid = 0;
		shopperEquipId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopperUid = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				shopperEquipId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(h_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Checkout Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopperUid"] = shopperUid;
		json["shopperEquipId"] = shopperEquipId;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Recommend : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Recommend_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;
	public string equipUid = "";

	public Request_Shopper_Recommend()
	{
		shopperUid = 0;
		equipUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		json["equipUid"] = equipUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["d"] = equipUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Shopper_Recommend : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Recommend_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Shopper_Recommend()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Recommend Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Queue : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Queue_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;
	public string equipUid = "";
	public int equipId = 0;

	public Request_Shopper_Queue()
	{
		shopperUid = 0;
		equipUid = String.Empty;
		equipId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		json["equipUid"] = equipUid.ToString();
		json["equipId"] = equipId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		if (!String.IsNullOrEmpty(equipUid))
		{
			json["d"] = equipUid.ToString();
		}
		if (0 != equipId)
		{
			json["e"] = equipId;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Queue : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Queue_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int shopperUid = 0;
	public string equipUid = "";
	public int equipId = 0;

	public Response_Shopper_Queue()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopperUid = 0;
		equipUid = String.Empty;
		equipId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopperUid = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				equipUid = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				equipId = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Queue Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopperUid"] = shopperUid;
		json["equipUid"] = equipUid.ToString();
		json["equipId"] = equipId;
		return json.ToJson();
	}
#endif
}

public class Request_Shopper_Energy : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Shopper_Energy_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int shopperUid = 0;
	public int furnitureUid = 0;
	public int petUid = 0;

	public Request_Shopper_Energy()
	{
		shopperUid = 0;
		furnitureUid = 0;
		petUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["shopperUid"] = shopperUid;
		json["furnitureUid"] = furnitureUid;
		json["petUid"] = petUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != shopperUid)
		{
			json["c"] = shopperUid;
		}

		if (0 != furnitureUid)
		{
			json["d"] = furnitureUid;
		}

		if (0 != petUid)
		{
			json["e"] = petUid;
		}

		return json.ToJson();
	}
}

public class Response_Shopper_Energy : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Shopper_Energy_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int shopperUid = 0;
	public int energy = 0;

	public Response_Shopper_Energy()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		shopperUid = 0;
		energy = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				shopperUid = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				energy = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Shopper_Energy Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["shopperUid"] = shopperUid;
		json["energy"] = energy;
		return json.ToJson();
	}
#endif
}


public class PiggyBankData
{
	public int Id = 0;
	public int currOrderIndex = 0;
	public int piggyBankState = 0; //enum EPiggyBankState
	public int stateCoolTime = 0;
	public int targetGoldCount = 0;
	public int hasBeenStored = 0;
	public int startMinLevel = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["Id"] = Id;
		json["currOrderIndex"] = currOrderIndex;
		json["piggyBankState"] = piggyBankState;
		json["stateCoolTime"] = stateCoolTime;
		json["targetGoldCount"] = targetGoldCount;
		json["hasBeenStored"] = hasBeenStored;
		json["startMinLevel"] = startMinLevel;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != Id)
		{
			json["b"] = Id;
		}

		if (0 != currOrderIndex)
		{
			json["c"] = currOrderIndex;
		}

		if (0 != piggyBankState)
		{
			json["d"] = piggyBankState;
		}

		if (0 != stateCoolTime)
		{
			json["e"] = stateCoolTime;
		}

		if (0 != targetGoldCount)
		{
			json["f"] = targetGoldCount;
		}

		if (0 != hasBeenStored)
		{
			json["g"] = hasBeenStored;
		}

		if (0 != startMinLevel)
		{
			json["h"] = startMinLevel;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				Id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				currOrderIndex = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				piggyBankState = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				stateCoolTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				targetGoldCount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				hasBeenStored = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				startMinLevel = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("PiggyBankData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_PiggyBank_ClickData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PiggyBank_ClickData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int level = 0;

	public Request_PiggyBank_ClickData()
	{
		level = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["level"] = level;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != level)
		{
			json["c"] = level;
		}

		return json.ToJson();
	}
}

public class Response_PiggyBank_BaseData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PiggyBank_BaseData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public PiggyBankData piggyBankData = new PiggyBankData();

	public Response_PiggyBank_BaseData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		piggyBankData =  new PiggyBankData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				piggyBankData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PiggyBank_BaseData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["piggyBankData"] = piggyBankData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_PiggyBank_Props : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PiggyBank_Props_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int receive = 0;

	public Request_PiggyBank_Props()
	{
		receive = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["receive"] = receive;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != receive)
		{
			json["c"] = receive;
		}

		return json.ToJson();
	}
}

public class Response_PiggyBank_Props : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PiggyBank_Props_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public PiggyBankData piggyBankData = new PiggyBankData();
	public int rewardType = 0;
	public int rewardId = 0;
	public int rewardNum = 0;

	public Response_PiggyBank_Props()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		piggyBankData =  new PiggyBankData();
		rewardType = 0;
		rewardId = 0;
		rewardNum = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				piggyBankData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				rewardType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				rewardId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				rewardNum = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PiggyBank_Props Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["piggyBankData"] = piggyBankData.GetJsonData();
		json["rewardType"] = rewardType;
		json["rewardId"] = rewardId;
		json["rewardNum"] = rewardNum;
		return json.ToJson();
	}
#endif
}



public class ChatContent
{
	public int chatIndex = 0;
	public int chatTime = 0;
	public string userId = "";
	public string nickName = "";
	public int gender = 0; //enum EGender
	public int level = 0;
	public RoleDress roleDress = new RoleDress();
	public string content = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["chatIndex"] = chatIndex;
		json["chatTime"] = chatTime;
		json["userId"] = userId.ToString();
		json["nickName"] = nickName.ToString();
		json["gender"] = gender;
		json["level"] = level;
		json["roleDress"] = roleDress.GetJsonData();
		json["content"] = content.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != chatIndex)
		{
			json["b"] = chatIndex;
		}

		if (0 != chatTime)
		{
			json["c"] = chatTime;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["d"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(nickName))
		{
			json["e"] = nickName.ToString();
		}
		if (0 != gender)
		{
			json["f"] = gender;
		}

		if (0 != level)
		{
			json["g"] = level;
		}

		json["h"] = roleDress.Encode();
		if (!String.IsNullOrEmpty(content))
		{
			json["i"] = content.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				chatIndex = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				chatTime = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				userId = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				nickName = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				gender = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				level = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				roleDress.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				content = json["i"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ChatContent Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Chat_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Chat_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int chatChannel = 0; //enum EChatChannel
	public int chatIndex = 0;
	public int unionChatIndex = 0;
	public string unionId = "";
	public int systemMsgIndex = 0;

	public Request_Chat_Data()
	{
		chatChannel = 0;
		chatIndex = 0;
		unionChatIndex = 0;
		unionId = String.Empty;
		systemMsgIndex = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["chatChannel"] = chatChannel;
		json["chatIndex"] = chatIndex;
		json["unionChatIndex"] = unionChatIndex;
		json["unionId"] = unionId.ToString();
		json["systemMsgIndex"] = systemMsgIndex;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != chatChannel)
		{
			json["c"] = chatChannel;
		}

		if (0 != chatIndex)
		{
			json["d"] = chatIndex;
		}

		if (0 != unionChatIndex)
		{
			json["e"] = unionChatIndex;
		}

		if (!String.IsNullOrEmpty(unionId))
		{
			json["f"] = unionId.ToString();
		}
		if (0 != systemMsgIndex)
		{
			json["g"] = systemMsgIndex;
		}

		return json.ToJson();
	}
}

public class Response_Chat_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Chat_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int chatChannel = 0; //enum EChatChannel
	public List<ChatContent> chatList = new List<ChatContent>();

	public Response_Chat_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		chatChannel = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				chatChannel = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					ChatContent temp = new ChatContent();
					temp.Decode(g_item);
					chatList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Chat_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["chatChannel"] = chatChannel;
		json["chatList"] = new JsonData();
		json["chatList"].SetJsonType(JsonType.Array);
		foreach(ChatContent temp in chatList)
		{
			json["chatList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Chat_Send : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Chat_Send_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int chatChannel = 0; //enum EChatChannel
	public string content = "";

	public Request_Chat_Send()
	{
		chatChannel = 0;
		content = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["chatChannel"] = chatChannel;
		json["content"] = content.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != chatChannel)
		{
			json["c"] = chatChannel;
		}

		if (!String.IsNullOrEmpty(content))
		{
			json["d"] = content.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Chat_Send : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Chat_Send_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Chat_Send()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Chat_Send Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Union_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string unionId = "";

	public Request_Union_Data()
	{
		unionId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["unionId"] = unionId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(unionId))
		{
			json["c"] = unionId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionDetailData unionDetailData = new UnionDetailData();

	public Response_Union_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionDetailData =  new UnionDetailData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionDetailData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionDetailData"] = unionDetailData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_List : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_List_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string searchName = "";

	public Request_Union_List()
	{
		searchName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["searchName"] = searchName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(searchName))
		{
			json["c"] = searchName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_List : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_List_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<UnionSimpleData> unionList = new List<UnionSimpleData>();

	public Response_Union_List()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					UnionSimpleData temp = new UnionSimpleData();
					temp.Decode(f_item);
					unionList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_List Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionList"] = new JsonData();
		json["unionList"].SetJsonType(JsonType.Array);
		foreach(UnionSimpleData temp in unionList)
		{
			json["unionList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Union_Create : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_Create_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string unionName = "";
	public int enterSetting = 0; //enum EUnionEnter
	public int enterLevel = 0;
	public int useGem = 0;
	public long enterInvest = 0;

	public Request_Union_Create()
	{
		unionName = String.Empty;
		enterSetting = 0;
		enterLevel = 0;
		useGem = 0;
		enterInvest = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["unionName"] = unionName.ToString();
		json["enterSetting"] = enterSetting;
		json["enterLevel"] = enterLevel;
		json["useGem"] = useGem;
		json["enterInvest"] = enterInvest;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(unionName))
		{
			json["c"] = unionName.ToString();
		}
		if (0 != enterSetting)
		{
			json["d"] = enterSetting;
		}

		if (0 != enterLevel)
		{
			json["e"] = enterLevel;
		}

		if (0 != useGem)
		{
			json["f"] = useGem;
		}

		if (0 != enterInvest)
		{
			json["g"] = enterInvest;
		}

		return json.ToJson();
	}
}

public class Response_Union_Create : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_Create_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionData unionData = new UnionData();

	public Response_Union_Create()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionData =  new UnionData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_Create Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionData"] = unionData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_Enter : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_Enter_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string unionId = "";

	public Request_Union_Enter()
	{
		unionId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["unionId"] = unionId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(unionId))
		{
			json["c"] = unionId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_Enter : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_Enter_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string unionId = "";
	public UnionData unionData = new UnionData();

	public Response_Union_Enter()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionId = String.Empty;
		unionData =  new UnionData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				unionData.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_Enter Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionId"] = unionId.ToString();
		json["unionData"] = unionData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_Leave : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_Leave_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_Leave()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_Leave : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_Leave_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionData unionData = new UnionData();

	public Response_Union_Leave()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionData =  new UnionData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_Leave Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionData"] = unionData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_UserData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_UserData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string searchName = "";

	public Request_Union_UserData()
	{
		searchName = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["searchName"] = searchName.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(searchName))
		{
			json["c"] = searchName.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_UserData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_UserData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<UnionMemberData> unionMemberList = new List<UnionMemberData>();

	public Response_Union_UserData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					UnionMemberData temp = new UnionMemberData();
					temp.Decode(f_item);
					unionMemberList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_UserData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionMemberList"] = new JsonData();
		json["unionMemberList"].SetJsonType(JsonType.Array);
		foreach(UnionMemberData temp in unionMemberList)
		{
			json["unionMemberList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Union_KickOut : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_KickOut_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string targetId = "";

	public Request_Union_KickOut()
	{
		targetId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["targetId"] = targetId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(targetId))
		{
			json["c"] = targetId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_KickOut : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_KickOut_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionDetailData unionDetailData = new UnionDetailData();

	public Response_Union_KickOut()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionDetailData =  new UnionDetailData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionDetailData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_KickOut Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionDetailData"] = unionDetailData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_SetInfo : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_SetInfo_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int enterSetting = 0; //enum EUnionEnter
	public int enterLevel = 0;
	public string unionName = "";
	public long enterInvest = 0;

	public Request_Union_SetInfo()
	{
		enterSetting = 0;
		enterLevel = 0;
		unionName = String.Empty;
		enterInvest = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["enterSetting"] = enterSetting;
		json["enterLevel"] = enterLevel;
		json["unionName"] = unionName.ToString();
		json["enterInvest"] = enterInvest;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != enterSetting)
		{
			json["c"] = enterSetting;
		}

		if (0 != enterLevel)
		{
			json["d"] = enterLevel;
		}

		if (!String.IsNullOrEmpty(unionName))
		{
			json["e"] = unionName.ToString();
		}
		if (0 != enterInvest)
		{
			json["f"] = enterInvest;
		}

		return json.ToJson();
	}
}

public class Response_Union_SetInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_SetInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionDetailData unionDetailData = new UnionDetailData();

	public Response_Union_SetInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionDetailData =  new UnionDetailData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionDetailData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_SetInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionDetailData"] = unionDetailData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_SetUserRole : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_SetUserRole_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string targetId = "";
	public int unionJob = 0; //enum EUnionJob

	public Request_Union_SetUserRole()
	{
		targetId = String.Empty;
		unionJob = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["targetId"] = targetId.ToString();
		json["unionJob"] = unionJob;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(targetId))
		{
			json["c"] = targetId.ToString();
		}
		if (0 != unionJob)
		{
			json["d"] = unionJob;
		}

		return json.ToJson();
	}
}

public class Response_Union_SetUserRole : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_SetUserRole_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public UnionDetailData unionDetailData = new UnionDetailData();
	public string userId = "";

	public Response_Union_SetUserRole()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionDetailData =  new UnionDetailData();
		userId = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				unionDetailData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				userId = json["g"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_SetUserRole Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionDetailData"] = unionDetailData.GetJsonData();
		json["userId"] = userId.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Union_SearchUserData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_SearchUserData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string userId = "";

	public Request_Union_SearchUserData()
	{
		userId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["userId"] = userId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_SearchUserData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_SearchUserData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string userId = "";
	public UserData userData = new UserData();
	public UnionData unionData = new UnionData();
	public int lastActiveTime = 0;
	public OnePetInfo petInfo = new OnePetInfo();
	public VIPInfo vipData = new VIPInfo();

	public Response_Union_SearchUserData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userId = String.Empty;
		userData =  new UserData();
		unionData =  new UnionData();
		lastActiveTime = 0;
		petInfo =  new OnePetInfo();
		vipData =  new VIPInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				userData.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				unionData.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				lastActiveTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				petInfo.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				vipData.Decode(json["k"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_SearchUserData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userId"] = userId.ToString();
		json["userData"] = userData.GetJsonData();
		json["unionData"] = unionData.GetJsonData();
		json["lastActiveTime"] = lastActiveTime;
		json["petInfo"] = petInfo.GetJsonData();
		json["vipData"] = vipData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Union_MessageInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_MessageInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<UnionMsgData> unionMsgList = new List<UnionMsgData>();
	public int unionMsgUid = 0;

	public Response_Union_MessageInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionMsgUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					UnionMsgData temp = new UnionMsgData();
					temp.Decode(f_item);
					unionMsgList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionMsgUid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_MessageInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionMsgList"] = new JsonData();
		json["unionMsgList"].SetJsonType(JsonType.Array);
		foreach(UnionMsgData temp in unionMsgList)
		{
			json["unionMsgList"].Add(temp.GetJsonData());
		}
		json["unionMsgUid"] = unionMsgUid;
		return json.ToJson();
	}
#endif
}

public class Request_Union_MessageInfoRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_MessageInfoRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int unionMsgUid = 0;

	public Request_Union_MessageInfoRefresh()
	{
		unionMsgUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["unionMsgUid"] = unionMsgUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != unionMsgUid)
		{
			json["c"] = unionMsgUid;
		}

		return json.ToJson();
	}
}

public class Response_Union_MessageInfoRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_MessageInfoRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<UnionMsgData> unionMsgList = new List<UnionMsgData>();
	public int unionMsgUid = 0;

	public Response_Union_MessageInfoRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionMsgUid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					UnionMsgData temp = new UnionMsgData();
					temp.Decode(f_item);
					unionMsgList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionMsgUid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_MessageInfoRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["unionMsgList"] = new JsonData();
		json["unionMsgList"].SetJsonType(JsonType.Array);
		foreach(UnionMsgData temp in unionMsgList)
		{
			json["unionMsgList"].Add(temp.GetJsonData());
		}
		json["unionMsgUid"] = unionMsgUid;
		return json.ToJson();
	}
#endif
}


public class OneUnionMemberHelpData
{
	public string userId = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["userId"] = userId.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(userId))
		{
			json["b"] = userId.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				userId = json["b"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUnionMemberHelpData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneHelpData
{
	public int furnitureUid = 0;
	public int furnitureId = 0;
	public int furnitureType = 0; //enum EHelpFurnitureType
	public string userId = "";
	public string name = "";
	public int gender = 0;
	public int userLevel = 0;
	public RoleDress userDress = new RoleDress();
	public int level = 0;
	public string unionId = "";
	public int showFlag = 0;
	public int stateEndTime = 0;
	public List<OneUnionMemberHelpData> memberList = new List<OneUnionMemberHelpData>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["furnitureUid"] = furnitureUid;
		json["furnitureId"] = furnitureId;
		json["furnitureType"] = furnitureType;
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["gender"] = gender;
		json["userLevel"] = userLevel;
		json["userDress"] = userDress.GetJsonData();
		json["level"] = level;
		json["unionId"] = unionId.ToString();
		json["showFlag"] = showFlag;
		json["stateEndTime"] = stateEndTime;
		json["memberList"] = new JsonData();
		json["memberList"].SetJsonType(JsonType.Array);
		foreach(OneUnionMemberHelpData temp in memberList)
		{
			json["memberList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != furnitureUid)
		{
			json["b"] = furnitureUid;
		}

		if (0 != furnitureId)
		{
			json["c"] = furnitureId;
		}

		if (0 != furnitureType)
		{
			json["d"] = furnitureType;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["e"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(name))
		{
			json["f"] = name.ToString();
		}
		if (0 != gender)
		{
			json["g"] = gender;
		}

		if (0 != userLevel)
		{
			json["h"] = userLevel;
		}

		json["i"] = userDress.Encode();
		if (0 != level)
		{
			json["j"] = level;
		}

		if (!String.IsNullOrEmpty(unionId))
		{
			json["k"] = unionId.ToString();
		}
		if (0 != showFlag)
		{
			json["l"] = showFlag;
		}

		if (0 != stateEndTime)
		{
			json["m"] = stateEndTime;
		}

		json["n"] = new JsonData();
		json["n"].SetJsonType(JsonType.Array);
		foreach(OneUnionMemberHelpData temp in memberList)
		{
			json["n"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				furnitureUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				furnitureId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				furnitureType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				userId = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				name = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				gender = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				userLevel = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userDress.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				level = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				unionId = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				showFlag = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				stateEndTime = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				foreach(JsonData n_item in json["n"])
				{
					OneUnionMemberHelpData temp = new OneUnionMemberHelpData();
					temp.Decode(n_item);
					memberList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneHelpData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Union_MemberHelpList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_MemberHelpList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_MemberHelpList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_MemberHelpList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_MemberHelpList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneHelpData> helpList = new List<OneHelpData>();
	public int furnitureFlag = 0;
	public int shopFlag = 0;

	public Response_Union_MemberHelpList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		furnitureFlag = 0;
		shopFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneHelpData temp = new OneHelpData();
					temp.Decode(f_item);
					helpList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				furnitureFlag = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				shopFlag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_MemberHelpList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["helpList"] = new JsonData();
		json["helpList"].SetJsonType(JsonType.Array);
		foreach(OneHelpData temp in helpList)
		{
			json["helpList"].Add(temp.GetJsonData());
		}
		json["furnitureFlag"] = furnitureFlag;
		json["shopFlag"] = shopFlag;
		return json.ToJson();
	}
#endif
}

public class Request_Union_SetHelp : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_SetHelp_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int furnitureUid = 0;

	public Request_Union_SetHelp()
	{
		furnitureUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["furnitureUid"] = furnitureUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != furnitureUid)
		{
			json["c"] = furnitureUid;
		}

		return json.ToJson();
	}
}

public class Response_Union_SetHelp : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_SetHelp_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneHelpData> helpList = new List<OneHelpData>();
	public int furnitureFlag = 0;
	public int shopFlag = 0;

	public Response_Union_SetHelp()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		furnitureFlag = 0;
		shopFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneHelpData temp = new OneHelpData();
					temp.Decode(f_item);
					helpList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				furnitureFlag = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				shopFlag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_SetHelp Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["helpList"] = new JsonData();
		json["helpList"].SetJsonType(JsonType.Array);
		foreach(OneHelpData temp in helpList)
		{
			json["helpList"].Add(temp.GetJsonData());
		}
		json["furnitureFlag"] = furnitureFlag;
		json["shopFlag"] = shopFlag;
		return json.ToJson();
	}
#endif
}

public class Request_Union_HelpMember : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_HelpMember_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int furnitureUid = 0;
	public string userId = "";
	public int helpAll = 0;
	public int useGem = 0;

	public Request_Union_HelpMember()
	{
		furnitureUid = 0;
		userId = String.Empty;
		helpAll = 0;
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["furnitureUid"] = furnitureUid;
		json["userId"] = userId.ToString();
		json["helpAll"] = helpAll;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != furnitureUid)
		{
			json["c"] = furnitureUid;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["d"] = userId.ToString();
		}
		if (0 != helpAll)
		{
			json["e"] = helpAll;
		}

		if (0 != useGem)
		{
			json["f"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Union_HelpMember : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_HelpMember_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneHelpData> helpList = new List<OneHelpData>();

	public Response_Union_HelpMember()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneHelpData temp = new OneHelpData();
					temp.Decode(f_item);
					helpList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_HelpMember Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["helpList"] = new JsonData();
		json["helpList"].SetJsonType(JsonType.Array);
		foreach(OneHelpData temp in helpList)
		{
			json["helpList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}





public class OneUnionTaskData
{
	public int taskUid = 0;
	public int taskId = 0;
	public string userId = "";
	public string name = "";
	public int gender = 0;
	public RoleDress userDress = new RoleDress();
	public int level = 0;
	public int state = 0; //enum EUnionTaskState
	public int endTime = 0;
	public int point = 0;
	public int taskTargetId = 0;
	public int process = 0;
	public int limit = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["taskUid"] = taskUid;
		json["taskId"] = taskId;
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		json["level"] = level;
		json["state"] = state;
		json["endTime"] = endTime;
		json["point"] = point;
		json["taskTargetId"] = taskTargetId;
		json["process"] = process;
		json["limit"] = limit;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != taskUid)
		{
			json["b"] = taskUid;
		}

		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["d"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(name))
		{
			json["e"] = name.ToString();
		}
		if (0 != gender)
		{
			json["f"] = gender;
		}

		json["g"] = userDress.Encode();
		if (0 != level)
		{
			json["h"] = level;
		}

		if (0 != state)
		{
			json["i"] = state;
		}

		if (0 != endTime)
		{
			json["j"] = endTime;
		}

		if (0 != point)
		{
			json["k"] = point;
		}

		if (0 != taskTargetId)
		{
			json["l"] = taskTargetId;
		}

		if (0 != process)
		{
			json["m"] = process;
		}

		if (0 != limit)
		{
			json["n"] = limit;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				taskUid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				taskId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				userId = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				name = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				gender = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userDress.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				level = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				state = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				endTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				point = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				taskTargetId = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				process = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				limit = Int32.Parse(json["n"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUnionTaskData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Union_TaskList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_TaskList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_TaskList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_TaskList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_TaskList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionTaskData> taskList = new List<OneUnionTaskData>();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_TaskList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionTaskData temp = new OneUnionTaskData();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				unionTaskLevel = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				unionTaskPoint = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_TaskList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneUnionTaskData temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_TaskResult : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_TaskResult_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_TaskResult()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_TaskResult : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_TaskResult_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int showFlag = 0;
	public int unionTaskLevel = 0;
	public string userId = "";
	public string name = "";
	public int gender = 0;
	public int userPoint = 0;
	public int unionPoint = 0;
	public RoleDress userDress = new RoleDress();

	public Response_Union_TaskResult()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		showFlag = 0;
		unionTaskLevel = 0;
		userId = String.Empty;
		name = String.Empty;
		gender = 0;
		userPoint = 0;
		unionPoint = 0;
		userDress =  new RoleDress();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				showFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				unionTaskLevel = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				userId = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				name = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				gender = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				userPoint = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				unionPoint = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				userDress.Decode(json["m"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_TaskResult Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["showFlag"] = showFlag;
		json["unionTaskLevel"] = unionTaskLevel;
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["gender"] = gender;
		json["userPoint"] = userPoint;
		json["unionPoint"] = unionPoint;
		json["userDress"] = userDress.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Union_KickOutMessage : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_KickOutMessage_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_KickOutMessage()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_KickOutMessage : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_KickOutMessage_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int showFlag = 0;

	public Response_Union_KickOutMessage()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		showFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				showFlag = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_KickOutMessage Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["showFlag"] = showFlag;
		return json.ToJson();
	}
#endif
}

public class Request_Union_CheckUnionTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_CheckUnionTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskUid = 0;

	public Request_Union_CheckUnionTask()
	{
		taskUid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskUid"] = taskUid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskUid)
		{
			json["c"] = taskUid;
		}

		return json.ToJson();
	}
}

public class Response_Union_CheckUnionTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_CheckUnionTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneUnionTaskData taskData = new OneUnionTaskData();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_CheckUnionTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		taskData =  new OneUnionTaskData();
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				taskData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				unionTaskLevel = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				unionTaskPoint = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_CheckUnionTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskData"] = taskData.GetJsonData();
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_StartUnionTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_StartUnionTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_Union_StartUnionTask()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_Union_StartUnionTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_StartUnionTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneUnionTaskData taskData = new OneUnionTaskData();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_StartUnionTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		taskData =  new OneUnionTaskData();
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				taskData.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				unionTaskLevel = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				unionTaskPoint = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_StartUnionTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskData"] = taskData.GetJsonData();
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_CancelUnionTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_CancelUnionTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_Union_CancelUnionTask()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_Union_CancelUnionTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_CancelUnionTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionTaskData> taskList = new List<OneUnionTaskData>();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_CancelUnionTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionTaskData temp = new OneUnionTaskData();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				unionTaskLevel = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				unionTaskPoint = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_CancelUnionTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneUnionTaskData temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Response_Union_UnionTaskChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_UnionTaskChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionTaskData> taskList = new List<OneUnionTaskData>();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_UnionTaskChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionTaskData temp = new OneUnionTaskData();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				unionTaskLevel = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				unionTaskPoint = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_UnionTaskChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneUnionTaskData temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_RewardUnionTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_RewardUnionTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_Union_RewardUnionTask()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_Union_RewardUnionTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_RewardUnionTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionTaskData> taskList = new List<OneUnionTaskData>();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_RewardUnionTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionTaskData temp = new OneUnionTaskData();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				unionTaskLevel = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				unionTaskPoint = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_RewardUnionTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneUnionTaskData temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_AccelUnionTask : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_AccelUnionTask_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_Union_AccelUnionTask()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_Union_AccelUnionTask : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_AccelUnionTask_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionTaskData> taskList = new List<OneUnionTaskData>();
	public int unionTaskRefreshTime = 0;
	public int unionTaskCancelCoolTime = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public int unionTaskLevel = 0;
	public int unionTaskPoint = 0;

	public Response_Union_AccelUnionTask()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionTaskRefreshTime = 0;
		unionTaskCancelCoolTime = 0;
		unionTaskLevel = 0;
		unionTaskPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionTaskData temp = new OneUnionTaskData();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionTaskRefreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionTaskCancelCoolTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				unionTaskLevel = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				unionTaskPoint = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_AccelUnionTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneUnionTaskData temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["unionTaskRefreshTime"] = unionTaskRefreshTime;
		json["unionTaskCancelCoolTime"] = unionTaskCancelCoolTime;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["unionTaskLevel"] = unionTaskLevel;
		json["unionTaskPoint"] = unionTaskPoint;
		return json.ToJson();
	}
#endif
}

public class OneUnionRankData
{
	public string userId = "";
	public string name = "";
	public int gender = 0;
	public RoleDress userDress = new RoleDress();
	public int point = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		json["point"] = point;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(userId))
		{
			json["b"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(name))
		{
			json["c"] = name.ToString();
		}
		if (0 != gender)
		{
			json["d"] = gender;
		}

		json["e"] = userDress.Encode();
		if (0 != point)
		{
			json["f"] = point;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				userId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				name = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				gender = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				userDress.Decode(json["e"]);
			}

			if (oKeys.Contains("f"))
			{
				point = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUnionRankData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Union_UnionTaskRankList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_UnionTaskRankList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_UnionTaskRankList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_UnionTaskRankList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_UnionTaskRankList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionRankData> rankList = new List<OneUnionRankData>();

	public Response_Union_UnionTaskRankList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionRankData temp = new OneUnionRankData();
					temp.Decode(f_item);
					rankList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_UnionTaskRankList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rankList"] = new JsonData();
		json["rankList"].SetJsonType(JsonType.Array);
		foreach(OneUnionRankData temp in rankList)
		{
			json["rankList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}





public class OneUnionScienceData
{
	public int level = 0;
	public int type = 0; //enum EUnionScienceType

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["level"] = level;
		json["type"] = type;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != level)
		{
			json["b"] = level;
		}

		if (0 != type)
		{
			json["c"] = type;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				level = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				type = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUnionScienceData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Union_ScienceList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_ScienceList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public List<OneUnionScienceData> scienceList = new List<OneUnionScienceData>();

	public Request_Union_ScienceList()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["scienceList"] = new JsonData();
		json["scienceList"].SetJsonType(JsonType.Array);
		foreach(OneUnionScienceData temp in scienceList)
		{
			json["scienceList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneUnionScienceData temp in scienceList)
		{
			json["c"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_Union_ScienceList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_ScienceList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionScienceData> scienceList = new List<OneUnionScienceData>();
	public int unionPoint = 0;

	public Response_Union_ScienceList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionScienceData temp = new OneUnionScienceData();
					temp.Decode(f_item);
					scienceList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_ScienceList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["scienceList"] = new JsonData();
		json["scienceList"].SetJsonType(JsonType.Array);
		foreach(OneUnionScienceData temp in scienceList)
		{
			json["scienceList"].Add(temp.GetJsonData());
		}
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_ScienceUpgrade : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_ScienceUpgrade_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int type = 0;

	public Request_Union_ScienceUpgrade()
	{
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != type)
		{
			json["c"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Union_ScienceUpgrade : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_ScienceUpgrade_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionScienceData> scienceList = new List<OneUnionScienceData>();
	public int unionPoint = 0;

	public Response_Union_ScienceUpgrade()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionScienceData temp = new OneUnionScienceData();
					temp.Decode(f_item);
					scienceList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_ScienceUpgrade Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["scienceList"] = new JsonData();
		json["scienceList"].SetJsonType(JsonType.Array);
		foreach(OneUnionScienceData temp in scienceList)
		{
			json["scienceList"].Add(temp.GetJsonData());
		}
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class OneUnionScienceSkillData
{
	public int level = 0;
	public int type = 0; //enum EUnionScienceType
	public int skillType = 0; //enum EUnionScienceSkillType
	public int time = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["level"] = level;
		json["type"] = type;
		json["skillType"] = skillType;
		json["time"] = time;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != level)
		{
			json["b"] = level;
		}

		if (0 != type)
		{
			json["c"] = type;
		}

		if (0 != skillType)
		{
			json["d"] = skillType;
		}

		if (0 != time)
		{
			json["e"] = time;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				level = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				type = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				skillType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				time = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneUnionScienceSkillData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Union_ScienceSkillList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_ScienceSkillList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Union_ScienceSkillList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Union_ScienceSkillList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_ScienceSkillList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneUnionScienceSkillData> skillList = new List<OneUnionScienceSkillData>();
	public int unionPoint = 0;

	public Response_Union_ScienceSkillList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneUnionScienceSkillData temp = new OneUnionScienceSkillData();
					temp.Decode(f_item);
					skillList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_ScienceSkillList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["skillList"] = new JsonData();
		json["skillList"].SetJsonType(JsonType.Array);
		foreach(OneUnionScienceSkillData temp in skillList)
		{
			json["skillList"].Add(temp.GetJsonData());
		}
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_ScienceSkillUse : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_ScienceSkillUse_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int type = 0;

	public Request_Union_ScienceSkillUse()
	{
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != type)
		{
			json["c"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Union_ScienceSkillUse : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_ScienceSkillUse_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneUnionScienceSkillData skill = new OneUnionScienceSkillData();
	public int unionPoint = 0;

	public Response_Union_ScienceSkillUse()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		skill =  new OneUnionScienceSkillData();
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				skill.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_ScienceSkillUse Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["skill"] = skill.GetJsonData();
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_ScienceSkillRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_ScienceSkillRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int type = 0;

	public Request_Union_ScienceSkillRefresh()
	{
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != type)
		{
			json["c"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Union_ScienceSkillRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_ScienceSkillRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneUnionScienceSkillData skill = new OneUnionScienceSkillData();
	public int unionPoint = 0;

	public Response_Union_ScienceSkillRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		skill =  new OneUnionScienceSkillData();
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				skill.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_ScienceSkillRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["skill"] = skill.GetJsonData();
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Union_Impeach : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Union_Impeach_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string userId = "";

	public Request_Union_Impeach()
	{
		userId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["userId"] = userId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Union_Impeach : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Union_Impeach_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string userId = "";
	public UnionDetailData unionDetailData = new UnionDetailData();

	public Response_Union_Impeach()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userId = String.Empty;
		unionDetailData =  new UnionDetailData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				unionDetailData.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Union_Impeach Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userId"] = userId.ToString();
		json["unionDetailData"] = unionDetailData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class BoothItemData
{
	public int boothFileId = 0;
	public int itemType = 0;
	public int itemId = 0;
	public int itemQuality = 0;
	public int remainNum = 0;
	public int marketType = 0;
	public int moneyType = 0;
	public int exchangeNum = 0;
	public int timeIndex = 0;
	public int remainTime = 0;
	public int unitPrice = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["boothFileId"] = boothFileId;
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["itemQuality"] = itemQuality;
		json["remainNum"] = remainNum;
		json["marketType"] = marketType;
		json["moneyType"] = moneyType;
		json["exchangeNum"] = exchangeNum;
		json["timeIndex"] = timeIndex;
		json["remainTime"] = remainTime;
		json["unitPrice"] = unitPrice;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != boothFileId)
		{
			json["b"] = boothFileId;
		}

		if (0 != itemType)
		{
			json["c"] = itemType;
		}

		if (0 != itemId)
		{
			json["d"] = itemId;
		}

		if (0 != itemQuality)
		{
			json["e"] = itemQuality;
		}

		if (0 != remainNum)
		{
			json["f"] = remainNum;
		}

		if (0 != marketType)
		{
			json["g"] = marketType;
		}

		if (0 != moneyType)
		{
			json["h"] = moneyType;
		}

		if (0 != exchangeNum)
		{
			json["i"] = exchangeNum;
		}

		if (0 != timeIndex)
		{
			json["j"] = timeIndex;
		}

		if (0 != remainTime)
		{
			json["k"] = remainTime;
		}

		if (0 != unitPrice)
		{
			json["l"] = unitPrice;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				boothFileId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				itemId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				itemQuality = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				remainNum = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				marketType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				moneyType = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				exchangeNum = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				timeIndex = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				remainTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				unitPrice = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("BoothItemData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class SellOneItem
{
	public int putAwayTime = 0;
	public int itemType = 0;
	public int itemId = 0;
	public int itemQuality = 0;
	public int marketNum = 0;
	public int goldPrice = 0;
	public int gemPrice = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["putAwayTime"] = putAwayTime;
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["itemQuality"] = itemQuality;
		json["marketNum"] = marketNum;
		json["goldPrice"] = goldPrice;
		json["gemPrice"] = gemPrice;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != putAwayTime)
		{
			json["b"] = putAwayTime;
		}

		if (0 != itemType)
		{
			json["c"] = itemType;
		}

		if (0 != itemId)
		{
			json["d"] = itemId;
		}

		if (0 != itemQuality)
		{
			json["e"] = itemQuality;
		}

		if (0 != marketNum)
		{
			json["f"] = marketNum;
		}

		if (0 != goldPrice)
		{
			json["g"] = goldPrice;
		}

		if (0 != gemPrice)
		{
			json["h"] = gemPrice;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				putAwayTime = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				itemId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				itemQuality = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				marketNum = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				goldPrice = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				gemPrice = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("SellOneItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ListedItems
{
	public int itemType = 0;
	public int itemId = 0;
	public int itemQuality = 0;
	public int itemNum = 0;
	public int buyOrSell = 0;
	public int moneyType = 0;
	public int unitPrice = 0;
	public int timeIndex = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["itemQuality"] = itemQuality;
		json["itemNum"] = itemNum;
		json["buyOrSell"] = buyOrSell;
		json["moneyType"] = moneyType;
		json["unitPrice"] = unitPrice;
		json["timeIndex"] = timeIndex;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemType)
		{
			json["b"] = itemType;
		}

		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != itemQuality)
		{
			json["d"] = itemQuality;
		}

		if (0 != itemNum)
		{
			json["e"] = itemNum;
		}

		if (0 != buyOrSell)
		{
			json["f"] = buyOrSell;
		}

		if (0 != moneyType)
		{
			json["g"] = moneyType;
		}

		if (0 != unitPrice)
		{
			json["h"] = unitPrice;
		}

		if (0 != timeIndex)
		{
			json["i"] = timeIndex;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemType = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				itemQuality = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				itemNum = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				buyOrSell = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				moneyType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unitPrice = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				timeIndex = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ListedItems Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Market_ListedItems : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_ListedItems_Cmd;
	public MsgHead msgHead = new MsgHead();
	public ListedItems listedItems = new ListedItems();

	public Request_Market_ListedItems()
	{
		listedItems =  new ListedItems();
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["listedItems"] = listedItems.GetJsonData();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		json["c"] = listedItems.Encode();
		return json.ToJson();
	}
}

public class Request_Market_DealWith : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_DealWith_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int dealLocation = 0;

	public Request_Market_DealWith()
	{
		dealLocation = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["dealLocation"] = dealLocation;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != dealLocation)
		{
			json["c"] = dealLocation;
		}

		return json.ToJson();
	}
}

public class Request_Market_OffShelf : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_OffShelf_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int offShelf = 0;

	public Request_Market_OffShelf()
	{
		offShelf = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["offShelf"] = offShelf;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != offShelf)
		{
			json["c"] = offShelf;
		}

		return json.ToJson();
	}
}

public class Request_Market_OneItemList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_OneItemList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buyOrSell = 0;
	public int itemType = 0;
	public List<int> subTypesList = new List<int>();
	public List<int> levelsList = new List<int>();
	public List<int> qualityList = new List<int>();
	public int findAllItem = 0;

	public Request_Market_OneItemList()
	{
		buyOrSell = 0;
		itemType = 0;
		findAllItem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buyOrSell"] = buyOrSell;
		json["itemType"] = itemType;
		json["subTypesList"] = new JsonData();
		json["subTypesList"].SetJsonType(JsonType.Array);
		foreach(int temp in subTypesList)
		{
			json["subTypesList"].Add(temp);
		}
		json["levelsList"] = new JsonData();
		json["levelsList"].SetJsonType(JsonType.Array);
		foreach(int temp in levelsList)
		{
			json["levelsList"].Add(temp);
		}
		json["qualityList"] = new JsonData();
		json["qualityList"].SetJsonType(JsonType.Array);
		foreach(int temp in qualityList)
		{
			json["qualityList"].Add(temp);
		}
		json["findAllItem"] = findAllItem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buyOrSell)
		{
			json["c"] = buyOrSell;
		}

		if (0 != itemType)
		{
			json["d"] = itemType;
		}

		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(int temp in subTypesList)
		{
			json["e"].Add(temp);
		}
		json["f"] = new JsonData();
		json["f"].SetJsonType(JsonType.Array);
		foreach(int temp in levelsList)
		{
			json["f"].Add(temp);
		}
		json["g"] = new JsonData();
		json["g"].SetJsonType(JsonType.Array);
		foreach(int temp in qualityList)
		{
			json["g"].Add(temp);
		}
		if (0 != findAllItem)
		{
			json["h"] = findAllItem;
		}

		return json.ToJson();
	}
}

public class Response_Market_OneItemList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Market_OneItemList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int buyOrSell = 0;
	public int itemType = 0;
	public List<int> itemSort = new List<int>();
	public List<SellOneItem> sellOneItemList = new List<SellOneItem>();
	public int findAllItem = 0;

	public Response_Market_OneItemList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		buyOrSell = 0;
		itemType = 0;
		findAllItem = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				buyOrSell = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				itemType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					int temp = Int32.Parse(h_item.ToString());
					itemSort.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					SellOneItem temp = new SellOneItem();
					temp.Decode(i_item);
					sellOneItemList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				findAllItem = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Market_OneItemList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["buyOrSell"] = buyOrSell;
		json["itemType"] = itemType;
		json["itemSort"] = new JsonData();
		json["itemSort"].SetJsonType(JsonType.Array);
		foreach(int temp in itemSort)
		{
			json["itemSort"].Add(temp);
		}
		json["sellOneItemList"] = new JsonData();
		json["sellOneItemList"].SetJsonType(JsonType.Array);
		foreach(SellOneItem temp in sellOneItemList)
		{
			json["sellOneItemList"].Add(temp.GetJsonData());
		}
		json["findAllItem"] = findAllItem;
		return json.ToJson();
	}
#endif
}

public class Request_Market_OneItemRef : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_OneItemRef_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buyOrSell = 0;
	public int itemType = 0;
	public int itemId = 0;
	public int itemQuality = 0;

	public Request_Market_OneItemRef()
	{
		buyOrSell = 0;
		itemType = 0;
		itemId = 0;
		itemQuality = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buyOrSell"] = buyOrSell;
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["itemQuality"] = itemQuality;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buyOrSell)
		{
			json["c"] = buyOrSell;
		}

		if (0 != itemType)
		{
			json["d"] = itemType;
		}

		if (0 != itemId)
		{
			json["e"] = itemId;
		}

		if (0 != itemQuality)
		{
			json["f"] = itemQuality;
		}

		return json.ToJson();
	}
}

public class Response_Market_OneItemRef : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Market_OneItemRef_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int buyOrSell = 0;
	public SellOneItem sellOneItem = new SellOneItem();

	public Response_Market_OneItemRef()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		buyOrSell = 0;
		sellOneItem =  new SellOneItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				buyOrSell = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				sellOneItem.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Market_OneItemRef Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["buyOrSell"] = buyOrSell;
		json["sellOneItem"] = sellOneItem.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Market_BuyOrSellOne : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_BuyOrSellOne_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buyOrSell = 0;
	public int itemType = 0;
	public int itemId = 0;
	public int itemQuality = 0;
	public int moneyType = 0;
	public int costMoney = 0;
	public string payload = "";

	public Request_Market_BuyOrSellOne()
	{
		buyOrSell = 0;
		itemType = 0;
		itemId = 0;
		itemQuality = 0;
		moneyType = 0;
		costMoney = 0;
		payload = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buyOrSell"] = buyOrSell;
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["itemQuality"] = itemQuality;
		json["moneyType"] = moneyType;
		json["costMoney"] = costMoney;
		json["payload"] = payload.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buyOrSell)
		{
			json["c"] = buyOrSell;
		}

		if (0 != itemType)
		{
			json["d"] = itemType;
		}

		if (0 != itemId)
		{
			json["e"] = itemId;
		}

		if (0 != itemQuality)
		{
			json["f"] = itemQuality;
		}

		if (0 != moneyType)
		{
			json["g"] = moneyType;
		}

		if (0 != costMoney)
		{
			json["h"] = costMoney;
		}

		if (!String.IsNullOrEmpty(payload))
		{
			json["i"] = payload.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Market_BuyOrSellOne : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Market_BuyOrSellOne_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int yesOrNo = 0;
	public int comeWhere = 0;
	public int reason = 0;
	public SellOneItem sellOneItem = new SellOneItem();
	public string payload = "";

	public Response_Market_BuyOrSellOne()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		yesOrNo = 0;
		comeWhere = 0;
		reason = 0;
		sellOneItem =  new SellOneItem();
		payload = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				yesOrNo = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				comeWhere = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				reason = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				sellOneItem.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				payload = json["j"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Market_BuyOrSellOne Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["yesOrNo"] = yesOrNo;
		json["comeWhere"] = comeWhere;
		json["reason"] = reason;
		json["sellOneItem"] = sellOneItem.GetJsonData();
		json["payload"] = payload.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Market_BoothCount : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_BoothCount_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int money = 0;
	public int slot = 0;

	public Request_Market_BoothCount()
	{
		money = 0;
		slot = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["money"] = money;
		json["slot"] = slot;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != money)
		{
			json["c"] = money;
		}

		if (0 != slot)
		{
			json["d"] = slot;
		}

		return json.ToJson();
	}
}

public class Response_Market_BoothCount : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Market_BoothCount_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int Count = 0;

	public Response_Market_BoothCount()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		Count = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				Count = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Market_BoothCount Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["Count"] = Count;
		return json.ToJson();
	}
#endif
}

public class Request_Market_BoothData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_BoothData_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_Market_BoothData()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_Market_BoothData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Market_BoothData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int Count = 0;
	public List<BoothItemData> saleList = new List<BoothItemData>();

	public Response_Market_BoothData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		Count = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				Count = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					BoothItemData temp = new BoothItemData();
					temp.Decode(g_item);
					saleList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Market_BoothData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["Count"] = Count;
		json["saleList"] = new JsonData();
		json["saleList"].SetJsonType(JsonType.Array);
		foreach(BoothItemData temp in saleList)
		{
			json["saleList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Market_UpdatePut : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Market_UpdatePut_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int boothFileId = 0;

	public Request_Market_UpdatePut()
	{
		boothFileId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["boothFileId"] = boothFileId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != boothFileId)
		{
			json["c"] = boothFileId;
		}

		return json.ToJson();
	}
}





public class JackpotData
{
	public int id = 0;
	public int prizeId = 0;
	public int prizeCount = 0;
	public int type = 0;
	public int rarity = 0;
	public string name = "";
	public int prizeState = 0; //enum JackpotDataState
	public int boxNum = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["prizeId"] = prizeId;
		json["prizeCount"] = prizeCount;
		json["type"] = type;
		json["rarity"] = rarity;
		json["name"] = name.ToString();
		json["prizeState"] = prizeState;
		json["boxNum"] = boxNum;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != prizeId)
		{
			json["c"] = prizeId;
		}

		if (0 != prizeCount)
		{
			json["d"] = prizeCount;
		}

		if (0 != type)
		{
			json["e"] = type;
		}

		if (0 != rarity)
		{
			json["f"] = rarity;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["g"] = name.ToString();
		}
		if (0 != prizeState)
		{
			json["h"] = prizeState;
		}

		if (0 != boxNum)
		{
			json["i"] = boxNum;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				prizeId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				prizeCount = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				type = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				rarity = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				name = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				prizeState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				boxNum = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("JackpotData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class GrandTotal
{
	public int id = 0;
	public int rewardGroup = 0;
	public int rewardSequence = 0;
	public int cumulativeTimes = 0;
	public int rewardType1 = 0;
	public string rewardName1 = "";
	public int rewardItemId1 = 0;
	public int rewardItemNum1 = 0;
	public int rewardType2 = 0;
	public string rewardName2 = "";
	public int rewardItemId2 = 0;
	public int rewardItemNum2 = 0;
	public int rewardType3 = 0;
	public string rewardName3 = "";
	public int rewardItemId3 = 0;
	public int rewardItemNum3 = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["rewardGroup"] = rewardGroup;
		json["rewardSequence"] = rewardSequence;
		json["cumulativeTimes"] = cumulativeTimes;
		json["rewardType1"] = rewardType1;
		json["rewardName1"] = rewardName1.ToString();
		json["rewardItemId1"] = rewardItemId1;
		json["rewardItemNum1"] = rewardItemNum1;
		json["rewardType2"] = rewardType2;
		json["rewardName2"] = rewardName2.ToString();
		json["rewardItemId2"] = rewardItemId2;
		json["rewardItemNum2"] = rewardItemNum2;
		json["rewardType3"] = rewardType3;
		json["rewardName3"] = rewardName3.ToString();
		json["rewardItemId3"] = rewardItemId3;
		json["rewardItemNum3"] = rewardItemNum3;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != rewardGroup)
		{
			json["c"] = rewardGroup;
		}

		if (0 != rewardSequence)
		{
			json["d"] = rewardSequence;
		}

		if (0 != cumulativeTimes)
		{
			json["e"] = cumulativeTimes;
		}

		if (0 != rewardType1)
		{
			json["f"] = rewardType1;
		}

		if (!String.IsNullOrEmpty(rewardName1))
		{
			json["g"] = rewardName1.ToString();
		}
		if (0 != rewardItemId1)
		{
			json["h"] = rewardItemId1;
		}

		if (0 != rewardItemNum1)
		{
			json["i"] = rewardItemNum1;
		}

		if (0 != rewardType2)
		{
			json["j"] = rewardType2;
		}

		if (!String.IsNullOrEmpty(rewardName2))
		{
			json["k"] = rewardName2.ToString();
		}
		if (0 != rewardItemId2)
		{
			json["l"] = rewardItemId2;
		}

		if (0 != rewardItemNum2)
		{
			json["m"] = rewardItemNum2;
		}

		if (0 != rewardType3)
		{
			json["n"] = rewardType3;
		}

		if (!String.IsNullOrEmpty(rewardName3))
		{
			json["o"] = rewardName3.ToString();
		}
		if (0 != rewardItemId3)
		{
			json["p"] = rewardItemId3;
		}

		if (0 != rewardItemNum3)
		{
			json["q"] = rewardItemNum3;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				rewardGroup = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				rewardSequence = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				cumulativeTimes = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				rewardType1 = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rewardName1 = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				rewardItemId1 = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				rewardItemNum1 = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				rewardType2 = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				rewardName2 = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				rewardItemId2 = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				rewardItemNum2 = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				rewardType3 = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				rewardName3 = json["o"].ToString();
			}
			if (oKeys.Contains("p"))
			{
				rewardItemId3 = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				rewardItemNum3 = Int32.Parse(json["q"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("GrandTotal Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class JackpotDataRefresh
{
	public int zeroTime = 0;
	public int prizePoolStatus = 0; //enum PrizePoolStatus
	public int gemConsume = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["zeroTime"] = zeroTime;
		json["prizePoolStatus"] = prizePoolStatus;
		json["gemConsume"] = gemConsume;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != zeroTime)
		{
			json["b"] = zeroTime;
		}

		if (0 != prizePoolStatus)
		{
			json["c"] = prizePoolStatus;
		}

		if (0 != gemConsume)
		{
			json["d"] = gemConsume;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				zeroTime = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				prizePoolStatus = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				gemConsume = Int32.Parse(json["d"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("JackpotDataRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Recording
{
	public int recordingTime = 0;
	public int recordingContent = 0;
	public int recordingType = 0;
	public string name = "";
	public int type = 0;
	public int count = 0;
	public int quality = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["recordingTime"] = recordingTime;
		json["recordingContent"] = recordingContent;
		json["recordingType"] = recordingType;
		json["name"] = name.ToString();
		json["type"] = type;
		json["count"] = count;
		json["quality"] = quality;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != recordingTime)
		{
			json["b"] = recordingTime;
		}

		if (0 != recordingContent)
		{
			json["c"] = recordingContent;
		}

		if (0 != recordingType)
		{
			json["d"] = recordingType;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["e"] = name.ToString();
		}
		if (0 != type)
		{
			json["f"] = type;
		}

		if (0 != count)
		{
			json["g"] = count;
		}

		if (0 != quality)
		{
			json["h"] = quality;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				recordingTime = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				recordingContent = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				recordingType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				name = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				type = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				count = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				quality = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Recording Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Jackpot_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Jackpot_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int uid = 0;

	public Request_Jackpot_Data()
	{
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != uid)
		{
			json["c"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Jackpot_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Jackpot_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<JackpotData> prizeBaseData = new List<JackpotData>();
	public int group = 0;
	public int prizePoolStatus = 0; //enum PrizePoolStatus
	public int zeroTime = 0;
	public int freeTime = 0;
	public int freeState = 0;
	public int gemConsume = 0;
	public int grandTotalNum = 0;
	public int props = 0;
	public List<Recording> recording = new List<Recording>();
	public GrandTotal grandTotal = new GrandTotal();
	public GrandTotal nextGrandTotal = new GrandTotal();

	public Response_Jackpot_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		group = 0;
		prizePoolStatus = 0;
		zeroTime = 0;
		freeTime = 0;
		freeState = 0;
		gemConsume = 0;
		grandTotalNum = 0;
		props = 0;
		grandTotal =  new GrandTotal();
		nextGrandTotal =  new GrandTotal();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					JackpotData temp = new JackpotData();
					temp.Decode(f_item);
					prizeBaseData.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				group = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				prizePoolStatus = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				zeroTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				freeTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				freeState = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				gemConsume = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				grandTotalNum = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				props = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				foreach(JsonData o_item in json["o"])
				{
					Recording temp = new Recording();
					temp.Decode(o_item);
					recording.Add(temp);
				}
			}
			if (oKeys.Contains("p"))
			{
				grandTotal.Decode(json["p"]);
			}

			if (oKeys.Contains("q"))
			{
				nextGrandTotal.Decode(json["q"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Jackpot_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["prizeBaseData"] = new JsonData();
		json["prizeBaseData"].SetJsonType(JsonType.Array);
		foreach(JackpotData temp in prizeBaseData)
		{
			json["prizeBaseData"].Add(temp.GetJsonData());
		}
		json["group"] = group;
		json["prizePoolStatus"] = prizePoolStatus;
		json["zeroTime"] = zeroTime;
		json["freeTime"] = freeTime;
		json["freeState"] = freeState;
		json["gemConsume"] = gemConsume;
		json["grandTotalNum"] = grandTotalNum;
		json["props"] = props;
		json["recording"] = new JsonData();
		json["recording"].SetJsonType(JsonType.Array);
		foreach(Recording temp in recording)
		{
			json["recording"].Add(temp.GetJsonData());
		}
		json["grandTotal"] = grandTotal.GetJsonData();
		json["nextGrandTotal"] = nextGrandTotal.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class Request_Jackpot_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Jackpot_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int gem = 0;
	public int useType = 0; //enum DrawMoney

	public Request_Jackpot_Refresh()
	{
		gem = 0;
		useType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["gem"] = gem;
		json["useType"] = useType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != gem)
		{
			json["c"] = gem;
		}

		if (0 != useType)
		{
			json["d"] = useType;
		}

		return json.ToJson();
	}
}

public class Response_Jackpot_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Jackpot_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public JackpotDataRefresh JackpotDataRefresh = new JackpotDataRefresh();
	public List<JackpotData> prizeBaseData = new List<JackpotData>();
	public GrandTotal grandTotal = new GrandTotal();

	public Response_Jackpot_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		JackpotDataRefresh =  new JackpotDataRefresh();
		grandTotal =  new GrandTotal();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				JackpotDataRefresh.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					JackpotData temp = new JackpotData();
					temp.Decode(g_item);
					prizeBaseData.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				grandTotal.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Jackpot_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["JackpotDataRefresh"] = JackpotDataRefresh.GetJsonData();
		json["prizeBaseData"] = new JsonData();
		json["prizeBaseData"].SetJsonType(JsonType.Array);
		foreach(JackpotData temp in prizeBaseData)
		{
			json["prizeBaseData"].Add(temp.GetJsonData());
		}
		json["grandTotal"] = grandTotal.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class OneBehavior
{
	public string userId = "";
	public int optionTime = 0;
	public int type = 0; //enum EUserBehaviorType
	public string optionName = "";
	public string param = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["userId"] = userId.ToString();
		json["optionTime"] = optionTime;
		json["type"] = type;
		json["optionName"] = optionName.ToString();
		json["param"] = param.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(userId))
		{
			json["b"] = userId.ToString();
		}
		if (0 != optionTime)
		{
			json["c"] = optionTime;
		}

		if (0 != type)
		{
			json["d"] = type;
		}

		if (!String.IsNullOrEmpty(optionName))
		{
			json["e"] = optionName.ToString();
		}
		if (!String.IsNullOrEmpty(param))
		{
			json["f"] = param.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				userId = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				optionTime = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				type = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				optionName = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				param = json["f"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneBehavior Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_BehaviorCounter : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_BehaviorCounter_Cmd;
	public MsgHead msgHead = new MsgHead();
	public List<OneBehavior> list = new List<OneBehavior>();

	public Request_User_BehaviorCounter()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["list"] = new JsonData();
		json["list"].SetJsonType(JsonType.Array);
		foreach(OneBehavior temp in list)
		{
			json["list"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneBehavior temp in list)
		{
			json["c"].Add(temp.Encode());
		}
		return json.ToJson();
	}
}

public class Response_User_BehaviorCounter : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_BehaviorCounter_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_User_BehaviorCounter()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_BehaviorCounter Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_User_Lottery : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_Lottery_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int money = 0; //enum DrawMoney

	public Request_User_Lottery()
	{
		money = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["money"] = money;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != money)
		{
			json["c"] = money;
		}

		return json.ToJson();
	}
}

public class Response_User_Lottery : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_Lottery_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<JackpotData> prizeBaseData = new List<JackpotData>();
	public int prizedPropsCount = 0;
	public GrandTotal grandTotal = new GrandTotal();
	public int freeTime = 0;
	public int freeState = 0;

	public Response_User_Lottery()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		prizedPropsCount = 0;
		grandTotal =  new GrandTotal();
		freeTime = 0;
		freeState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					JackpotData temp = new JackpotData();
					temp.Decode(f_item);
					prizeBaseData.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				prizedPropsCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				grandTotal.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				freeTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				freeState = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_Lottery Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["prizeBaseData"] = new JsonData();
		json["prizeBaseData"].SetJsonType(JsonType.Array);
		foreach(JackpotData temp in prizeBaseData)
		{
			json["prizeBaseData"].Add(temp.GetJsonData());
		}
		json["prizedPropsCount"] = prizedPropsCount;
		json["grandTotal"] = grandTotal.GetJsonData();
		json["freeTime"] = freeTime;
		json["freeState"] = freeState;
		return json.ToJson();
	}
#endif
}

public class Request_User_LotteryTenth : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_LotteryTenth_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int money = 0; //enum DrawMoney

	public Request_User_LotteryTenth()
	{
		money = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["money"] = money;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != money)
		{
			json["c"] = money;
		}

		return json.ToJson();
	}
}

public class Response_User_LotteryTenth : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_LotteryTenth_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<JackpotData> prizeBaseData = new List<JackpotData>();
	public int prizedPropsCount = 0;
	public GrandTotal grandTotal = new GrandTotal();

	public Response_User_LotteryTenth()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		prizedPropsCount = 0;
		grandTotal =  new GrandTotal();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					JackpotData temp = new JackpotData();
					temp.Decode(f_item);
					prizeBaseData.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				prizedPropsCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				grandTotal.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_LotteryTenth Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["prizeBaseData"] = new JsonData();
		json["prizeBaseData"].SetJsonType(JsonType.Array);
		foreach(JackpotData temp in prizeBaseData)
		{
			json["prizeBaseData"].Add(temp.GetJsonData());
		}
		json["prizedPropsCount"] = prizedPropsCount;
		json["grandTotal"] = grandTotal.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Cumulative_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Cumulative_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int rewardId = 0;

	public Request_Cumulative_Reward()
	{
		rewardId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["rewardId"] = rewardId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != rewardId)
		{
			json["c"] = rewardId;
		}

		return json.ToJson();
	}
}

public class Response_Cumulative_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Cumulative_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int grandTotalId = 0;
	public int grandTotalNum = 0;
	public GrandTotal grandTotal = new GrandTotal();
	public GrandTotal nextGrandTotal = new GrandTotal();

	public Response_Cumulative_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		grandTotalId = 0;
		grandTotalNum = 0;
		grandTotal =  new GrandTotal();
		nextGrandTotal =  new GrandTotal();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				grandTotalId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				grandTotalNum = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				grandTotal.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				nextGrandTotal.Decode(json["i"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Cumulative_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["grandTotalId"] = grandTotalId;
		json["grandTotalNum"] = grandTotalNum;
		json["grandTotal"] = grandTotal.GetJsonData();
		json["nextGrandTotal"] = nextGrandTotal.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Roulette_Recording : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Roulette_Recording_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<Recording> recording = new List<Recording>();

	public Response_Roulette_Recording()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					Recording temp = new Recording();
					temp.Decode(f_item);
					recording.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Roulette_Recording Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["recording"] = new JsonData();
		json["recording"].SetJsonType(JsonType.Array);
		foreach(Recording temp in recording)
		{
			json["recording"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Prize_Free : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Prize_Free_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_Prize_Free()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_Prize_Free : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Prize_Free_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int freeState = 0; //enum EPrizePoolState
	public int prizePoolStatus = 0; //enum PrizePoolStatus
	public int zeroTime = 0;
	public int freeTime = 0;
	public int gemConsume = 0;

	public Response_Prize_Free()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		freeState = 0;
		prizePoolStatus = 0;
		zeroTime = 0;
		freeTime = 0;
		gemConsume = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				freeState = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				prizePoolStatus = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				zeroTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				freeTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				gemConsume = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Prize_Free Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["freeState"] = freeState;
		json["prizePoolStatus"] = prizePoolStatus;
		json["zeroTime"] = zeroTime;
		json["freeTime"] = freeTime;
		json["gemConsume"] = gemConsume;
		return json.ToJson();
	}
#endif
}


public class Request_Hero_UseHeroStatusItem : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_UseHeroStatusItem_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;
	public int heroId = 0;
	public int itemCount = 0;

	public Request_Hero_UseHeroStatusItem()
	{
		itemId = 0;
		heroId = 0;
		itemCount = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		json["heroId"] = heroId;
		json["itemCount"] = itemCount;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != heroId)
		{
			json["d"] = heroId;
		}

		if (0 != itemCount)
		{
			json["e"] = itemCount;
		}

		return json.ToJson();
	}
}

public class Response_Hero_UseHeroStatusItem : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_UseHeroStatusItem_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int itemUse = 0; //enum EItemUse
	public HeroInfo heroInfo = new HeroInfo();

	public Response_Hero_UseHeroStatusItem()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		itemUse = 0;
		heroInfo =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				itemUse = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				heroInfo.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_UseHeroStatusItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["itemUse"] = itemUse;
		json["heroInfo"] = heroInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Hero_UseEquipItem : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_UseEquipItem_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int equipId = 0;

	public Request_Hero_UseEquipItem()
	{
		equipId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipId"] = equipId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != equipId)
		{
			json["c"] = equipId;
		}

		return json.ToJson();
	}
}

public class Response_Hero_UseEquipItem : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_UseEquipItem_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int itemUse = 0; //enum EItemUse
	public int equipDrawingId = 0;

	public Response_Hero_UseEquipItem()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		itemUse = 0;
		equipDrawingId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				itemUse = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				equipDrawingId = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_UseEquipItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["itemUse"] = itemUse;
		json["equipDrawingId"] = equipDrawingId;
		return json.ToJson();
	}
#endif
}

public class Request_Hero_UseItem : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Hero_UseItem_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;
	public int heroId = 0;

	public Request_Hero_UseItem()
	{
		itemId = 0;
		heroId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		json["heroId"] = heroId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != heroId)
		{
			json["d"] = heroId;
		}

		return json.ToJson();
	}
}

public class Response_Hero_UseItem : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Hero_UseItem_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int itemUse = 0; //enum EItemUse

	public Response_Hero_UseItem()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		itemUse = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				itemUse = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Hero_UseItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["itemUse"] = itemUse;
		return json.ToJson();
	}
#endif
}




public class BuildData
{
	public int buildId = 0;
	public int buildState = 0; //enum EBuildState
	public int buildLevel = 0;
	public int buildCostCount = 0;
	public int oneSelfCostCount = 0;
	public int currentCostCount = 0;
	public int stateRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["buildId"] = buildId;
		json["buildState"] = buildState;
		json["buildLevel"] = buildLevel;
		json["buildCostCount"] = buildCostCount;
		json["oneSelfCostCount"] = oneSelfCostCount;
		json["currentCostCount"] = currentCostCount;
		json["stateRemainTime"] = stateRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != buildId)
		{
			json["b"] = buildId;
		}

		if (0 != buildState)
		{
			json["c"] = buildState;
		}

		if (0 != buildLevel)
		{
			json["d"] = buildLevel;
		}

		if (0 != buildCostCount)
		{
			json["e"] = buildCostCount;
		}

		if (0 != oneSelfCostCount)
		{
			json["f"] = oneSelfCostCount;
		}

		if (0 != currentCostCount)
		{
			json["g"] = currentCostCount;
		}

		if (0 != stateRemainTime)
		{
			json["h"] = stateRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				buildId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				buildState = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				buildLevel = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				buildCostCount = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				oneSelfCostCount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				currentCostCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				stateRemainTime = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("BuildData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_City_BuildData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_City_BuildData_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_City_BuildData()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_City_BuildData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_City_BuildData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<BuildData> buildData = new List<BuildData>();

	public Response_City_BuildData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					BuildData temp = new BuildData();
					temp.Decode(f_item);
					buildData.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_City_BuildData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["buildData"] = new JsonData();
		json["buildData"].SetJsonType(JsonType.Array);
		foreach(BuildData temp in buildData)
		{
			json["buildData"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_City_BuildCost : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_City_BuildCost_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buildId = 0;
	public int costMoneyType = 0;
	public int buildCostCount = 0;

	public Request_City_BuildCost()
	{
		buildId = 0;
		costMoneyType = 0;
		buildCostCount = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buildId"] = buildId;
		json["costMoneyType"] = costMoneyType;
		json["buildCostCount"] = buildCostCount;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buildId)
		{
			json["c"] = buildId;
		}

		if (0 != costMoneyType)
		{
			json["d"] = costMoneyType;
		}

		if (0 != buildCostCount)
		{
			json["e"] = buildCostCount;
		}

		return json.ToJson();
	}
}

public class Response_City_BuildDataChanged : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_City_BuildDataChanged_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public BuildData buildData = new BuildData();

	public Response_City_BuildDataChanged()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		buildData =  new BuildData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				buildData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_City_BuildDataChanged Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["buildData"] = buildData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class BuildTopList
{
	public string name = "";
	public int investNum = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["name"] = name.ToString();
		json["investNum"] = investNum;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(name))
		{
			json["b"] = name.ToString();
		}
		if (0 != investNum)
		{
			json["c"] = investNum;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				name = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				investNum = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("BuildTopList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_City_BuildingRankData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_City_BuildingRankData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buildId = 0;

	public Request_City_BuildingRankData()
	{
		buildId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buildId"] = buildId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buildId)
		{
			json["c"] = buildId;
		}

		return json.ToJson();
	}
}

public class Response_City_BuildingRankData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_City_BuildingRankData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<BuildTopList> buildTopList = new List<BuildTopList>();

	public Response_City_BuildingRankData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					BuildTopList temp = new BuildTopList();
					temp.Decode(f_item);
					buildTopList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_City_BuildingRankData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["buildTopList"] = new JsonData();
		json["buildTopList"].SetJsonType(JsonType.Array);
		foreach(BuildTopList temp in buildTopList)
		{
			json["buildTopList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}






public class ExploreSlot
{
	public int slotId = 0;
	public int exploreId = 0;
	public int exploringRemainTime = 0;
	public int exploreTotalTime = 0;
	public int exploreState = 0; //enum EExploringState
	public int exploreType = 0;
	public List<int> heroInfoUIds = new List<int>();
	public int useItemId = 0;
	public int slotType = 0; //enum EExploreSlotType

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["slotId"] = slotId;
		json["exploreId"] = exploreId;
		json["exploringRemainTime"] = exploringRemainTime;
		json["exploreTotalTime"] = exploreTotalTime;
		json["exploreState"] = exploreState;
		json["exploreType"] = exploreType;
		json["heroInfoUIds"] = new JsonData();
		json["heroInfoUIds"].SetJsonType(JsonType.Array);
		foreach(int temp in heroInfoUIds)
		{
			json["heroInfoUIds"].Add(temp);
		}
		json["useItemId"] = useItemId;
		json["slotType"] = slotType;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != slotId)
		{
			json["b"] = slotId;
		}

		if (0 != exploreId)
		{
			json["c"] = exploreId;
		}

		if (0 != exploringRemainTime)
		{
			json["d"] = exploringRemainTime;
		}

		if (0 != exploreTotalTime)
		{
			json["e"] = exploreTotalTime;
		}

		if (0 != exploreState)
		{
			json["f"] = exploreState;
		}

		if (0 != exploreType)
		{
			json["g"] = exploreType;
		}

		json["h"] = new JsonData();
		json["h"].SetJsonType(JsonType.Array);
		foreach(int temp in heroInfoUIds)
		{
			json["h"].Add(temp);
		}
		if (0 != useItemId)
		{
			json["i"] = useItemId;
		}

		if (0 != slotType)
		{
			json["j"] = slotType;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				slotId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				exploreId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				exploringRemainTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				exploreTotalTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				exploreState = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				exploreType = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					int temp = Int32.Parse(h_item.ToString());
					heroInfoUIds.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				useItemId = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				slotType = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ExploreSlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ExploreGroupData
{
	public int groupId = 0;
	public int level = 0;
	public int exp = 0;
	public int bossExploreState = 0; //enum EBossExploreState
	public int bossRemainTime = 0;
	public int groupState = 0;
	public int slotType = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["groupId"] = groupId;
		json["level"] = level;
		json["exp"] = exp;
		json["bossExploreState"] = bossExploreState;
		json["bossRemainTime"] = bossRemainTime;
		json["groupState"] = groupState;
		json["slotType"] = slotType;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != groupId)
		{
			json["b"] = groupId;
		}

		if (0 != level)
		{
			json["c"] = level;
		}

		if (0 != exp)
		{
			json["d"] = exp;
		}

		if (0 != bossExploreState)
		{
			json["e"] = bossExploreState;
		}

		if (0 != bossRemainTime)
		{
			json["f"] = bossRemainTime;
		}

		if (0 != groupState)
		{
			json["g"] = groupState;
		}

		if (0 != slotType)
		{
			json["h"] = slotType;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				groupId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				level = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				exp = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				bossExploreState = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				bossRemainTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				groupState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				slotType = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ExploreGroupData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Explore_BuySlot : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_BuySlot_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int useGem = 0;

	public Request_Explore_BuySlot()
	{
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != useGem)
		{
			json["c"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Explore_BuySlot : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_BuySlot_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();

	public Response_Explore_BuySlot()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_BuySlot Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Explore_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_Data_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_Explore_Data()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_Explore_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ExploreGroupData> exploreGroupData = new List<ExploreGroupData>();

	public Response_Explore_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ExploreGroupData temp = new ExploreGroupData();
					temp.Decode(f_item);
					exploreGroupData.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreGroupData"] = new JsonData();
		json["exploreGroupData"].SetJsonType(JsonType.Array);
		foreach(ExploreGroupData temp in exploreGroupData)
		{
			json["exploreGroupData"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Explore_Start : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_Start_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;
	public int exploreId = 0;
	public int exploreType = 0;
	public int useItemId = 0;
	public List<int> heroInfoUIds = new List<int>();

	public Request_Explore_Start()
	{
		exploreSlotId = 0;
		exploreId = 0;
		exploreType = 0;
		useItemId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		json["exploreId"] = exploreId;
		json["exploreType"] = exploreType;
		json["useItemId"] = useItemId;
		json["heroInfoUIds"] = new JsonData();
		json["heroInfoUIds"].SetJsonType(JsonType.Array);
		foreach(int temp in heroInfoUIds)
		{
			json["heroInfoUIds"].Add(temp);
		}
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		if (0 != exploreId)
		{
			json["d"] = exploreId;
		}

		if (0 != exploreType)
		{
			json["e"] = exploreType;
		}

		if (0 != useItemId)
		{
			json["f"] = useItemId;
		}

		json["g"] = new JsonData();
		json["g"].SetJsonType(JsonType.Array);
		foreach(int temp in heroInfoUIds)
		{
			json["g"].Add(temp);
		}
		return json.ToJson();
	}
}

public class Response_Explore_Start : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_Start_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public List<HeroInfo> heroInfo = new List<HeroInfo>();

	public Response_Explore_Start()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(g_item);
					heroInfo.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_Start Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Explore_End : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_End_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;

	public Request_Explore_End()
	{
		exploreSlotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		return json.ToJson();
	}
}

public class Response_Explore_End : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_End_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public int exploreId = 0;
	public int resultState = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public List<HeroBrokenEquip> brokeEquipList = new List<HeroBrokenEquip>();
	public int getMoney = 0;
	public ExploreGroupData exploreGroupData = new ExploreGroupData();
	public List<HeroInfo> heroInfo = new List<HeroInfo>();
	public CombatReport combatReport = new CombatReport();

	public Response_Explore_End()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
		exploreId = 0;
		resultState = 0;
		getMoney = 0;
		exploreGroupData =  new ExploreGroupData();
		combatReport =  new CombatReport();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				exploreId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				resultState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					HeroBrokenEquip temp = new HeroBrokenEquip();
					temp.Decode(j_item);
					brokeEquipList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				getMoney = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				exploreGroupData.Decode(json["l"]);
			}

			if (oKeys.Contains("m"))
			{
				foreach(JsonData m_item in json["m"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(m_item);
					heroInfo.Add(temp);
				}
			}
			if (oKeys.Contains("n"))
			{
				combatReport.Decode(json["n"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_End Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["exploreId"] = exploreId;
		json["resultState"] = resultState;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["brokeEquipList"] = new JsonData();
		json["brokeEquipList"].SetJsonType(JsonType.Array);
		foreach(HeroBrokenEquip temp in brokeEquipList)
		{
			json["brokeEquipList"].Add(temp.GetJsonData());
		}
		json["getMoney"] = getMoney;
		json["exploreGroupData"] = exploreGroupData.GetJsonData();
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		json["combatReport"] = combatReport.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Explore_RewardVip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_RewardVip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;

	public Request_Explore_RewardVip()
	{
		exploreSlotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		return json.ToJson();
	}
}

public class Response_Explore_RewardVip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_RewardVip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public Response_Explore_RewardVip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_RewardVip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Explore_Unlock : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_Unlock_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int group = 0;
	public int useGem = 0;

	public Request_Explore_Unlock()
	{
		group = 0;
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["group"] = group;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != group)
		{
			json["c"] = group;
		}

		if (0 != useGem)
		{
			json["d"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_Explore_Unlock : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_Unlock_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreGroupData exploreGroupData = new ExploreGroupData();

	public Response_Explore_Unlock()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreGroupData =  new ExploreGroupData();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreGroupData.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_Unlock Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreGroupData"] = exploreGroupData.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_ExploreSlot_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_ExploreSlot_Data_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_ExploreSlot_Data()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_ExploreSlot_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_ExploreSlot_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ExploreSlot> exploreSlotList = new List<ExploreSlot>();

	public Response_ExploreSlot_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ExploreSlot temp = new ExploreSlot();
					temp.Decode(f_item);
					exploreSlotList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_ExploreSlot_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlotList"] = new JsonData();
		json["exploreSlotList"].SetJsonType(JsonType.Array);
		foreach(ExploreSlot temp in exploreSlotList)
		{
			json["exploreSlotList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Explore_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_Explore_Refresh()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_Explore_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlotList = new ExploreSlot();

	public Response_Explore_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlotList =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlotList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlotList"] = exploreSlotList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Explore_Immediately : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Explore_Immediately_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_Explore_Immediately()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_Explore_Immediately : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Explore_Immediately_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();

	public Response_Explore_Immediately()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Explore_Immediately Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class ExclusiveData
{
	public int itemId = 0;
	public int isUnlock = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["itemId"] = itemId;
		json["isUnlock"] = isUnlock;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != itemId)
		{
			json["b"] = itemId;
		}

		if (0 != isUnlock)
		{
			json["c"] = isUnlock;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				itemId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				isUnlock = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ExclusiveData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class TreasureBox
{
	public int boxGroupId = 0;
	public int boxItemId = 0;
	public int boxCount = 0;
	public int keyId = 0;
	public int keyCount = 0;
	public int costGem = 0;
	public List<ExclusiveData> exclusiveData = new List<ExclusiveData>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["boxGroupId"] = boxGroupId;
		json["boxItemId"] = boxItemId;
		json["boxCount"] = boxCount;
		json["keyId"] = keyId;
		json["keyCount"] = keyCount;
		json["costGem"] = costGem;
		json["exclusiveData"] = new JsonData();
		json["exclusiveData"].SetJsonType(JsonType.Array);
		foreach(ExclusiveData temp in exclusiveData)
		{
			json["exclusiveData"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != boxGroupId)
		{
			json["b"] = boxGroupId;
		}

		if (0 != boxItemId)
		{
			json["c"] = boxItemId;
		}

		if (0 != boxCount)
		{
			json["d"] = boxCount;
		}

		if (0 != keyId)
		{
			json["e"] = keyId;
		}

		if (0 != keyCount)
		{
			json["f"] = keyCount;
		}

		if (0 != costGem)
		{
			json["g"] = costGem;
		}

		json["h"] = new JsonData();
		json["h"].SetJsonType(JsonType.Array);
		foreach(ExclusiveData temp in exclusiveData)
		{
			json["h"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				boxGroupId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				boxItemId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				boxCount = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				keyId = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				keyCount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				costGem = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					ExclusiveData temp = new ExclusiveData();
					temp.Decode(h_item);
					exclusiveData.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("TreasureBox Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_TreasureBox_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_TreasureBox_Data_Cmd;
	public MsgHead msgHead = new MsgHead();

	public Request_TreasureBox_Data()
	{
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		return json.ToJson();
	}
}

public class Response_TreasureBox_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_TreasureBox_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<TreasureBox> treasureBox = new List<TreasureBox>();

	public Response_TreasureBox_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					TreasureBox temp = new TreasureBox();
					temp.Decode(f_item);
					treasureBox.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_TreasureBox_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["treasureBox"] = new JsonData();
		json["treasureBox"].SetJsonType(JsonType.Array);
		foreach(TreasureBox temp in treasureBox)
		{
			json["treasureBox"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_TreasureBox_Open : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_TreasureBox_Open_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int boxGroupId = 0;
	public int useGem = 0;

	public Request_TreasureBox_Open()
	{
		boxGroupId = 0;
		useGem = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["boxGroupId"] = boxGroupId;
		json["useGem"] = useGem;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != boxGroupId)
		{
			json["c"] = boxGroupId;
		}

		if (0 != useGem)
		{
			json["d"] = useGem;
		}

		return json.ToJson();
	}
}

public class Response_TreasureBox_Open : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_TreasureBox_Open_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public TreasureBox treasureBox = new TreasureBox();
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();

	public Response_TreasureBox_Open()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		treasureBox =  new TreasureBox();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				treasureBox.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_TreasureBox_Open Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["treasureBox"] = treasureBox.GetJsonData();
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}


public class OneMailDetail
{
	public int lang = 0; //enum ELangType
	public string mailSender = "";
	public string mailReceiver = "";
	public string mailTitle = "";
	public string mailContent = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["lang"] = lang;
		json["mailSender"] = mailSender.ToString();
		json["mailReceiver"] = mailReceiver.ToString();
		json["mailTitle"] = mailTitle.ToString();
		json["mailContent"] = mailContent.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != lang)
		{
			json["b"] = lang;
		}

		if (!String.IsNullOrEmpty(mailSender))
		{
			json["c"] = mailSender.ToString();
		}
		if (!String.IsNullOrEmpty(mailReceiver))
		{
			json["d"] = mailReceiver.ToString();
		}
		if (!String.IsNullOrEmpty(mailTitle))
		{
			json["e"] = mailTitle.ToString();
		}
		if (!String.IsNullOrEmpty(mailContent))
		{
			json["f"] = mailContent.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				lang = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				mailSender = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				mailReceiver = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				mailTitle = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mailContent = json["f"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneMailDetail Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneMail
{
	public int mailId = 0;
	public int createTime = 0;
	public int expireTime = 0;
	public int mailStatus = 0; //enum EMailStatus
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public List<OneMailDetail> detailList = new List<OneMailDetail>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["mailId"] = mailId;
		json["createTime"] = createTime;
		json["expireTime"] = expireTime;
		json["mailStatus"] = mailStatus;
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["detailList"] = new JsonData();
		json["detailList"].SetJsonType(JsonType.Array);
		foreach(OneMailDetail temp in detailList)
		{
			json["detailList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != mailId)
		{
			json["b"] = mailId;
		}

		if (0 != createTime)
		{
			json["c"] = createTime;
		}

		if (0 != expireTime)
		{
			json["d"] = expireTime;
		}

		if (0 != mailStatus)
		{
			json["e"] = mailStatus;
		}

		json["f"] = new JsonData();
		json["f"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["f"].Add(temp.Encode());
		}
		json["g"] = new JsonData();
		json["g"].SetJsonType(JsonType.Array);
		foreach(OneMailDetail temp in detailList)
		{
			json["g"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				mailId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				createTime = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				expireTime = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				mailStatus = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(f_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneMailDetail temp = new OneMailDetail();
					temp.Decode(g_item);
					detailList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneMail Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Mail_List : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Mail_List_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int mailId = 0;

	public Request_Mail_List()
	{
		mailId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["mailId"] = mailId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != mailId)
		{
			json["c"] = mailId;
		}

		return json.ToJson();
	}
}

public class Response_Mail_List : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Mail_List_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneMail> mailList = new List<OneMail>();

	public Response_Mail_List()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneMail temp = new OneMail();
					temp.Decode(f_item);
					mailList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Mail_List Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mailList"] = new JsonData();
		json["mailList"].SetJsonType(JsonType.Array);
		foreach(OneMail temp in mailList)
		{
			json["mailList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Mail_Read : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Mail_Read_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int mailId = 0;

	public Request_Mail_Read()
	{
		mailId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["mailId"] = mailId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != mailId)
		{
			json["c"] = mailId;
		}

		return json.ToJson();
	}
}

public class Response_Mail_Read : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Mail_Read_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int mailId = 0;

	public Response_Mail_Read()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		mailId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mailId = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Mail_Read Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mailId"] = mailId;
		return json.ToJson();
	}
#endif
}

public class Request_Mail_Claimed : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Mail_Claimed_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int mailId = 0;

	public Request_Mail_Claimed()
	{
		mailId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["mailId"] = mailId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != mailId)
		{
			json["c"] = mailId;
		}

		return json.ToJson();
	}
}

public class Response_Mail_Claimed : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Mail_Claimed_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneMail> mailList = new List<OneMail>();
	public List<OneRewardItem> itemList = new List<OneRewardItem>();

	public Response_Mail_Claimed()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneMail temp = new OneMail();
					temp.Decode(f_item);
					mailList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					itemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Mail_Claimed Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mailList"] = new JsonData();
		json["mailList"].SetJsonType(JsonType.Array);
		foreach(OneMail temp in mailList)
		{
			json["mailList"].Add(temp.GetJsonData());
		}
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Mail_Delete : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Mail_Delete_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int mailId = 0;

	public Request_Mail_Delete()
	{
		mailId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["mailId"] = mailId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != mailId)
		{
			json["c"] = mailId;
		}

		return json.ToJson();
	}
}

public class Response_Mail_Delete : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Mail_Delete_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int mailId = 0;

	public Response_Mail_Delete()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		mailId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				mailId = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Mail_Delete Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["mailId"] = mailId;
		return json.ToJson();
	}
#endif
}

public class Request_Mail_Feedback : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Mail_Feedback_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int osType = 0; //enum EOsType
	public string ver = "";
	public string feedback = "";

	public Request_Mail_Feedback()
	{
		osType = 0;
		ver = String.Empty;
		feedback = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["osType"] = osType;
		json["ver"] = ver.ToString();
		json["feedback"] = feedback.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != osType)
		{
			json["c"] = osType;
		}

		if (!String.IsNullOrEmpty(ver))
		{
			json["d"] = ver.ToString();
		}
		if (!String.IsNullOrEmpty(feedback))
		{
			json["e"] = feedback.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Mail_Feedback : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Mail_Feedback_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Mail_Feedback()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Mail_Feedback Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class DailyGift
{
	public int opening = 0;
	public int nextTime = 0;
	public int id = 0;
	public int itemType = 0; //enum EItemType
	public int itemId = 0;
	public int count = 0;
	public int nextId = 0;
	public int totalGiftCount = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["opening"] = opening;
		json["nextTime"] = nextTime;
		json["id"] = id;
		json["itemType"] = itemType;
		json["itemId"] = itemId;
		json["count"] = count;
		json["nextId"] = nextId;
		json["totalGiftCount"] = totalGiftCount;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != opening)
		{
			json["b"] = opening;
		}

		if (0 != nextTime)
		{
			json["c"] = nextTime;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		if (0 != itemType)
		{
			json["e"] = itemType;
		}

		if (0 != itemId)
		{
			json["f"] = itemId;
		}

		if (0 != count)
		{
			json["g"] = count;
		}

		if (0 != nextId)
		{
			json["h"] = nextId;
		}

		if (0 != totalGiftCount)
		{
			json["i"] = totalGiftCount;
		}

		json["j"] = new JsonData();
		json["j"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["j"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				opening = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				nextTime = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				id = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				itemType = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				itemId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				count = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				nextId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				totalGiftCount = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DailyGift Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Activity_List : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_List_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Activity_List()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Activity_List : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_List_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public DailyGift dailyGift = new DailyGift();

	public Response_Activity_List()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		dailyGift =  new DailyGift();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				dailyGift.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_List Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dailyGift"] = dailyGift.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Activity_DailyGiftReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_DailyGiftReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Activity_DailyGiftReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Activity_DailyGiftReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_DailyGiftReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public DailyGift dailyGift = new DailyGift();

	public Response_Activity_DailyGiftReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		dailyGift =  new DailyGift();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(f_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				dailyGift.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_DailyGiftReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["dailyGift"] = dailyGift.GetJsonData();
		return json.ToJson();
	}
#endif
}



public class OneDayTask
{
	public int id = 0;
	public int param = 0;
	public int limit = 0;
	public int state = 0; //enum ESevenDayTaskState
	public int reward1Id = 0;
	public int reward2Id = 0;
	public int reward3Id = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["param"] = param;
		json["limit"] = limit;
		json["state"] = state;
		json["reward1Id"] = reward1Id;
		json["reward2Id"] = reward2Id;
		json["reward3Id"] = reward3Id;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != param)
		{
			json["c"] = param;
		}

		if (0 != limit)
		{
			json["d"] = limit;
		}

		if (0 != state)
		{
			json["e"] = state;
		}

		if (0 != reward1Id)
		{
			json["f"] = reward1Id;
		}

		if (0 != reward2Id)
		{
			json["g"] = reward2Id;
		}

		if (0 != reward3Id)
		{
			json["h"] = reward3Id;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				param = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				limit = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				state = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				reward1Id = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				reward2Id = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				reward3Id = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneDayTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class SevenDayTask
{
	public int taskListId = 0;
	public int taskListState = 0; //enum ESevenDayTaskState
	public int taskListRewardId = 0;
	public List<OneDayTask> taskList = new List<OneDayTask>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["taskListId"] = taskListId;
		json["taskListState"] = taskListState;
		json["taskListRewardId"] = taskListRewardId;
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OneDayTask temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != taskListId)
		{
			json["b"] = taskListId;
		}

		if (0 != taskListState)
		{
			json["c"] = taskListState;
		}

		if (0 != taskListRewardId)
		{
			json["d"] = taskListRewardId;
		}

		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(OneDayTask temp in taskList)
		{
			json["e"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				taskListId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				taskListState = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				taskListRewardId = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				foreach(JsonData e_item in json["e"])
				{
					OneDayTask temp = new OneDayTask();
					temp.Decode(e_item);
					taskList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("SevenDayTask Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}


public class PayProduct
{
	public int priceId = 0;
	public string monetaryUnit = "";
	public int money = 0;
	public string productId = "";
	public int payActivityType = 0; //enum EPayActivityType
	public int payActivityId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["priceId"] = priceId;
		json["monetaryUnit"] = monetaryUnit.ToString();
		json["money"] = money;
		json["productId"] = productId.ToString();
		json["payActivityType"] = payActivityType;
		json["payActivityId"] = payActivityId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != priceId)
		{
			json["b"] = priceId;
		}

		if (!String.IsNullOrEmpty(monetaryUnit))
		{
			json["c"] = monetaryUnit.ToString();
		}
		if (0 != money)
		{
			json["d"] = money;
		}

		if (!String.IsNullOrEmpty(productId))
		{
			json["e"] = productId.ToString();
		}
		if (0 != payActivityType)
		{
			json["f"] = payActivityType;
		}

		if (0 != payActivityId)
		{
			json["g"] = payActivityId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				priceId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				monetaryUnit = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				money = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				productId = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				payActivityType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				payActivityId = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("PayProduct Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Activity_SevenDayCheck : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_SevenDayCheck_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Activity_SevenDayCheck()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Activity_SevenDayCheck : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_SevenDayCheck_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<SevenDayTask> sevenDayList = new List<SevenDayTask>();
	public int refreshTime = 0;
	public int nowDay = 0;
	public int sevenDayFlag = 0;
	public PayProduct payProduct = new PayProduct();

	public Response_Activity_SevenDayCheck()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		refreshTime = 0;
		nowDay = 0;
		sevenDayFlag = 0;
		payProduct =  new PayProduct();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					SevenDayTask temp = new SevenDayTask();
					temp.Decode(f_item);
					sevenDayList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				refreshTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				nowDay = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				sevenDayFlag = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				payProduct.Decode(json["j"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_SevenDayCheck Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["sevenDayList"] = new JsonData();
		json["sevenDayList"].SetJsonType(JsonType.Array);
		foreach(SevenDayTask temp in sevenDayList)
		{
			json["sevenDayList"].Add(temp.GetJsonData());
		}
		json["refreshTime"] = refreshTime;
		json["nowDay"] = nowDay;
		json["sevenDayFlag"] = sevenDayFlag;
		json["payProduct"] = payProduct.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Activity_SevenDayReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_SevenDayReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int sevenDayTaskId = 0;

	public Request_Activity_SevenDayReward()
	{
		sevenDayTaskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["sevenDayTaskId"] = sevenDayTaskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != sevenDayTaskId)
		{
			json["c"] = sevenDayTaskId;
		}

		return json.ToJson();
	}
}

public class Response_Activity_SevenDayReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_SevenDayReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneDayTask sevenDayTask = new OneDayTask();
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();

	public Response_Activity_SevenDayReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		sevenDayTask =  new OneDayTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				sevenDayTask.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_SevenDayReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["sevenDayTask"] = sevenDayTask.GetJsonData();
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Activity_SevenDayListReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_SevenDayListReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int sevenDayListId = 0;

	public Request_Activity_SevenDayListReward()
	{
		sevenDayListId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["sevenDayListId"] = sevenDayListId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != sevenDayListId)
		{
			json["c"] = sevenDayListId;
		}

		return json.ToJson();
	}
}

public class Response_Activity_SevenDayListReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_SevenDayListReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public SevenDayTask sevenDayInfo = new SevenDayTask();
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();

	public Response_Activity_SevenDayListReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		sevenDayInfo =  new SevenDayTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				sevenDayInfo.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_SevenDayListReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["sevenDayInfo"] = sevenDayInfo.GetJsonData();
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Response_Activity_SevenDayChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_SevenDayChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneDayTask> sevenDayTaskList = new List<OneDayTask>();
	public int sevenDayFlag = 0;

	public Response_Activity_SevenDayChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		sevenDayFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneDayTask temp = new OneDayTask();
					temp.Decode(f_item);
					sevenDayTaskList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				sevenDayFlag = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_SevenDayChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["sevenDayTaskList"] = new JsonData();
		json["sevenDayTaskList"].SetJsonType(JsonType.Array);
		foreach(OneDayTask temp in sevenDayTaskList)
		{
			json["sevenDayTaskList"].Add(temp.GetJsonData());
		}
		json["sevenDayFlag"] = sevenDayFlag;
		return json.ToJson();
	}
#endif
}

public class Response_Activity_SevenDayListChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_SevenDayListChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public SevenDayTask sevenDayTaskList = new SevenDayTask();

	public Response_Activity_SevenDayListChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		sevenDayTaskList =  new SevenDayTask();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				sevenDayTaskList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_SevenDayListChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["sevenDayTaskList"] = sevenDayTaskList.GetJsonData();
		return json.ToJson();
	}
#endif
}



public class ActivityBuffText
{
	public int lang = 0;
	public string buffTitle = "";
	public string buffTitle1 = "";
	public string buffTitle2 = "";
	public string buffText = "";
	public string buffConform = "";
	public string buffHerald = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["lang"] = lang;
		json["buffTitle"] = buffTitle.ToString();
		json["buffTitle1"] = buffTitle1.ToString();
		json["buffTitle2"] = buffTitle2.ToString();
		json["buffText"] = buffText.ToString();
		json["buffConform"] = buffConform.ToString();
		json["buffHerald"] = buffHerald.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != lang)
		{
			json["b"] = lang;
		}

		if (!String.IsNullOrEmpty(buffTitle))
		{
			json["c"] = buffTitle.ToString();
		}
		if (!String.IsNullOrEmpty(buffTitle1))
		{
			json["d"] = buffTitle1.ToString();
		}
		if (!String.IsNullOrEmpty(buffTitle2))
		{
			json["e"] = buffTitle2.ToString();
		}
		if (!String.IsNullOrEmpty(buffText))
		{
			json["f"] = buffText.ToString();
		}
		if (!String.IsNullOrEmpty(buffConform))
		{
			json["g"] = buffConform.ToString();
		}
		if (!String.IsNullOrEmpty(buffHerald))
		{
			json["h"] = buffHerald.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				lang = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				buffTitle = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				buffTitle1 = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				buffTitle2 = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				buffText = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				buffConform = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				buffHerald = json["h"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ActivityBuffText Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class ActivityBuff
{
	public int buffId = 0;
	public int buffType = 0; //enum EActivityBuffType
	public int buffParam = 0;
	public int startTime = 0;
	public int endTime = 0;
	public int buffState = 0; //enum EActivityBuffState
	public int activityTime = 0;
	public List<ActivityBuffText> textList = new List<ActivityBuffText>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["buffId"] = buffId;
		json["buffType"] = buffType;
		json["buffParam"] = buffParam;
		json["startTime"] = startTime;
		json["endTime"] = endTime;
		json["buffState"] = buffState;
		json["activityTime"] = activityTime;
		json["textList"] = new JsonData();
		json["textList"].SetJsonType(JsonType.Array);
		foreach(ActivityBuffText temp in textList)
		{
			json["textList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != buffId)
		{
			json["b"] = buffId;
		}

		if (0 != buffType)
		{
			json["c"] = buffType;
		}

		if (0 != buffParam)
		{
			json["d"] = buffParam;
		}

		if (0 != startTime)
		{
			json["e"] = startTime;
		}

		if (0 != endTime)
		{
			json["f"] = endTime;
		}

		if (0 != buffState)
		{
			json["g"] = buffState;
		}

		if (0 != activityTime)
		{
			json["h"] = activityTime;
		}

		json["i"] = new JsonData();
		json["i"].SetJsonType(JsonType.Array);
		foreach(ActivityBuffText temp in textList)
		{
			json["i"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				buffId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				buffType = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				buffParam = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				startTime = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				endTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				buffState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				activityTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					ActivityBuffText temp = new ActivityBuffText();
					temp.Decode(i_item);
					textList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("ActivityBuff Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Activity_Buff_Info : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_Buff_Info_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ActivityBuff> activityBuffList = new List<ActivityBuff>();
	public int uid = 0;

	public Response_Activity_Buff_Info()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ActivityBuff temp = new ActivityBuff();
					temp.Decode(f_item);
					activityBuffList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_Buff_Info Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityBuffList"] = new JsonData();
		json["activityBuffList"].SetJsonType(JsonType.Array);
		foreach(ActivityBuff temp in activityBuffList)
		{
			json["activityBuffList"].Add(temp.GetJsonData());
		}
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Activity_Buff_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_Buff_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int uid = 0;

	public Request_Activity_Buff_Refresh()
	{
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != uid)
		{
			json["c"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Activity_Buff_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_Buff_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<ActivityBuff> activityBuffList = new List<ActivityBuff>();
	public int uid = 0;

	public Response_Activity_Buff_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					ActivityBuff temp = new ActivityBuff();
					temp.Decode(f_item);
					activityBuffList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_Buff_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityBuffList"] = new JsonData();
		json["activityBuffList"].SetJsonType(JsonType.Array);
		foreach(ActivityBuff temp in activityBuffList)
		{
			json["activityBuffList"].Add(temp.GetJsonData());
		}
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Activity_Buff_Update : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_Buff_Update_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int buffId = 0;

	public Request_Activity_Buff_Update()
	{
		buffId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["buffId"] = buffId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != buffId)
		{
			json["c"] = buffId;
		}

		return json.ToJson();
	}
}

public class Response_Activity_Buff_Update : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_Buff_Update_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ActivityBuff activityBuff = new ActivityBuff();
	public int uid = 0;

	public Response_Activity_Buff_Update()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityBuff =  new ActivityBuff();
		uid = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityBuff.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				uid = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_Buff_Update Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityBuff"] = activityBuff.GetJsonData();
		json["uid"] = uid;
		return json.ToJson();
	}
#endif
}

public class Request_Activity_Data : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_Data_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Activity_Data()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Activity_Data : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_Data_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<HeroInfo> heroList = new List<HeroInfo>();
	public int currentStageId = 0;
	public int enemyWaveId = 0;
	public int remainTime = 0;
	public int enemyRemainCount = 0;
	public int enemyRemainHp = 0;

	public Response_Activity_Data()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		currentStageId = 0;
		enemyWaveId = 0;
		remainTime = 0;
		enemyRemainCount = 0;
		enemyRemainHp = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(f_item);
					heroList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				currentStageId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				enemyWaveId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				remainTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				enemyRemainCount = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				enemyRemainHp = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_Data Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroList"] = new JsonData();
		json["heroList"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroList)
		{
			json["heroList"].Add(temp.GetJsonData());
		}
		json["currentStageId"] = currentStageId;
		json["enemyWaveId"] = enemyWaveId;
		json["remainTime"] = remainTime;
		json["enemyRemainCount"] = enemyRemainCount;
		json["enemyRemainHp"] = enemyRemainHp;
		return json.ToJson();
	}
#endif
}

public class Request_Activity_Battle : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Activity_Battle_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string heroInfoUIds = "";

	public Request_Activity_Battle()
	{
		heroInfoUIds = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroInfoUIds"] = heroInfoUIds.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(heroInfoUIds))
		{
			json["c"] = heroInfoUIds.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Activity_Battle : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Activity_Battle_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<HeroInfo> heroInfo = new List<HeroInfo>();
	public CombatReport combatReport = new CombatReport();
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();
	public int currentStageId = 0;
	public int enemyWaveId = 0;
	public int startWaveId = 0;
	public int remainCount = 0;
	public int totalCount = 0;

	public Response_Activity_Battle()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		combatReport =  new CombatReport();
		currentStageId = 0;
		enemyWaveId = 0;
		startWaveId = 0;
		remainCount = 0;
		totalCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(f_item);
					heroInfo.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				combatReport.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(h_item);
					rewardItemList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				currentStageId = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				enemyWaveId = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				startWaveId = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				remainCount = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				totalCount = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Activity_Battle Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		json["combatReport"] = combatReport.GetJsonData();
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		json["currentStageId"] = currentStageId;
		json["enemyWaveId"] = enemyWaveId;
		json["startWaveId"] = startWaveId;
		json["remainCount"] = remainCount;
		json["totalCount"] = totalCount;
		return json.ToJson();
	}
#endif
}

public class OneRubbish
{
	public int rubbishId = 0;
	public OneRewardItem item = new OneRewardItem();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rubbishId"] = rubbishId;
		json["item"] = item.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != rubbishId)
		{
			json["b"] = rubbishId;
		}

		json["c"] = item.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				rubbishId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				item.Decode(json["c"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneRubbish Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class RubbishList
{
	public List<OneRubbish> rubbishList = new List<OneRubbish>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rubbishList"] = new JsonData();
		json["rubbishList"].SetJsonType(JsonType.Array);
		foreach(OneRubbish temp in rubbishList)
		{
			json["rubbishList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(OneRubbish temp in rubbishList)
		{
			json["b"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					OneRubbish temp = new OneRubbish();
					temp.Decode(b_item);
					rubbishList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("RubbishList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Rubbish_List : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Rubbish_List_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int nextRefreshTime = 0;
	public RubbishList rubbishList = new RubbishList();

	public Response_Rubbish_List()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextRefreshTime = 0;
		rubbishList =  new RubbishList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nextRefreshTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rubbishList.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Rubbish_List Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["nextRefreshTime"] = nextRefreshTime;
		json["rubbishList"] = rubbishList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Rubbish_Refresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Rubbish_Refresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Rubbish_Refresh()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Rubbish_Refresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Rubbish_Refresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int nextRefreshTime = 0;
	public OneRubbish oneRubbish = new OneRubbish();

	public Response_Rubbish_Refresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextRefreshTime = 0;
		oneRubbish =  new OneRubbish();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nextRefreshTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				oneRubbish.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Rubbish_Refresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["nextRefreshTime"] = nextRefreshTime;
		json["oneRubbish"] = oneRubbish.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Rubbish_Claimed : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Rubbish_Claimed_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int rubbishId = 0;

	public Request_Rubbish_Claimed()
	{
		rubbishId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["rubbishId"] = rubbishId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != rubbishId)
		{
			json["c"] = rubbishId;
		}

		return json.ToJson();
	}
}

public class Response_Rubbish_Claimed : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Rubbish_Claimed_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int nextRefreshTime = 0;
	public OneRubbish oneRubbish = new OneRubbish();

	public Response_Rubbish_Claimed()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		nextRefreshTime = 0;
		oneRubbish =  new OneRubbish();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				nextRefreshTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				oneRubbish.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Rubbish_Claimed Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["nextRefreshTime"] = nextRefreshTime;
		json["oneRubbish"] = oneRubbish.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_Order : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_Order_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int platform = 0; //enum EPlatform
	public int priceId = 0;
	public int payActivityType = 0; //enum EPayActivityType
	public int payActivityId = 0;

	public Request_Pay_Order()
	{
		platform = 0;
		priceId = 0;
		payActivityType = 0;
		payActivityId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["platform"] = platform;
		json["priceId"] = priceId;
		json["payActivityType"] = payActivityType;
		json["payActivityId"] = payActivityId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != platform)
		{
			json["c"] = platform;
		}

		if (0 != priceId)
		{
			json["d"] = priceId;
		}

		if (0 != payActivityType)
		{
			json["e"] = payActivityType;
		}

		if (0 != payActivityId)
		{
			json["f"] = payActivityId;
		}

		return json.ToJson();
	}
}

public class Response_Pay_Order : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_Order_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string gameOrderId = "";
	public string payload = "";
	public string productId = "";
	public string productName = "";
	public string productDesc = "";
	public int amount = 0;
	public string payType = "";

	public Response_Pay_Order()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		gameOrderId = String.Empty;
		payload = String.Empty;
		productId = String.Empty;
		productName = String.Empty;
		productDesc = String.Empty;
		amount = 0;
		payType = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				gameOrderId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				payload = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				productId = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				productName = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				productDesc = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				amount = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				payType = json["l"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_Order Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["gameOrderId"] = gameOrderId.ToString();
		json["payload"] = payload.ToString();
		json["productId"] = productId.ToString();
		json["productName"] = productName.ToString();
		json["productDesc"] = productDesc.ToString();
		json["amount"] = amount;
		json["payType"] = payType.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_Balance : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_Balance_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int platform = 0; //enum EPlatform
	public string gameOrderId = "";
	public string thirdOrderId = "";
	public string purchase = "";
	public string productId = "";

	public Request_Pay_Balance()
	{
		platform = 0;
		gameOrderId = String.Empty;
		thirdOrderId = String.Empty;
		purchase = String.Empty;
		productId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["platform"] = platform;
		json["gameOrderId"] = gameOrderId.ToString();
		json["thirdOrderId"] = thirdOrderId.ToString();
		json["purchase"] = purchase.ToString();
		json["productId"] = productId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != platform)
		{
			json["c"] = platform;
		}

		if (!String.IsNullOrEmpty(gameOrderId))
		{
			json["d"] = gameOrderId.ToString();
		}
		if (!String.IsNullOrEmpty(thirdOrderId))
		{
			json["e"] = thirdOrderId.ToString();
		}
		if (!String.IsNullOrEmpty(purchase))
		{
			json["f"] = purchase.ToString();
		}
		if (!String.IsNullOrEmpty(productId))
		{
			json["g"] = productId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Pay_Balance : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_Balance_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string gameOrderId = "";
	public string thirdOrderId = "";
	public string productId = "";
	public string purchase = "";
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public string pic1 = "";
	public string pic2 = "";
	public string tag = "";

	public Response_Pay_Balance()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		gameOrderId = String.Empty;
		thirdOrderId = String.Empty;
		productId = String.Empty;
		purchase = String.Empty;
		pic1 = String.Empty;
		pic2 = String.Empty;
		tag = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				gameOrderId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				thirdOrderId = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				productId = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				purchase = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				pic1 = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				pic2 = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				tag = json["m"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_Balance Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["gameOrderId"] = gameOrderId.ToString();
		json["thirdOrderId"] = thirdOrderId.ToString();
		json["productId"] = productId.ToString();
		json["purchase"] = purchase.ToString();
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["tag"] = tag.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_IOSBuy : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_IOSBuy_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int priceId = 0;
	public int payActivityType = 0; //enum EPayActivityType
	public int payActivityId = 0;

	public Request_Pay_IOSBuy()
	{
		priceId = 0;
		payActivityType = 0;
		payActivityId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["priceId"] = priceId;
		json["payActivityType"] = payActivityType;
		json["payActivityId"] = payActivityId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != priceId)
		{
			json["c"] = priceId;
		}

		if (0 != payActivityType)
		{
			json["d"] = payActivityType;
		}

		if (0 != payActivityId)
		{
			json["e"] = payActivityId;
		}

		return json.ToJson();
	}
}

public class Response_Pay_IOSBuy : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_IOSBuy_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Pay_IOSBuy()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_IOSBuy Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_AmountCheck : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_AmountCheck_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_AmountCheck()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_AmountCheck : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_AmountCheck_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int amount = 0;
	public int index = 0;
	public int flag = 0;

	public Response_Pay_AmountCheck()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		amount = 0;
		index = 0;
		flag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				amount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				index = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				flag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_AmountCheck Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["amount"] = amount;
		json["index"] = index;
		json["flag"] = flag;
		return json.ToJson();
	}
#endif
}

public class Request_Pay_AmountReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_AmountReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_AmountReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_AmountReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_AmountReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneRewardItem item = new OneRewardItem();
	public int index = 0;
	public int flag = 0;

	public Response_Pay_AmountReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		item =  new OneRewardItem();
		index = 0;
		flag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				item.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				index = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				flag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_AmountReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["item"] = item.GetJsonData();
		json["index"] = index;
		json["flag"] = flag;
		return json.ToJson();
	}
#endif
}

public class Request_Pay_OrderCancel : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_OrderCancel_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string gameOrderId = "";

	public Request_Pay_OrderCancel()
	{
		gameOrderId = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["gameOrderId"] = gameOrderId.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(gameOrderId))
		{
			json["c"] = gameOrderId.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Pay_OrderCancel : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_OrderCancel_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";

	public Response_Pay_OrderCancel()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_OrderCancel Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_GoldVip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_GoldVip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_GoldVip()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_GoldVip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_GoldVip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneRewardItem item = new OneRewardItem();
	public PayProduct payProduct = new PayProduct();
	public string name = "";
	public string value = "";
	public string roleImgIcon = "";
	public int endTime = 0;
	public int flag = 0;
	public int remainCount = 0;

	public Response_Pay_GoldVip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		item =  new OneRewardItem();
		payProduct =  new PayProduct();
		name = String.Empty;
		value = String.Empty;
		roleImgIcon = String.Empty;
		endTime = 0;
		flag = 0;
		remainCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				item.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				payProduct.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				name = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				value = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				roleImgIcon = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				endTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				flag = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				remainCount = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_GoldVip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["item"] = item.GetJsonData();
		json["payProduct"] = payProduct.GetJsonData();
		json["name"] = name.ToString();
		json["value"] = value.ToString();
		json["roleImgIcon"] = roleImgIcon.ToString();
		json["endTime"] = endTime;
		json["flag"] = flag;
		json["remainCount"] = remainCount;
		return json.ToJson();
	}
#endif
}

public class Request_Pay_GoldVipReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_GoldVipReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_GoldVipReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_GoldVipReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_GoldVipReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneRewardItem item = new OneRewardItem();
	public int endTime = 0;
	public int flag = 0;
	public int remainCount = 0;

	public Response_Pay_GoldVipReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		item =  new OneRewardItem();
		endTime = 0;
		flag = 0;
		remainCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				item.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				endTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				flag = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				remainCount = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_GoldVipReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["item"] = item.GetJsonData();
		json["endTime"] = endTime;
		json["flag"] = flag;
		json["remainCount"] = remainCount;
		return json.ToJson();
	}
#endif
}





public class VIPPayInfo
{
	public string name = "";
	public string tag = "";
	public string atlasIcon = "";
	public string icon1 = "";
	public string icon2 = "";
	public string icon3 = "";
	public string icon4 = "";
	public string pic1 = "";
	public string pic2 = "";
	public string title = "";
	public string slogan = "";
	public string value = "";
	public PayProduct payProduct = new PayProduct();
	public string roleImgAtlas = "";
	public string roleImgIcon = "";
	public string pic3 = "";
	public string pic4 = "";
	public string pic5 = "";
	public string pic6 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["name"] = name.ToString();
		json["tag"] = tag.ToString();
		json["atlasIcon"] = atlasIcon.ToString();
		json["icon1"] = icon1.ToString();
		json["icon2"] = icon2.ToString();
		json["icon3"] = icon3.ToString();
		json["icon4"] = icon4.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["title"] = title.ToString();
		json["slogan"] = slogan.ToString();
		json["value"] = value.ToString();
		json["payProduct"] = payProduct.GetJsonData();
		json["roleImgAtlas"] = roleImgAtlas.ToString();
		json["roleImgIcon"] = roleImgIcon.ToString();
		json["pic3"] = pic3.ToString();
		json["pic4"] = pic4.ToString();
		json["pic5"] = pic5.ToString();
		json["pic6"] = pic6.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(name))
		{
			json["b"] = name.ToString();
		}
		if (!String.IsNullOrEmpty(tag))
		{
			json["c"] = tag.ToString();
		}
		if (!String.IsNullOrEmpty(atlasIcon))
		{
			json["d"] = atlasIcon.ToString();
		}
		if (!String.IsNullOrEmpty(icon1))
		{
			json["e"] = icon1.ToString();
		}
		if (!String.IsNullOrEmpty(icon2))
		{
			json["f"] = icon2.ToString();
		}
		if (!String.IsNullOrEmpty(icon3))
		{
			json["g"] = icon3.ToString();
		}
		if (!String.IsNullOrEmpty(icon4))
		{
			json["h"] = icon4.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["i"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["j"] = pic2.ToString();
		}
		if (!String.IsNullOrEmpty(title))
		{
			json["k"] = title.ToString();
		}
		if (!String.IsNullOrEmpty(slogan))
		{
			json["l"] = slogan.ToString();
		}
		if (!String.IsNullOrEmpty(value))
		{
			json["m"] = value.ToString();
		}
		json["n"] = payProduct.Encode();
		if (!String.IsNullOrEmpty(roleImgAtlas))
		{
			json["o"] = roleImgAtlas.ToString();
		}
		if (!String.IsNullOrEmpty(roleImgIcon))
		{
			json["p"] = roleImgIcon.ToString();
		}
		if (!String.IsNullOrEmpty(pic3))
		{
			json["q"] = pic3.ToString();
		}
		if (!String.IsNullOrEmpty(pic4))
		{
			json["r"] = pic4.ToString();
		}
		if (!String.IsNullOrEmpty(pic5))
		{
			json["s"] = pic5.ToString();
		}
		if (!String.IsNullOrEmpty(pic6))
		{
			json["t"] = pic6.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				name = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				tag = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				atlasIcon = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				icon1 = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				icon2 = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				icon3 = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				icon4 = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				pic1 = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				pic2 = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				title = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				slogan = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				value = json["m"].ToString();
			}
			if (oKeys.Contains("n"))
			{
				payProduct.Decode(json["n"]);
			}

			if (oKeys.Contains("o"))
			{
				roleImgAtlas = json["o"].ToString();
			}
			if (oKeys.Contains("p"))
			{
				roleImgIcon = json["p"].ToString();
			}
			if (oKeys.Contains("q"))
			{
				pic3 = json["q"].ToString();
			}
			if (oKeys.Contains("r"))
			{
				pic4 = json["r"].ToString();
			}
			if (oKeys.Contains("s"))
			{
				pic5 = json["s"].ToString();
			}
			if (oKeys.Contains("t"))
			{
				pic6 = json["t"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("VIPPayInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneStoreItem
{
	public int uid = 0;
	public int index = 0;
	public int number1 = 0;
	public OneRewardItem item = new OneRewardItem();
	public int priceShow = 0;
	public int price = 0;
	public string textCn = "";
	public string textTc = "";
	public string textEn = "";
	public string fileGroup = "";
	public string fileName = "";
	public int state = 0; //enum EVIPPayState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["uid"] = uid;
		json["index"] = index;
		json["number1"] = number1;
		json["item"] = item.GetJsonData();
		json["priceShow"] = priceShow;
		json["price"] = price;
		json["textCn"] = textCn.ToString();
		json["textTc"] = textTc.ToString();
		json["textEn"] = textEn.ToString();
		json["fileGroup"] = fileGroup.ToString();
		json["fileName"] = fileName.ToString();
		json["state"] = state;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != uid)
		{
			json["b"] = uid;
		}

		if (0 != index)
		{
			json["c"] = index;
		}

		if (0 != number1)
		{
			json["d"] = number1;
		}

		json["e"] = item.Encode();
		if (0 != priceShow)
		{
			json["f"] = priceShow;
		}

		if (0 != price)
		{
			json["g"] = price;
		}

		if (!String.IsNullOrEmpty(textCn))
		{
			json["h"] = textCn.ToString();
		}
		if (!String.IsNullOrEmpty(textTc))
		{
			json["i"] = textTc.ToString();
		}
		if (!String.IsNullOrEmpty(textEn))
		{
			json["j"] = textEn.ToString();
		}
		if (!String.IsNullOrEmpty(fileGroup))
		{
			json["k"] = fileGroup.ToString();
		}
		if (!String.IsNullOrEmpty(fileName))
		{
			json["l"] = fileName.ToString();
		}
		if (0 != state)
		{
			json["m"] = state;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				uid = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				index = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				number1 = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				item.Decode(json["e"]);
			}

			if (oKeys.Contains("f"))
			{
				priceShow = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				price = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				textCn = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				textTc = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				textEn = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				fileGroup = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				fileName = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				state = Int32.Parse(json["m"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneStoreItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_StoreList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_StoreList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_StoreList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_StoreList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_StoreList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneStoreItem> storeItemList = new List<OneStoreItem>();
	public VIPInfo vipInfo = new VIPInfo();
	public VIPPayInfo vipPayInfoMonth = new VIPPayInfo();
	public VIPPayInfo vipPayInfoYear = new VIPPayInfo();
	public int freeRefresh = 0;
	public int refreshTime = 0;
	public int refreshCost = 0;

	public Response_Pay_StoreList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		vipInfo =  new VIPInfo();
		vipPayInfoMonth =  new VIPPayInfo();
		vipPayInfoYear =  new VIPPayInfo();
		freeRefresh = 0;
		refreshTime = 0;
		refreshCost = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneStoreItem temp = new OneStoreItem();
					temp.Decode(f_item);
					storeItemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				vipInfo.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				vipPayInfoMonth.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				vipPayInfoYear.Decode(json["i"]);
			}

			if (oKeys.Contains("j"))
			{
				freeRefresh = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				refreshTime = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				refreshCost = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_StoreList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["storeItemList"] = new JsonData();
		json["storeItemList"].SetJsonType(JsonType.Array);
		foreach(OneStoreItem temp in storeItemList)
		{
			json["storeItemList"].Add(temp.GetJsonData());
		}
		json["vipInfo"] = vipInfo.GetJsonData();
		json["vipPayInfoMonth"] = vipPayInfoMonth.GetJsonData();
		json["vipPayInfoYear"] = vipPayInfoYear.GetJsonData();
		json["freeRefresh"] = freeRefresh;
		json["refreshTime"] = refreshTime;
		json["refreshCost"] = refreshCost;
		return json.ToJson();
	}
#endif
}

public class Request_Pay_StoreRefresh : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_StoreRefresh_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_StoreRefresh()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_StoreRefresh : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_StoreRefresh_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneStoreItem> storeItemList = new List<OneStoreItem>();
	public int freeRefresh = 0;
	public int refreshTime = 0;
	public int refreshCost = 0;

	public Response_Pay_StoreRefresh()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		freeRefresh = 0;
		refreshTime = 0;
		refreshCost = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneStoreItem temp = new OneStoreItem();
					temp.Decode(f_item);
					storeItemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				freeRefresh = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				refreshTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				refreshCost = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_StoreRefresh Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["storeItemList"] = new JsonData();
		json["storeItemList"].SetJsonType(JsonType.Array);
		foreach(OneStoreItem temp in storeItemList)
		{
			json["storeItemList"].Add(temp.GetJsonData());
		}
		json["freeRefresh"] = freeRefresh;
		json["refreshTime"] = refreshTime;
		json["refreshCost"] = refreshCost;
		return json.ToJson();
	}
#endif
}

public class Request_Pay_StoreBuy : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_StoreBuy_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int uid = 0;

	public Request_Pay_StoreBuy()
	{
		uid = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["uid"] = uid;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != uid)
		{
			json["c"] = uid;
		}

		return json.ToJson();
	}
}

public class Response_Pay_StoreBuy : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_StoreBuy_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneStoreItem> storeItemList = new List<OneStoreItem>();
	public OneRewardItem reward = new OneRewardItem();

	public Response_Pay_StoreBuy()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneStoreItem temp = new OneStoreItem();
					temp.Decode(f_item);
					storeItemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_StoreBuy Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["storeItemList"] = new JsonData();
		json["storeItemList"].SetJsonType(JsonType.Array);
		foreach(OneStoreItem temp in storeItemList)
		{
			json["storeItemList"].Add(temp.GetJsonData());
		}
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Pay_BuyVIP : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_BuyVIP_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int index = 0;

	public Request_Pay_BuyVIP()
	{
		index = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["index"] = index;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != index)
		{
			json["c"] = index;
		}

		return json.ToJson();
	}
}

public class Response_Pay_BuyVIP : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_BuyVIP_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public VIPPayInfo vipPayInfoMonth = new VIPPayInfo();
	public VIPPayInfo vipPayInfoYear = new VIPPayInfo();
	public VIPInfo vipInfo = new VIPInfo();

	public Response_Pay_BuyVIP()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		vipPayInfoMonth =  new VIPPayInfo();
		vipPayInfoYear =  new VIPPayInfo();
		vipInfo =  new VIPInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				vipPayInfoMonth.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				vipPayInfoYear.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				vipInfo.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_BuyVIP Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["vipPayInfoMonth"] = vipPayInfoMonth.GetJsonData();
		json["vipPayInfoYear"] = vipPayInfoYear.GetJsonData();
		json["vipInfo"] = vipInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Pay_VIPChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_VIPChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public VIPPayInfo vipPayInfoMonth = new VIPPayInfo();
	public VIPPayInfo vipPayInfoYear = new VIPPayInfo();
	public VIPInfo vipInfo = new VIPInfo();

	public Response_Pay_VIPChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		vipPayInfoMonth =  new VIPPayInfo();
		vipPayInfoYear =  new VIPPayInfo();
		vipInfo =  new VIPInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				vipPayInfoMonth.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				vipPayInfoYear.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				vipInfo.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_VIPChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["vipPayInfoMonth"] = vipPayInfoMonth.GetJsonData();
		json["vipPayInfoYear"] = vipPayInfoYear.GetJsonData();
		json["vipInfo"] = vipInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class GeneralPurchase
{
	public int id = 0;
	public string rebateRatio = "";
	public string txt = "";
	public string pic1 = "";
	public string pic2 = "";
	public OneRewardItem rewardItem = new OneRewardItem();
	public OneRewardItem rebateItem = new OneRewardItem();
	public int rebateState = 0;
	public PayProduct payProduct = new PayProduct();
	public string pic3 = "";
	public string pic4 = "";
	public string pic5 = "";
	public string pic6 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["rebateRatio"] = rebateRatio.ToString();
		json["txt"] = txt.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["rebateItem"] = rebateItem.GetJsonData();
		json["rebateState"] = rebateState;
		json["payProduct"] = payProduct.GetJsonData();
		json["pic3"] = pic3.ToString();
		json["pic4"] = pic4.ToString();
		json["pic5"] = pic5.ToString();
		json["pic6"] = pic6.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (!String.IsNullOrEmpty(rebateRatio))
		{
			json["c"] = rebateRatio.ToString();
		}
		if (!String.IsNullOrEmpty(txt))
		{
			json["d"] = txt.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["e"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["f"] = pic2.ToString();
		}
		json["g"] = rewardItem.Encode();
		json["h"] = rebateItem.Encode();
		if (0 != rebateState)
		{
			json["i"] = rebateState;
		}

		json["j"] = payProduct.Encode();
		if (!String.IsNullOrEmpty(pic3))
		{
			json["k"] = pic3.ToString();
		}
		if (!String.IsNullOrEmpty(pic4))
		{
			json["l"] = pic4.ToString();
		}
		if (!String.IsNullOrEmpty(pic5))
		{
			json["m"] = pic5.ToString();
		}
		if (!String.IsNullOrEmpty(pic6))
		{
			json["n"] = pic6.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				rebateRatio = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				txt = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				pic1 = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				pic2 = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				rewardItem.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				rebateItem.Decode(json["h"]);
			}

			if (oKeys.Contains("i"))
			{
				rebateState = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				payProduct.Decode(json["j"]);
			}

			if (oKeys.Contains("k"))
			{
				pic3 = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				pic4 = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				pic5 = json["m"].ToString();
			}
			if (oKeys.Contains("n"))
			{
				pic6 = json["n"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("GeneralPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class GeneralPurchaseList
{
	public List<GeneralPurchase> purchaseList = new List<GeneralPurchase>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["purchaseList"] = new JsonData();
		json["purchaseList"].SetJsonType(JsonType.Array);
		foreach(GeneralPurchase temp in purchaseList)
		{
			json["purchaseList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(GeneralPurchase temp in purchaseList)
		{
			json["b"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					GeneralPurchase temp = new GeneralPurchase();
					temp.Decode(b_item);
					purchaseList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("GeneralPurchaseList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_GeneralPurchase : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_GeneralPurchase_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_GeneralPurchase()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_GeneralPurchase : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_GeneralPurchase_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public GeneralPurchaseList generalPurchaseList = new GeneralPurchaseList();

	public Response_Pay_GeneralPurchase()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		generalPurchaseList =  new GeneralPurchaseList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				generalPurchaseList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_GeneralPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["generalPurchaseList"] = generalPurchaseList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class DailySale
{
	public int id = 0;
	public string name = "";
	public string tag = "";
	public string title = "";
	public string slogan = "";
	public string atlasIcon = "";
	public string icon1 = "";
	public string icon2 = "";
	public string icon3 = "";
	public string icon4 = "";
	public string pic1 = "";
	public string pic2 = "";
	public int originalPrice = 0;
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public int buyCount = 0;
	public int buyCountLimit = 0;
	public PayProduct payProduct = new PayProduct();
	public string roleImgAtlas = "";
	public string roleImgIcon = "";
	public string pic3 = "";
	public string pic4 = "";
	public string pic5 = "";
	public string pic6 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["name"] = name.ToString();
		json["tag"] = tag.ToString();
		json["title"] = title.ToString();
		json["slogan"] = slogan.ToString();
		json["atlasIcon"] = atlasIcon.ToString();
		json["icon1"] = icon1.ToString();
		json["icon2"] = icon2.ToString();
		json["icon3"] = icon3.ToString();
		json["icon4"] = icon4.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["originalPrice"] = originalPrice;
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["buyCount"] = buyCount;
		json["buyCountLimit"] = buyCountLimit;
		json["payProduct"] = payProduct.GetJsonData();
		json["roleImgAtlas"] = roleImgAtlas.ToString();
		json["roleImgIcon"] = roleImgIcon.ToString();
		json["pic3"] = pic3.ToString();
		json["pic4"] = pic4.ToString();
		json["pic5"] = pic5.ToString();
		json["pic6"] = pic6.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["c"] = name.ToString();
		}
		if (!String.IsNullOrEmpty(tag))
		{
			json["d"] = tag.ToString();
		}
		if (!String.IsNullOrEmpty(title))
		{
			json["e"] = title.ToString();
		}
		if (!String.IsNullOrEmpty(slogan))
		{
			json["f"] = slogan.ToString();
		}
		if (!String.IsNullOrEmpty(atlasIcon))
		{
			json["g"] = atlasIcon.ToString();
		}
		if (!String.IsNullOrEmpty(icon1))
		{
			json["h"] = icon1.ToString();
		}
		if (!String.IsNullOrEmpty(icon2))
		{
			json["i"] = icon2.ToString();
		}
		if (!String.IsNullOrEmpty(icon3))
		{
			json["j"] = icon3.ToString();
		}
		if (!String.IsNullOrEmpty(icon4))
		{
			json["k"] = icon4.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["l"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["m"] = pic2.ToString();
		}
		if (0 != originalPrice)
		{
			json["n"] = originalPrice;
		}

		json["o"] = new JsonData();
		json["o"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["o"].Add(temp.Encode());
		}
		if (0 != buyCount)
		{
			json["p"] = buyCount;
		}

		if (0 != buyCountLimit)
		{
			json["q"] = buyCountLimit;
		}

		json["r"] = payProduct.Encode();
		if (!String.IsNullOrEmpty(roleImgAtlas))
		{
			json["s"] = roleImgAtlas.ToString();
		}
		if (!String.IsNullOrEmpty(roleImgIcon))
		{
			json["t"] = roleImgIcon.ToString();
		}
		if (!String.IsNullOrEmpty(pic3))
		{
			json["u"] = pic3.ToString();
		}
		if (!String.IsNullOrEmpty(pic4))
		{
			json["v"] = pic4.ToString();
		}
		if (!String.IsNullOrEmpty(pic5))
		{
			json["w"] = pic5.ToString();
		}
		if (!String.IsNullOrEmpty(pic6))
		{
			json["x"] = pic6.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				name = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				tag = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				title = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				slogan = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				atlasIcon = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				icon1 = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				icon2 = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				icon3 = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				icon4 = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				pic1 = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				pic2 = json["m"].ToString();
			}
			if (oKeys.Contains("n"))
			{
				originalPrice = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				foreach(JsonData o_item in json["o"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(o_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("p"))
			{
				buyCount = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				buyCountLimit = Int32.Parse(json["q"].ToString());
			}

			if (oKeys.Contains("r"))
			{
				payProduct.Decode(json["r"]);
			}

			if (oKeys.Contains("s"))
			{
				roleImgAtlas = json["s"].ToString();
			}
			if (oKeys.Contains("t"))
			{
				roleImgIcon = json["t"].ToString();
			}
			if (oKeys.Contains("u"))
			{
				pic3 = json["u"].ToString();
			}
			if (oKeys.Contains("v"))
			{
				pic4 = json["v"].ToString();
			}
			if (oKeys.Contains("w"))
			{
				pic5 = json["w"].ToString();
			}
			if (oKeys.Contains("x"))
			{
				pic6 = json["x"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DailySale Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class DailySaleList
{
	public int remainTime = 0;
	public List<DailySale> saleList = new List<DailySale>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["remainTime"] = remainTime;
		json["saleList"] = new JsonData();
		json["saleList"].SetJsonType(JsonType.Array);
		foreach(DailySale temp in saleList)
		{
			json["saleList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != remainTime)
		{
			json["b"] = remainTime;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(DailySale temp in saleList)
		{
			json["c"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				remainTime = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					DailySale temp = new DailySale();
					temp.Decode(c_item);
					saleList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DailySaleList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_DailySale : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_DailySale_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_DailySale()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_DailySale : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_DailySale_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public DailySaleList dailySaleList = new DailySaleList();

	public Response_Pay_DailySale()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		dailySaleList =  new DailySaleList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				dailySaleList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_DailySale Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dailySaleList"] = dailySaleList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class DirectPurchase
{
	public string uid = "";
	public int id = 0;
	public int quickOn = 0;
	public int mallOn = 0;
	public int remainTime = 0;
	public string name = "";
	public string tag = "";
	public string title = "";
	public string slogan = "";
	public string atlasIcon = "";
	public string icon1 = "";
	public string icon2 = "";
	public string icon3 = "";
	public string icon4 = "";
	public string icon4Atlas = "";
	public string pic1 = "";
	public string pic2 = "";
	public int value = 0;
	public int priority = 0;
	public List<int> pushType = new List<int>();
	public List<int> pushParam = new List<int>();
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public int buyCount = 0;
	public int buyCountLimit = 0;
	public PayProduct payProduct = new PayProduct();
	public string roleImgAtlas = "";
	public string roleImgIcon = "";
	public int packMallTab = 0;
	public string pic3 = "";
	public string pic4 = "";
	public string pic5 = "";
	public string pic6 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["uid"] = uid.ToString();
		json["id"] = id;
		json["quickOn"] = quickOn;
		json["mallOn"] = mallOn;
		json["remainTime"] = remainTime;
		json["name"] = name.ToString();
		json["tag"] = tag.ToString();
		json["title"] = title.ToString();
		json["slogan"] = slogan.ToString();
		json["atlasIcon"] = atlasIcon.ToString();
		json["icon1"] = icon1.ToString();
		json["icon2"] = icon2.ToString();
		json["icon3"] = icon3.ToString();
		json["icon4"] = icon4.ToString();
		json["icon4Atlas"] = icon4Atlas.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["value"] = value;
		json["priority"] = priority;
		json["pushType"] = new JsonData();
		json["pushType"].SetJsonType(JsonType.Array);
		foreach(int temp in pushType)
		{
			json["pushType"].Add(temp);
		}
		json["pushParam"] = new JsonData();
		json["pushParam"].SetJsonType(JsonType.Array);
		foreach(int temp in pushParam)
		{
			json["pushParam"].Add(temp);
		}
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["buyCount"] = buyCount;
		json["buyCountLimit"] = buyCountLimit;
		json["payProduct"] = payProduct.GetJsonData();
		json["roleImgAtlas"] = roleImgAtlas.ToString();
		json["roleImgIcon"] = roleImgIcon.ToString();
		json["packMallTab"] = packMallTab;
		json["pic3"] = pic3.ToString();
		json["pic4"] = pic4.ToString();
		json["pic5"] = pic5.ToString();
		json["pic6"] = pic6.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(uid))
		{
			json["b"] = uid.ToString();
		}
		if (0 != id)
		{
			json["c"] = id;
		}

		if (0 != quickOn)
		{
			json["d"] = quickOn;
		}

		if (0 != mallOn)
		{
			json["e"] = mallOn;
		}

		if (0 != remainTime)
		{
			json["f"] = remainTime;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["g"] = name.ToString();
		}
		if (!String.IsNullOrEmpty(tag))
		{
			json["h"] = tag.ToString();
		}
		if (!String.IsNullOrEmpty(title))
		{
			json["i"] = title.ToString();
		}
		if (!String.IsNullOrEmpty(slogan))
		{
			json["j"] = slogan.ToString();
		}
		if (!String.IsNullOrEmpty(atlasIcon))
		{
			json["k"] = atlasIcon.ToString();
		}
		if (!String.IsNullOrEmpty(icon1))
		{
			json["l"] = icon1.ToString();
		}
		if (!String.IsNullOrEmpty(icon2))
		{
			json["m"] = icon2.ToString();
		}
		if (!String.IsNullOrEmpty(icon3))
		{
			json["n"] = icon3.ToString();
		}
		if (!String.IsNullOrEmpty(icon4))
		{
			json["o"] = icon4.ToString();
		}
		if (!String.IsNullOrEmpty(icon4Atlas))
		{
			json["p"] = icon4Atlas.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["q"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["r"] = pic2.ToString();
		}
		if (0 != value)
		{
			json["s"] = value;
		}

		if (0 != priority)
		{
			json["t"] = priority;
		}

		json["u"] = new JsonData();
		json["u"].SetJsonType(JsonType.Array);
		foreach(int temp in pushType)
		{
			json["u"].Add(temp);
		}
		json["v"] = new JsonData();
		json["v"].SetJsonType(JsonType.Array);
		foreach(int temp in pushParam)
		{
			json["v"].Add(temp);
		}
		json["w"] = new JsonData();
		json["w"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["w"].Add(temp.Encode());
		}
		if (0 != buyCount)
		{
			json["x"] = buyCount;
		}

		if (0 != buyCountLimit)
		{
			json["y"] = buyCountLimit;
		}

		json["z"] = payProduct.Encode();
		if (!String.IsNullOrEmpty(roleImgAtlas))
		{
			json["a1"] = roleImgAtlas.ToString();
		}
		if (!String.IsNullOrEmpty(roleImgIcon))
		{
			json["a2"] = roleImgIcon.ToString();
		}
		if (0 != packMallTab)
		{
			json["a3"] = packMallTab;
		}

		if (!String.IsNullOrEmpty(pic3))
		{
			json["a4"] = pic3.ToString();
		}
		if (!String.IsNullOrEmpty(pic4))
		{
			json["a5"] = pic4.ToString();
		}
		if (!String.IsNullOrEmpty(pic5))
		{
			json["a6"] = pic5.ToString();
		}
		if (!String.IsNullOrEmpty(pic6))
		{
			json["a7"] = pic6.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				uid = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				id = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				quickOn = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				mallOn = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				remainTime = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				name = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				tag = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				title = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				slogan = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				atlasIcon = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				icon1 = json["l"].ToString();
			}
			if (oKeys.Contains("m"))
			{
				icon2 = json["m"].ToString();
			}
			if (oKeys.Contains("n"))
			{
				icon3 = json["n"].ToString();
			}
			if (oKeys.Contains("o"))
			{
				icon4 = json["o"].ToString();
			}
			if (oKeys.Contains("p"))
			{
				icon4Atlas = json["p"].ToString();
			}
			if (oKeys.Contains("q"))
			{
				pic1 = json["q"].ToString();
			}
			if (oKeys.Contains("r"))
			{
				pic2 = json["r"].ToString();
			}
			if (oKeys.Contains("s"))
			{
				value = Int32.Parse(json["s"].ToString());
			}

			if (oKeys.Contains("t"))
			{
				priority = Int32.Parse(json["t"].ToString());
			}

			if (oKeys.Contains("u"))
			{
				foreach(JsonData u_item in json["u"])
				{
					int temp = Int32.Parse(u_item.ToString());
					pushType.Add(temp);
				}
			}
			if (oKeys.Contains("v"))
			{
				foreach(JsonData v_item in json["v"])
				{
					int temp = Int32.Parse(v_item.ToString());
					pushParam.Add(temp);
				}
			}
			if (oKeys.Contains("w"))
			{
				foreach(JsonData w_item in json["w"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(w_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("x"))
			{
				buyCount = Int32.Parse(json["x"].ToString());
			}

			if (oKeys.Contains("y"))
			{
				buyCountLimit = Int32.Parse(json["y"].ToString());
			}

			if (oKeys.Contains("z"))
			{
				payProduct.Decode(json["z"]);
			}

			if (oKeys.Contains("a1"))
			{
				roleImgAtlas = json["a1"].ToString();
			}
			if (oKeys.Contains("a2"))
			{
				roleImgIcon = json["a2"].ToString();
			}
			if (oKeys.Contains("a3"))
			{
				packMallTab = Int32.Parse(json["a3"].ToString());
			}

			if (oKeys.Contains("a4"))
			{
				pic3 = json["a4"].ToString();
			}
			if (oKeys.Contains("a5"))
			{
				pic4 = json["a5"].ToString();
			}
			if (oKeys.Contains("a6"))
			{
				pic5 = json["a6"].ToString();
			}
			if (oKeys.Contains("a7"))
			{
				pic6 = json["a7"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DirectPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class DirectPurchaseList
{
	public List<DirectPurchase> purchaseList = new List<DirectPurchase>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["purchaseList"] = new JsonData();
		json["purchaseList"].SetJsonType(JsonType.Array);
		foreach(DirectPurchase temp in purchaseList)
		{
			json["purchaseList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(DirectPurchase temp in purchaseList)
		{
			json["b"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					DirectPurchase temp = new DirectPurchase();
					temp.Decode(b_item);
					purchaseList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("DirectPurchaseList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_DirectPurchase : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_DirectPurchase_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_DirectPurchase()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_DirectPurchase : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_DirectPurchase_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public DirectPurchaseList directPurchaseList = new DirectPurchaseList();

	public Response_Pay_DirectPurchase()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		directPurchaseList =  new DirectPurchaseList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				directPurchaseList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_DirectPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["directPurchaseList"] = directPurchaseList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class OperatingActivityPurchase
{
	public int id = 0;
	public string txt = "";
	public string pic1 = "";
	public string pic2 = "";
	public OneRewardItem rewardItem = new OneRewardItem();
	public PayProduct payProduct = new PayProduct();
	public string pic3 = "";
	public string pic4 = "";
	public string pic5 = "";
	public string pic6 = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["txt"] = txt.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["payProduct"] = payProduct.GetJsonData();
		json["pic3"] = pic3.ToString();
		json["pic4"] = pic4.ToString();
		json["pic5"] = pic5.ToString();
		json["pic6"] = pic6.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (!String.IsNullOrEmpty(txt))
		{
			json["c"] = txt.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["d"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["e"] = pic2.ToString();
		}
		json["f"] = rewardItem.Encode();
		json["g"] = payProduct.Encode();
		if (!String.IsNullOrEmpty(pic3))
		{
			json["h"] = pic3.ToString();
		}
		if (!String.IsNullOrEmpty(pic4))
		{
			json["i"] = pic4.ToString();
		}
		if (!String.IsNullOrEmpty(pic5))
		{
			json["j"] = pic5.ToString();
		}
		if (!String.IsNullOrEmpty(pic6))
		{
			json["k"] = pic6.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				txt = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				pic1 = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				pic2 = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				payProduct.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				pic3 = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				pic4 = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				pic5 = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				pic6 = json["k"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OperatingActivityPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_OperatingActivityPurchase : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_OperatingActivityPurchase_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_OperatingActivityPurchase()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class OperatingActivityPurchasePurchaseList
{
	public List<OperatingActivityPurchase> purchaseList = new List<OperatingActivityPurchase>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["purchaseList"] = new JsonData();
		json["purchaseList"].SetJsonType(JsonType.Array);
		foreach(OperatingActivityPurchase temp in purchaseList)
		{
			json["purchaseList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(OperatingActivityPurchase temp in purchaseList)
		{
			json["b"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					OperatingActivityPurchase temp = new OperatingActivityPurchase();
					temp.Decode(b_item);
					purchaseList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OperatingActivityPurchasePurchaseList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Response_Pay_OperatingActivityPurchase : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_OperatingActivityPurchase_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OperatingActivityPurchasePurchaseList operatingActivityPurchasePurchaseList = new OperatingActivityPurchasePurchaseList();

	public Response_Pay_OperatingActivityPurchase()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		operatingActivityPurchasePurchaseList =  new OperatingActivityPurchasePurchaseList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				operatingActivityPurchasePurchaseList.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_OperatingActivityPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["operatingActivityPurchasePurchaseList"] = operatingActivityPurchasePurchaseList.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class PointActivityPurchase
{
	public string uid = "";
	public int id = 0;
	public string name = "";
	public int priority = 0;
	public string pic1Atlas = "";
	public string pic1 = "";
	public string pic2 = "";
	public int value = 0;
	public List<OneRewardItem> itemList = new List<OneRewardItem>();
	public int buyCount = 0;
	public int buyCountLimit = 0;
	public PayProduct payProduct = new PayProduct();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["uid"] = uid.ToString();
		json["id"] = id;
		json["name"] = name.ToString();
		json["priority"] = priority;
		json["pic1Atlas"] = pic1Atlas.ToString();
		json["pic1"] = pic1.ToString();
		json["pic2"] = pic2.ToString();
		json["value"] = value;
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["itemList"].Add(temp.GetJsonData());
		}
		json["buyCount"] = buyCount;
		json["buyCountLimit"] = buyCountLimit;
		json["payProduct"] = payProduct.GetJsonData();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (!String.IsNullOrEmpty(uid))
		{
			json["b"] = uid.ToString();
		}
		if (0 != id)
		{
			json["c"] = id;
		}

		if (!String.IsNullOrEmpty(name))
		{
			json["d"] = name.ToString();
		}
		if (0 != priority)
		{
			json["e"] = priority;
		}

		if (!String.IsNullOrEmpty(pic1Atlas))
		{
			json["f"] = pic1Atlas.ToString();
		}
		if (!String.IsNullOrEmpty(pic1))
		{
			json["g"] = pic1.ToString();
		}
		if (!String.IsNullOrEmpty(pic2))
		{
			json["h"] = pic2.ToString();
		}
		if (0 != value)
		{
			json["i"] = value;
		}

		json["j"] = new JsonData();
		json["j"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in itemList)
		{
			json["j"].Add(temp.Encode());
		}
		if (0 != buyCount)
		{
			json["k"] = buyCount;
		}

		if (0 != buyCountLimit)
		{
			json["l"] = buyCountLimit;
		}

		json["m"] = payProduct.Encode();
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				uid = json["b"].ToString();
			}
			if (oKeys.Contains("c"))
			{
				id = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				name = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				priority = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				pic1Atlas = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				pic1 = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				pic2 = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				value = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(j_item);
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				buyCount = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				buyCountLimit = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				payProduct.Decode(json["m"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("PointActivityPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class PointActivityPurchasePurchaseList
{
	public List<PointActivityPurchase> purchaseList = new List<PointActivityPurchase>();

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["purchaseList"] = new JsonData();
		json["purchaseList"].SetJsonType(JsonType.Array);
		foreach(PointActivityPurchase temp in purchaseList)
		{
			json["purchaseList"].Add(temp.GetJsonData());
		}
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		json["b"] = new JsonData();
		json["b"].SetJsonType(JsonType.Array);
		foreach(PointActivityPurchase temp in purchaseList)
		{
			json["b"].Add(temp.Encode());
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				foreach(JsonData b_item in json["b"])
				{
					PointActivityPurchase temp = new PointActivityPurchase();
					temp.Decode(b_item);
					purchaseList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("PointActivityPurchasePurchaseList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_PointActivityPurchase : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_PointActivityPurchase_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_PointActivityPurchase()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_PointActivityPurchase : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_PointActivityPurchase_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public int purchaseRemainTime = 0;
	public PointActivityPurchasePurchaseList pointActivityPurchaseList = new PointActivityPurchasePurchaseList();

	public Response_Pay_PointActivityPurchase()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		purchaseRemainTime = 0;
		pointActivityPurchaseList =  new PointActivityPurchasePurchaseList();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				purchaseRemainTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				pointActivityPurchaseList.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_PointActivityPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["purchaseRemainTime"] = purchaseRemainTime;
		json["pointActivityPurchaseList"] = pointActivityPurchaseList.GetJsonData();
		return json.ToJson();
	}
#endif
}




public class OneOperatingActivityInfo
{
	public int rowId = 0;
	public int index = 0;
	public int id = 0;
	public int type = 0; //enum EOperatingActivityInfoType
	public int remainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rowId"] = rowId;
		json["index"] = index;
		json["id"] = id;
		json["type"] = type;
		json["remainTime"] = remainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != rowId)
		{
			json["b"] = rowId;
		}

		if (0 != index)
		{
			json["c"] = index;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		if (0 != type)
		{
			json["e"] = type;
		}

		if (0 != remainTime)
		{
			json["f"] = remainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				rowId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				index = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				id = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				type = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				remainTime = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneOperatingActivityRewardData
{
	public int id = 0;
	public OneRewardItem item = new OneRewardItem();
	public int state = 0; //enum EOperatingActivityRewardState
	public int vipFlag = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["item"] = item.GetJsonData();
		json["state"] = state;
		json["vipFlag"] = vipFlag;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		json["c"] = item.Encode();
		if (0 != state)
		{
			json["d"] = state;
		}

		if (0 != vipFlag)
		{
			json["e"] = vipFlag;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				item.Decode(json["c"]);
			}

			if (oKeys.Contains("d"))
			{
				state = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				vipFlag = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityRewardData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneOperatingActivityRewardInfo
{
	public int groupId = 0;
	public List<OneOperatingActivityRewardData> rewardList = new List<OneOperatingActivityRewardData>();
	public int needPoint = 0;
	public int userNeedPoint = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["groupId"] = groupId;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardData temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["needPoint"] = needPoint;
		json["userNeedPoint"] = userNeedPoint;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != groupId)
		{
			json["b"] = groupId;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardData temp in rewardList)
		{
			json["c"].Add(temp.Encode());
		}
		if (0 != needPoint)
		{
			json["d"] = needPoint;
		}

		if (0 != userNeedPoint)
		{
			json["e"] = userNeedPoint;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				groupId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					OneOperatingActivityRewardData temp = new OneOperatingActivityRewardData();
					temp.Decode(c_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				needPoint = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				userNeedPoint = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityRewardInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OneOperatingActivityExchangeInfo
{
	public int index = 0;
	public int itemId = 0;
	public int itemType = 0; //enum EItemType
	public int cost = 0;
	public int state = 0; //enum EOperatingActivityExchangeState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["index"] = index;
		json["itemId"] = itemId;
		json["itemType"] = itemType;
		json["cost"] = cost;
		json["state"] = state;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != index)
		{
			json["b"] = index;
		}

		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != itemType)
		{
			json["d"] = itemType;
		}

		if (0 != cost)
		{
			json["e"] = cost;
		}

		if (0 != state)
		{
			json["f"] = state;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				index = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				itemType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				cost = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				state = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityExchangeInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_OperatingActivity_Check : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_Check_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_Check()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_Check : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_Check_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityInfo> list = new List<OneOperatingActivityInfo>();

	public Response_OperatingActivity_Check()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityInfo temp = new OneOperatingActivityInfo();
					temp.Decode(f_item);
					list.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_Check Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["list"] = new JsonData();
		json["list"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityInfo temp in list)
		{
			json["list"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_CheckReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_CheckReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_CheckReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_CheckReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_CheckReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityRewardInfo> rewardList = new List<OneOperatingActivityRewardInfo>();
	public int activityPoint = 0;

	public Response_OperatingActivity_CheckReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityRewardInfo temp = new OneOperatingActivityRewardInfo();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				activityPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_CheckReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["activityPoint"] = activityPoint;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_CheckExchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_CheckExchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_CheckExchange()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_CheckExchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_CheckExchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityExchangeInfo> exchangeList = new List<OneOperatingActivityExchangeInfo>();
	public int exRefreshRemainTime = 0;
	public int operatingActivityCoin = 0;
	public int coinCheckFlag = 0;

	public Response_OperatingActivity_CheckExchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exRefreshRemainTime = 0;
		operatingActivityCoin = 0;
		coinCheckFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityExchangeInfo temp = new OneOperatingActivityExchangeInfo();
					temp.Decode(f_item);
					exchangeList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				exRefreshRemainTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				operatingActivityCoin = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				coinCheckFlag = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_CheckExchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchangeList"] = new JsonData();
		json["exchangeList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityExchangeInfo temp in exchangeList)
		{
			json["exchangeList"].Add(temp.GetJsonData());
		}
		json["exRefreshRemainTime"] = exRefreshRemainTime;
		json["operatingActivityCoin"] = operatingActivityCoin;
		json["coinCheckFlag"] = coinCheckFlag;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;
	public int id = 0;

	public Request_OperatingActivity_Reward()
	{
		groupId = 0;
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();
	public OneRewardItem reward = new OneRewardItem();

	public Response_OperatingActivity_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity_RewardChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_RewardChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();

	public Response_OperatingActivity_RewardChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_RewardChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_Exchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_Exchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int index = 0;

	public Request_OperatingActivity_Exchange()
	{
		index = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["index"] = index;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != index)
		{
			json["c"] = index;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_Exchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_Exchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityExchangeInfo exchangeItem = new OneOperatingActivityExchangeInfo();
	public int exRefreshRemainTime = 0;
	public int operatingActivityCoin = 0;

	public Response_OperatingActivity_Exchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exchangeItem =  new OneOperatingActivityExchangeInfo();
		exRefreshRemainTime = 0;
		operatingActivityCoin = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exchangeItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				exRefreshRemainTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				operatingActivityCoin = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_Exchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchangeItem"] = exchangeItem.GetJsonData();
		json["exRefreshRemainTime"] = exRefreshRemainTime;
		json["operatingActivityCoin"] = operatingActivityCoin;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_UpdateInfo : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_UpdateInfo_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int rowId = 0;
	public int index = 0;

	public Request_OperatingActivity_UpdateInfo()
	{
		rowId = 0;
		index = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["rowId"] = rowId;
		json["index"] = index;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != rowId)
		{
			json["c"] = rowId;
		}

		if (0 != index)
		{
			json["d"] = index;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_UpdateInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_UpdateInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityInfo data = new OneOperatingActivityInfo();

	public Response_OperatingActivity_UpdateInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		data =  new OneOperatingActivityInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				data.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_UpdateInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["data"] = data.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_UpdateExchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_UpdateExchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int coinFlag = 0;
	public int autoFlag = 0;

	public Request_OperatingActivity_UpdateExchange()
	{
		coinFlag = 0;
		autoFlag = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["coinFlag"] = coinFlag;
		json["autoFlag"] = autoFlag;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != coinFlag)
		{
			json["c"] = coinFlag;
		}

		if (0 != autoFlag)
		{
			json["d"] = autoFlag;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_UpdateExchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_UpdateExchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityExchangeInfo> exchangeList = new List<OneOperatingActivityExchangeInfo>();
	public int exRefreshRemainTime = 0;
	public int coinCheckFlag = 0;

	public Response_OperatingActivity_UpdateExchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exRefreshRemainTime = 0;
		coinCheckFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityExchangeInfo temp = new OneOperatingActivityExchangeInfo();
					temp.Decode(f_item);
					exchangeList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				exRefreshRemainTime = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				coinCheckFlag = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_UpdateExchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchangeList"] = new JsonData();
		json["exchangeList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityExchangeInfo temp in exchangeList)
		{
			json["exchangeList"].Add(temp.GetJsonData());
		}
		json["exRefreshRemainTime"] = exRefreshRemainTime;
		json["coinCheckFlag"] = coinCheckFlag;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity_DailyCoin : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_DailyCoin_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_DailyCoin()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_DailyCoin : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_DailyCoin_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int operatingActivityCoin = 0;
	public int coinCheckFlag = 0;

	public Response_OperatingActivity_DailyCoin()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		operatingActivityCoin = 0;
		coinCheckFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				operatingActivityCoin = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				coinCheckFlag = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_DailyCoin Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["operatingActivityCoin"] = operatingActivityCoin;
		json["coinCheckFlag"] = coinCheckFlag;
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity_EquipMakeInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_EquipMakeInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int slotId = 0;
	public int equipDrawingId = 0;
	public int makingState = 0; //enum EMakingState
	public int activityFlag = 0;

	public Response_OperatingActivity_EquipMakeInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		slotId = 0;
		equipDrawingId = 0;
		makingState = 0;
		activityFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				slotId = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				equipDrawingId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				makingState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				activityFlag = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_EquipMakeInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["slotId"] = slotId;
		json["equipDrawingId"] = equipDrawingId;
		json["makingState"] = makingState;
		json["activityFlag"] = activityFlag;
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity_ActivityPointChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_ActivityPointChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_OperatingActivity_ActivityPointChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userActivityPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_ActivityPointChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity_CoinChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_CoinChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int operatingActivityCoin = 0;

	public Response_OperatingActivity_CoinChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		operatingActivityCoin = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				operatingActivityCoin = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_CoinChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["operatingActivityCoin"] = operatingActivityCoin;
		return json.ToJson();
	}
#endif
}


public class OneOperatingActivityStringData
{
	public int type = 0; //enum EOperatingActivityStringType
	public string CN = "";
	public string EN = "";
	public string TW = "";

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["type"] = type;
		json["CN"] = CN.ToString();
		json["EN"] = EN.ToString();
		json["TW"] = TW.ToString();
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != type)
		{
			json["b"] = type;
		}

		if (!String.IsNullOrEmpty(CN))
		{
			json["c"] = CN.ToString();
		}
		if (!String.IsNullOrEmpty(EN))
		{
			json["d"] = EN.ToString();
		}
		if (!String.IsNullOrEmpty(TW))
		{
			json["e"] = TW.ToString();
		}
		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				type = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				CN = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				EN = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				TW = json["e"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityStringData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_OperatingActivity_DataCheck : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_DataCheck_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_DataCheck()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_DataCheck : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_DataCheck_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityPoint = 0;
	public int userActivityPoint = 0;
	public int operatingActivityCoin = 0;
	public int flag = 0;
	public int endTime = 0;
	public List<OneOperatingActivityStringData> stringList = new List<OneOperatingActivityStringData>();
	public int version = 0;

	public Response_OperatingActivity_DataCheck()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
		userActivityPoint = 0;
		operatingActivityCoin = 0;
		flag = 0;
		endTime = 0;
		version = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userActivityPoint = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				operatingActivityCoin = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				flag = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				endTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneOperatingActivityStringData temp = new OneOperatingActivityStringData();
					temp.Decode(k_item);
					stringList.Add(temp);
				}
			}
			if (oKeys.Contains("l"))
			{
				version = Int32.Parse(json["l"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_DataCheck Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		json["operatingActivityCoin"] = operatingActivityCoin;
		json["flag"] = flag;
		json["endTime"] = endTime;
		json["stringList"] = new JsonData();
		json["stringList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityStringData temp in stringList)
		{
			json["stringList"].Add(temp.GetJsonData());
		}
		json["version"] = version;
		return json.ToJson();
	}
#endif
}

public class OneOperatingActivityUnionRankInfo
{
	public int rank = 0;
	public string userId = "";
	public string name = "";
	public int gender = 0;
	public RoleDress userDress = new RoleDress();
	public int point = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rank"] = rank;
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["gender"] = gender;
		json["userDress"] = userDress.GetJsonData();
		json["point"] = point;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != rank)
		{
			json["b"] = rank;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(name))
		{
			json["d"] = name.ToString();
		}
		if (0 != gender)
		{
			json["e"] = gender;
		}

		json["f"] = userDress.Encode();
		if (0 != point)
		{
			json["g"] = point;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				rank = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				userId = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				name = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				gender = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				userDress.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				point = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOperatingActivityUnionRankInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_OperatingActivity_UnionRankList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity_UnionRankList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity_UnionRankList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity_UnionRankList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity_UnionRankList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityUnionRankInfo> rankList = new List<OneOperatingActivityUnionRankInfo>();
	public OneOperatingActivityUnionRankInfo userRank = new OneOperatingActivityUnionRankInfo();

	public Response_OperatingActivity_UnionRankList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userRank =  new OneOperatingActivityUnionRankInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityUnionRankInfo temp = new OneOperatingActivityUnionRankInfo();
					temp.Decode(f_item);
					rankList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				userRank.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity_UnionRankList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rankList"] = new JsonData();
		json["rankList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityUnionRankInfo temp in rankList)
		{
			json["rankList"].Add(temp.GetJsonData());
		}
		json["userRank"] = userRank.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_DataCheck : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_DataCheck_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity2_DataCheck()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_DataCheck : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_DataCheck_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityPoint = 0;
	public int userActivityPoint = 0;
	public int flag = 0;
	public int checkFlag = 0;
	public int endTime = 0;
	public List<OneOperatingActivityStringData> stringList = new List<OneOperatingActivityStringData>();
	public int version = 0;
	public int bossId = 0;
	public int process = 0;

	public Response_OperatingActivity2_DataCheck()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
		userActivityPoint = 0;
		flag = 0;
		checkFlag = 0;
		endTime = 0;
		version = 0;
		bossId = 0;
		process = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userActivityPoint = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				flag = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				checkFlag = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				endTime = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				foreach(JsonData k_item in json["k"])
				{
					OneOperatingActivityStringData temp = new OneOperatingActivityStringData();
					temp.Decode(k_item);
					stringList.Add(temp);
				}
			}
			if (oKeys.Contains("l"))
			{
				version = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				bossId = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				process = Int32.Parse(json["n"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_DataCheck Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		json["flag"] = flag;
		json["checkFlag"] = checkFlag;
		json["endTime"] = endTime;
		json["stringList"] = new JsonData();
		json["stringList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityStringData temp in stringList)
		{
			json["stringList"].Add(temp.GetJsonData());
		}
		json["version"] = version;
		json["bossId"] = bossId;
		json["process"] = process;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_CheckReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_CheckReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity2_CheckReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_CheckReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_CheckReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityRewardInfo> rewardList = new List<OneOperatingActivityRewardInfo>();
	public int activityPoint = 0;

	public Response_OperatingActivity2_CheckReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityRewardInfo temp = new OneOperatingActivityRewardInfo();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				activityPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_CheckReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["activityPoint"] = activityPoint;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;
	public int id = 0;

	public Request_OperatingActivity2_Reward()
	{
		groupId = 0;
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();
	public OneRewardItem reward = new OneRewardItem();

	public Response_OperatingActivity2_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity2_ActivityPointChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_ActivityPointChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_OperatingActivity2_ActivityPointChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userActivityPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_ActivityPointChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Response_OperatingActivity2_RewardChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_RewardChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();

	public Response_OperatingActivity2_RewardChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_RewardChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_DailyReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_DailyReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity2_DailyReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_DailyReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_DailyReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneRewardItem item = new OneRewardItem();
	public int checkFlag = 0;

	public Response_OperatingActivity2_DailyReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		item =  new OneRewardItem();
		checkFlag = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				item.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				checkFlag = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_DailyReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["item"] = item.GetJsonData();
		json["checkFlag"] = checkFlag;
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_UnionRankList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_UnionRankList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_OperatingActivity2_UnionRankList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_UnionRankList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_UnionRankList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityUnionRankInfo> rankList = new List<OneOperatingActivityUnionRankInfo>();
	public OneOperatingActivityUnionRankInfo userRank = new OneOperatingActivityUnionRankInfo();

	public Response_OperatingActivity2_UnionRankList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userRank =  new OneOperatingActivityUnionRankInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityUnionRankInfo temp = new OneOperatingActivityUnionRankInfo();
					temp.Decode(f_item);
					rankList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				userRank.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_UnionRankList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rankList"] = new JsonData();
		json["rankList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityUnionRankInfo temp in rankList)
		{
			json["rankList"].Add(temp.GetJsonData());
		}
		json["userRank"] = userRank.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_ExploreStart : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_ExploreStart_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;
	public int exploreId = 0;
	public int exploreType = 0;
	public int useItemId = 0;
	public string heroInfoUIds = "";

	public Request_OperatingActivity2_ExploreStart()
	{
		exploreSlotId = 0;
		exploreId = 0;
		exploreType = 0;
		useItemId = 0;
		heroInfoUIds = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		json["exploreId"] = exploreId;
		json["exploreType"] = exploreType;
		json["useItemId"] = useItemId;
		json["heroInfoUIds"] = heroInfoUIds.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		if (0 != exploreId)
		{
			json["d"] = exploreId;
		}

		if (0 != exploreType)
		{
			json["e"] = exploreType;
		}

		if (0 != useItemId)
		{
			json["f"] = useItemId;
		}

		if (!String.IsNullOrEmpty(heroInfoUIds))
		{
			json["g"] = heroInfoUIds.ToString();
		}
		return json.ToJson();
	}
}

public class Response_OperatingActivity2_ExploreStart : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_ExploreStart_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public List<HeroInfo> heroInfo = new List<HeroInfo>();

	public Response_OperatingActivity2_ExploreStart()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(g_item);
					heroInfo.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_ExploreStart Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_ExploreEnd : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_ExploreEnd_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;

	public Request_OperatingActivity2_ExploreEnd()
	{
		exploreSlotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_ExploreEnd : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_ExploreEnd_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public int exploreId = 0;
	public int resultState = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public List<HeroBrokenEquip> brokeEquipList = new List<HeroBrokenEquip>();
	public int getMoney = 0;
	public List<HeroInfo> heroInfo = new List<HeroInfo>();
	public CombatReport combatReport = new CombatReport();

	public Response_OperatingActivity2_ExploreEnd()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
		exploreId = 0;
		resultState = 0;
		getMoney = 0;
		combatReport =  new CombatReport();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				exploreId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				resultState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					HeroBrokenEquip temp = new HeroBrokenEquip();
					temp.Decode(j_item);
					brokeEquipList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				getMoney = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				foreach(JsonData l_item in json["l"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(l_item);
					heroInfo.Add(temp);
				}
			}
			if (oKeys.Contains("m"))
			{
				combatReport.Decode(json["m"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_ExploreEnd Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["exploreId"] = exploreId;
		json["resultState"] = resultState;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["brokeEquipList"] = new JsonData();
		json["brokeEquipList"].SetJsonType(JsonType.Array);
		foreach(HeroBrokenEquip temp in brokeEquipList)
		{
			json["brokeEquipList"].Add(temp.GetJsonData());
		}
		json["getMoney"] = getMoney;
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		json["combatReport"] = combatReport.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_OperatingActivity2_ExploreImmediately : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_OperatingActivity2_ExploreImmediately_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_OperatingActivity2_ExploreImmediately()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_OperatingActivity2_ExploreImmediately : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_OperatingActivity2_ExploreImmediately_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();

	public Response_OperatingActivity2_ExploreImmediately()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_OperatingActivity2_ExploreImmediately Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class Request_AD_Start : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_AD_Start_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int adType = 0; //enum EAdType

	public Request_AD_Start()
	{
		adType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["adType"] = adType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != adType)
		{
			json["c"] = adType;
		}

		return json.ToJson();
	}
}

public class Response_AD_Start : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_AD_Start_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int adType = 0; //enum EAdType
	public string adId = "";

	public Response_AD_Start()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		adType = 0;
		adId = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				adType = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				adId = json["g"].ToString();
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_AD_Start Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["adType"] = adType;
		json["adId"] = adId.ToString();
		return json.ToJson();
	}
#endif
}

public class Request_AD_End : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_AD_End_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int adType = 0; //enum EAdType
	public string adId = "";
	public string option1 = "";
	public string option2 = "";
	public string option3 = "";
	public string option4 = "";
	public string option5 = "";

	public Request_AD_End()
	{
		adType = 0;
		adId = String.Empty;
		option1 = String.Empty;
		option2 = String.Empty;
		option3 = String.Empty;
		option4 = String.Empty;
		option5 = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["adType"] = adType;
		json["adId"] = adId.ToString();
		json["option1"] = option1.ToString();
		json["option2"] = option2.ToString();
		json["option3"] = option3.ToString();
		json["option4"] = option4.ToString();
		json["option5"] = option5.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != adType)
		{
			json["c"] = adType;
		}

		if (!String.IsNullOrEmpty(adId))
		{
			json["d"] = adId.ToString();
		}
		if (!String.IsNullOrEmpty(option1))
		{
			json["e"] = option1.ToString();
		}
		if (!String.IsNullOrEmpty(option2))
		{
			json["f"] = option2.ToString();
		}
		if (!String.IsNullOrEmpty(option3))
		{
			json["g"] = option3.ToString();
		}
		if (!String.IsNullOrEmpty(option4))
		{
			json["h"] = option4.ToString();
		}
		if (!String.IsNullOrEmpty(option5))
		{
			json["i"] = option5.ToString();
		}
		return json.ToJson();
	}
}

public class Response_AD_End : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_AD_End_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int adType = 0; //enum EAdType

	public Response_AD_End()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		adType = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				adType = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_AD_End Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["adType"] = adType;
		return json.ToJson();
	}
#endif
}

public class OneAdInfo
{
	public int adType = 0; //enum EAdType
	public int adCount = 0;
	public int adTotalCount = 0;
	public int adDayRemain = 0;
	public int vipCount = 0;
	public int vipTotalCount = 0;
	public int vipDayRemain = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["adType"] = adType;
		json["adCount"] = adCount;
		json["adTotalCount"] = adTotalCount;
		json["adDayRemain"] = adDayRemain;
		json["vipCount"] = vipCount;
		json["vipTotalCount"] = vipTotalCount;
		json["vipDayRemain"] = vipDayRemain;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != adType)
		{
			json["b"] = adType;
		}

		if (0 != adCount)
		{
			json["c"] = adCount;
		}

		if (0 != adTotalCount)
		{
			json["d"] = adTotalCount;
		}

		if (0 != adDayRemain)
		{
			json["e"] = adDayRemain;
		}

		if (0 != vipCount)
		{
			json["f"] = vipCount;
		}

		if (0 != vipTotalCount)
		{
			json["g"] = vipTotalCount;
		}

		if (0 != vipDayRemain)
		{
			json["h"] = vipDayRemain;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				adType = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				adCount = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				adTotalCount = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				adDayRemain = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				vipCount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				vipTotalCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				vipDayRemain = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneAdInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_AD_UserData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_AD_UserData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_AD_UserData()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_AD_UserData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_AD_UserData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int adLevel = 0;
	public List<OneAdInfo> adList = new List<OneAdInfo>();

	public Response_AD_UserData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		adLevel = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				adLevel = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneAdInfo temp = new OneAdInfo();
					temp.Decode(g_item);
					adList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_AD_UserData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["adLevel"] = adLevel;
		json["adList"] = new JsonData();
		json["adList"].SetJsonType(JsonType.Array);
		foreach(OneAdInfo temp in adList)
		{
			json["adList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}



public class OneOnlineRewardInfo
{
	public int rewardIndex = 0;
	public int rewardId = 0;
	public int rewardType = 0;
	public int rewardItemId = 0;
	public int rewardCount = 0;
	public int rewardState = 0; //enum EOnlineRewardState
	public int remainTime = 0;
	public string nameCn = "";
	public string nameEn = "";
	public string nameTw = "";
	public int type = 0; //enum EOnlineRewardType
	public int startTime = 0;
	public int endTime = 0;
	public int endRemainTime = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rewardIndex"] = rewardIndex;
		json["rewardId"] = rewardId;
		json["rewardType"] = rewardType;
		json["rewardItemId"] = rewardItemId;
		json["rewardCount"] = rewardCount;
		json["rewardState"] = rewardState;
		json["remainTime"] = remainTime;
		json["nameCn"] = nameCn.ToString();
		json["nameEn"] = nameEn.ToString();
		json["nameTw"] = nameTw.ToString();
		json["type"] = type;
		json["startTime"] = startTime;
		json["endTime"] = endTime;
		json["endRemainTime"] = endRemainTime;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != rewardIndex)
		{
			json["b"] = rewardIndex;
		}

		if (0 != rewardId)
		{
			json["c"] = rewardId;
		}

		if (0 != rewardType)
		{
			json["d"] = rewardType;
		}

		if (0 != rewardItemId)
		{
			json["e"] = rewardItemId;
		}

		if (0 != rewardCount)
		{
			json["f"] = rewardCount;
		}

		if (0 != rewardState)
		{
			json["g"] = rewardState;
		}

		if (0 != remainTime)
		{
			json["h"] = remainTime;
		}

		if (!String.IsNullOrEmpty(nameCn))
		{
			json["i"] = nameCn.ToString();
		}
		if (!String.IsNullOrEmpty(nameEn))
		{
			json["j"] = nameEn.ToString();
		}
		if (!String.IsNullOrEmpty(nameTw))
		{
			json["k"] = nameTw.ToString();
		}
		if (0 != type)
		{
			json["l"] = type;
		}

		if (0 != startTime)
		{
			json["m"] = startTime;
		}

		if (0 != endTime)
		{
			json["n"] = endTime;
		}

		if (0 != endRemainTime)
		{
			json["o"] = endRemainTime;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				rewardIndex = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				rewardId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				rewardType = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				rewardItemId = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				rewardCount = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				rewardState = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				remainTime = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				nameCn = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				nameEn = json["j"].ToString();
			}
			if (oKeys.Contains("k"))
			{
				nameTw = json["k"].ToString();
			}
			if (oKeys.Contains("l"))
			{
				type = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				startTime = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				endTime = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				endRemainTime = Int32.Parse(json["o"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneOnlineRewardInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_OnlineRewardList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_OnlineRewardList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_OnlineRewardList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_OnlineRewardList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_OnlineRewardList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOnlineRewardInfo> onlineRewardList = new List<OneOnlineRewardInfo>();

	public Response_User_OnlineRewardList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOnlineRewardInfo temp = new OneOnlineRewardInfo();
					temp.Decode(f_item);
					onlineRewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_OnlineRewardList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["onlineRewardList"] = new JsonData();
		json["onlineRewardList"].SetJsonType(JsonType.Array);
		foreach(OneOnlineRewardInfo temp in onlineRewardList)
		{
			json["onlineRewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_OnlineRewardListReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_OnlineRewardListReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int rewardIndex = 0;

	public Request_User_OnlineRewardListReward()
	{
		rewardIndex = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["rewardIndex"] = rewardIndex;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != rewardIndex)
		{
			json["c"] = rewardIndex;
		}

		return json.ToJson();
	}
}

public class Response_User_OnlineRewardListReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_OnlineRewardListReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOnlineRewardInfo> onlineRewardList = new List<OneOnlineRewardInfo>();
	public OneRewardItem rewardItem = new OneRewardItem();

	public Response_User_OnlineRewardListReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOnlineRewardInfo temp = new OneOnlineRewardInfo();
					temp.Decode(f_item);
					onlineRewardList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				rewardItem.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_OnlineRewardListReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["onlineRewardList"] = new JsonData();
		json["onlineRewardList"].SetJsonType(JsonType.Array);
		foreach(OneOnlineRewardInfo temp in onlineRewardList)
		{
			json["onlineRewardList"].Add(temp.GetJsonData());
		}
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class OneRankInfo
{
	public int rank = 0;
	public string userId = "";
	public string name = "";
	public string unionName = "";
	public int number = 0;
	public RoleDress userDress = new RoleDress();
	public int gender = 0; //enum EGender
	public string heroUid = "";
	public List<int> heroEquipList = new List<int>();
	public int heroId = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["rank"] = rank;
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["unionName"] = unionName.ToString();
		json["number"] = number;
		json["userDress"] = userDress.GetJsonData();
		json["gender"] = gender;
		json["heroUid"] = heroUid.ToString();
		json["heroEquipList"] = new JsonData();
		json["heroEquipList"].SetJsonType(JsonType.Array);
		foreach(int temp in heroEquipList)
		{
			json["heroEquipList"].Add(temp);
		}
		json["heroId"] = heroId;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != rank)
		{
			json["b"] = rank;
		}

		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(name))
		{
			json["d"] = name.ToString();
		}
		if (!String.IsNullOrEmpty(unionName))
		{
			json["e"] = unionName.ToString();
		}
		if (0 != number)
		{
			json["f"] = number;
		}

		json["g"] = userDress.Encode();
		if (0 != gender)
		{
			json["h"] = gender;
		}

		if (!String.IsNullOrEmpty(heroUid))
		{
			json["i"] = heroUid.ToString();
		}
		json["j"] = new JsonData();
		json["j"].SetJsonType(JsonType.Array);
		foreach(int temp in heroEquipList)
		{
			json["j"].Add(temp);
		}
		if (0 != heroId)
		{
			json["k"] = heroId;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				rank = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				userId = json["c"].ToString();
			}
			if (oKeys.Contains("d"))
			{
				name = json["d"].ToString();
			}
			if (oKeys.Contains("e"))
			{
				unionName = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				number = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userDress.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				gender = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				heroUid = json["i"].ToString();
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					int temp = Int32.Parse(j_item.ToString());
					heroEquipList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				heroId = Int32.Parse(json["k"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneRankInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_User_SearchHeroInfo : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_SearchHeroInfo_Cmd;
	public MsgHead msgHead = new MsgHead();
	public string userId = "";
	public string heroUid = "";

	public Request_User_SearchHeroInfo()
	{
		userId = String.Empty;
		heroUid = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["userId"] = userId.ToString();
		json["heroUid"] = heroUid.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (!String.IsNullOrEmpty(userId))
		{
			json["c"] = userId.ToString();
		}
		if (!String.IsNullOrEmpty(heroUid))
		{
			json["d"] = heroUid.ToString();
		}
		return json.ToJson();
	}
}

public class Response_User_SearchHeroInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_SearchHeroInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string userId = "";
	public string name = "";
	public HeroInfo heroInfo = new HeroInfo();

	public Response_User_SearchHeroInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userId = String.Empty;
		name = String.Empty;
		heroInfo =  new HeroInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userId = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				name = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				heroInfo.Decode(json["h"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_SearchHeroInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userId"] = userId.ToString();
		json["name"] = name.ToString();
		json["heroInfo"] = heroInfo.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_User_RankList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_RankList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int rankListType = 0; //enum ERankListType

	public Request_User_RankList()
	{
		rankListType = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["rankListType"] = rankListType;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != rankListType)
		{
			json["c"] = rankListType;
		}

		return json.ToJson();
	}
}

public class Response_User_RankList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_RankList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneRankInfo> rankList = new List<OneRankInfo>();
	public OneRankInfo userRank = new OneRankInfo();
	public int rankId = 0;
	public int rankListType = 0; //enum ERankListType

	public Response_User_RankList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userRank =  new OneRankInfo();
		rankId = 0;
		rankListType = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneRankInfo temp = new OneRankInfo();
					temp.Decode(f_item);
					rankList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				userRank.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				rankId = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				rankListType = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_RankList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rankList"] = new JsonData();
		json["rankList"].SetJsonType(JsonType.Array);
		foreach(OneRankInfo temp in rankList)
		{
			json["rankList"].Add(temp.GetJsonData());
		}
		json["userRank"] = userRank.GetJsonData();
		json["rankId"] = rankId;
		json["rankListType"] = rankListType;
		return json.ToJson();
	}
#endif
}

public class Response_User_ProsperityLevelUp : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_ProsperityLevelUp_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int level = 0;

	public Response_User_ProsperityLevelUp()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		level = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				level = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_ProsperityLevelUp Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["level"] = level;
		return json.ToJson();
	}
#endif
}


public class OneShopperLevelRewardInfo
{
	public int id = 0;
	public int state = 0; //enum EShopperLevelRewardState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["state"] = state;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != state)
		{
			json["c"] = state;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				state = Int32.Parse(json["c"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneShopperLevelRewardInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Pay_ShopperLevelPurchase : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Pay_ShopperLevelPurchase_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Pay_ShopperLevelPurchase()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Pay_ShopperLevelPurchase : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Pay_ShopperLevelPurchase_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public string flag = "";
	public string googleOrderInfo = "";
	public string iosOrderInfo = "";
	public int payActivityId = 0;
	public List<OneShopperLevelRewardInfo> rewardList = new List<OneShopperLevelRewardInfo>();

	public Response_Pay_ShopperLevelPurchase()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		flag = String.Empty;
		googleOrderInfo = String.Empty;
		iosOrderInfo = String.Empty;
		payActivityId = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				flag = json["f"].ToString();
			}
			if (oKeys.Contains("g"))
			{
				googleOrderInfo = json["g"].ToString();
			}
			if (oKeys.Contains("h"))
			{
				iosOrderInfo = json["h"].ToString();
			}
			if (oKeys.Contains("i"))
			{
				payActivityId = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					OneShopperLevelRewardInfo temp = new OneShopperLevelRewardInfo();
					temp.Decode(j_item);
					rewardList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Pay_ShopperLevelPurchase Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["flag"] = flag.ToString();
		json["googleOrderInfo"] = googleOrderInfo.ToString();
		json["iosOrderInfo"] = iosOrderInfo.ToString();
		json["payActivityId"] = payActivityId;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneShopperLevelRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_User_ShopperLevelPurchaseReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_ShopperLevelPurchaseReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int id = 0;

	public Request_User_ShopperLevelPurchaseReward()
	{
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != id)
		{
			json["c"] = id;
		}

		return json.ToJson();
	}
}

public class Response_User_ShopperLevelPurchaseReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_ShopperLevelPurchaseReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneShopperLevelRewardInfo> rewardList = new List<OneShopperLevelRewardInfo>();
	public List<OneRewardItem> rewardItemList = new List<OneRewardItem>();

	public Response_User_ShopperLevelPurchaseReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneShopperLevelRewardInfo temp = new OneShopperLevelRewardInfo();
					temp.Decode(f_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardItemList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_ShopperLevelPurchaseReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneShopperLevelRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["rewardItemList"] = new JsonData();
		json["rewardItemList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardItemList)
		{
			json["rewardItemList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}



public class Request_User_DailyBoxInfo : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_DailyBoxInfo_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_User_DailyBoxInfo()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_User_DailyBoxInfo : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_DailyBoxInfo_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int dailyBoxState = 0; //enum EUserDailyBoxState
	public int vipBoxState = 0; //enum EUserDailyBoxState

	public Response_User_DailyBoxInfo()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		dailyBoxState = 0;
		vipBoxState = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				dailyBoxState = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				vipBoxState = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_DailyBoxInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["dailyBoxState"] = dailyBoxState;
		json["vipBoxState"] = vipBoxState;
		return json.ToJson();
	}
#endif
}

public class Request_User_DailyBoxReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_User_DailyBoxReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int type = 0; //enum EUserDailyBoxRewardType

	public Request_User_DailyBoxReward()
	{
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != type)
		{
			json["c"] = type;
		}

		return json.ToJson();
	}
}

public class Response_User_DailyBoxReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_User_DailyBoxReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneRewardItem rewardItem = new OneRewardItem();

	public Response_User_DailyBoxReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_User_DailyBoxReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}


public class OneTowerInfo
{
	public int id = 0;
	public int rank = 0;
	public int index = 0;
	public int rewardState = 0; //enum ETowerExploreRewardState
	public int vipRewardState = 0; //enum ETowerExploreRewardState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["rank"] = rank;
		json["index"] = index;
		json["rewardState"] = rewardState;
		json["vipRewardState"] = vipRewardState;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != rank)
		{
			json["c"] = rank;
		}

		if (0 != index)
		{
			json["d"] = index;
		}

		if (0 != rewardState)
		{
			json["e"] = rewardState;
		}

		if (0 != vipRewardState)
		{
			json["f"] = vipRewardState;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				rank = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				index = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				rewardState = Int32.Parse(json["e"].ToString());
			}

			if (oKeys.Contains("f"))
			{
				vipRewardState = Int32.Parse(json["f"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneTowerInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Tower_Info : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Tower_Info_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Tower_Info()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Tower_Info : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Tower_Info_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int userStartFlag = 0;
	public int userRank = 0;
	public int userIndex = 0;
	public List<OneTowerInfo> towerList = new List<OneTowerInfo>();
	public int remainTime = 0;

	public Response_Tower_Info()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userStartFlag = 0;
		userRank = 0;
		userIndex = 0;
		remainTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userStartFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userRank = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				userIndex = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneTowerInfo temp = new OneTowerInfo();
					temp.Decode(i_item);
					towerList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				remainTime = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Tower_Info Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userStartFlag"] = userStartFlag;
		json["userRank"] = userRank;
		json["userIndex"] = userIndex;
		json["towerList"] = new JsonData();
		json["towerList"].SetJsonType(JsonType.Array);
		foreach(OneTowerInfo temp in towerList)
		{
			json["towerList"].Add(temp.GetJsonData());
		}
		json["remainTime"] = remainTime;
		return json.ToJson();
	}
#endif
}

public class Request_Tower_ExploreStart : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Tower_ExploreStart_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;
	public int exploreId = 0;
	public int exploreType = 0;
	public int useItemId = 0;
	public string heroInfoUIds = "";

	public Request_Tower_ExploreStart()
	{
		exploreSlotId = 0;
		exploreId = 0;
		exploreType = 0;
		useItemId = 0;
		heroInfoUIds = String.Empty;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		json["exploreId"] = exploreId;
		json["exploreType"] = exploreType;
		json["useItemId"] = useItemId;
		json["heroInfoUIds"] = heroInfoUIds.ToString();
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		if (0 != exploreId)
		{
			json["d"] = exploreId;
		}

		if (0 != exploreType)
		{
			json["e"] = exploreType;
		}

		if (0 != useItemId)
		{
			json["f"] = useItemId;
		}

		if (!String.IsNullOrEmpty(heroInfoUIds))
		{
			json["g"] = heroInfoUIds.ToString();
		}
		return json.ToJson();
	}
}

public class Response_Tower_ExploreStart : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Tower_ExploreStart_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public List<HeroInfo> heroInfo = new List<HeroInfo>();

	public Response_Tower_ExploreStart()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(g_item);
					heroInfo.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Tower_ExploreStart Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_Tower_ExploreEnd : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Tower_ExploreEnd_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int exploreSlotId = 0;

	public Request_Tower_ExploreEnd()
	{
		exploreSlotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["exploreSlotId"] = exploreSlotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != exploreSlotId)
		{
			json["c"] = exploreSlotId;
		}

		return json.ToJson();
	}
}

public class Response_Tower_ExploreEnd : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Tower_ExploreEnd_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();
	public int exploreId = 0;
	public int resultState = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public List<HeroBrokenEquip> brokeEquipList = new List<HeroBrokenEquip>();
	public int getMoney = 0;
	public List<HeroInfo> heroInfo = new List<HeroInfo>();
	public CombatReport combatReport = new CombatReport();

	public Response_Tower_ExploreEnd()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
		exploreId = 0;
		resultState = 0;
		getMoney = 0;
		combatReport =  new CombatReport();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				exploreId = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				resultState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(i_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				foreach(JsonData j_item in json["j"])
				{
					HeroBrokenEquip temp = new HeroBrokenEquip();
					temp.Decode(j_item);
					brokeEquipList.Add(temp);
				}
			}
			if (oKeys.Contains("k"))
			{
				getMoney = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				foreach(JsonData l_item in json["l"])
				{
					HeroInfo temp = new HeroInfo();
					temp.Decode(l_item);
					heroInfo.Add(temp);
				}
			}
			if (oKeys.Contains("m"))
			{
				combatReport.Decode(json["m"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Tower_ExploreEnd Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		json["exploreId"] = exploreId;
		json["resultState"] = resultState;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["brokeEquipList"] = new JsonData();
		json["brokeEquipList"].SetJsonType(JsonType.Array);
		foreach(HeroBrokenEquip temp in brokeEquipList)
		{
			json["brokeEquipList"].Add(temp.GetJsonData());
		}
		json["getMoney"] = getMoney;
		json["heroInfo"] = new JsonData();
		json["heroInfo"].SetJsonType(JsonType.Array);
		foreach(HeroInfo temp in heroInfo)
		{
			json["heroInfo"].Add(temp.GetJsonData());
		}
		json["combatReport"] = combatReport.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Tower_ExploreImmediately : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Tower_ExploreImmediately_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int slotId = 0;

	public Request_Tower_ExploreImmediately()
	{
		slotId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["slotId"] = slotId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != slotId)
		{
			json["c"] = slotId;
		}

		return json.ToJson();
	}
}

public class Response_Tower_ExploreImmediately : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Tower_ExploreImmediately_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public ExploreSlot exploreSlot = new ExploreSlot();

	public Response_Tower_ExploreImmediately()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exploreSlot =  new ExploreSlot();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exploreSlot.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Tower_ExploreImmediately Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exploreSlot"] = exploreSlot.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Tower_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Tower_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int id = 0;
	public int vipFlag = 0;

	public Request_Tower_Reward()
	{
		id = 0;
		vipFlag = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["id"] = id;
		json["vipFlag"] = vipFlag;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != id)
		{
			json["c"] = id;
		}

		if (0 != vipFlag)
		{
			json["d"] = vipFlag;
		}

		return json.ToJson();
	}
}

public class Response_Tower_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Tower_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneTowerInfo> towerList = new List<OneTowerInfo>();
	public OneRewardItem reward = new OneRewardItem();

	public Response_Tower_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneTowerInfo temp = new OneTowerInfo();
					temp.Decode(f_item);
					towerList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Tower_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["towerList"] = new JsonData();
		json["towerList"].SetJsonType(JsonType.Array);
		foreach(OneTowerInfo temp in towerList)
		{
			json["towerList"].Add(temp.GetJsonData());
		}
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}



public class OnePointActivityTaskInfo
{
	public int id = 0;
	public int type = 0;
	public int param = 0;
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public int process = 0;
	public int state = 0; //enum EPointActivityTaskState

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["type"] = type;
		json["param"] = param;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["process"] = process;
		json["state"] = state;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != type)
		{
			json["c"] = type;
		}

		if (0 != param)
		{
			json["d"] = param;
		}

		json["e"] = new JsonData();
		json["e"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["e"].Add(temp.Encode());
		}
		if (0 != process)
		{
			json["f"] = process;
		}

		if (0 != state)
		{
			json["g"] = state;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				type = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				param = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				foreach(JsonData e_item in json["e"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(e_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("f"))
			{
				process = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				state = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OnePointActivityTaskInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class OnePointActivityExchangeInfo
{
	public int id = 0;
	public int itemId = 0;
	public int needPoint = 0;
	public OneRewardItem reward = new OneRewardItem();
	public int count = 0;
	public int process = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["id"] = id;
		json["itemId"] = itemId;
		json["needPoint"] = needPoint;
		json["reward"] = reward.GetJsonData();
		json["count"] = count;
		json["process"] = process;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != id)
		{
			json["b"] = id;
		}

		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != needPoint)
		{
			json["d"] = needPoint;
		}

		json["e"] = reward.Encode();
		if (0 != count)
		{
			json["f"] = count;
		}

		if (0 != process)
		{
			json["g"] = process;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				id = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				itemId = Int32.Parse(json["c"].ToString());
			}

			if (oKeys.Contains("d"))
			{
				needPoint = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				reward.Decode(json["e"]);
			}

			if (oKeys.Contains("f"))
			{
				count = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				process = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OnePointActivityExchangeInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_PointActivity_CheckData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity_CheckData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity_CheckData()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity_CheckData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_CheckData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public List<OneOperatingActivityStringData> stringList = new List<OneOperatingActivityStringData>();
	public List<OnePointActivityTaskInfo> taskList = new List<OnePointActivityTaskInfo>();
	public int remainTime = 0;

	public Response_PointActivity_CheckData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		remainTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneOperatingActivityStringData temp = new OneOperatingActivityStringData();
					temp.Decode(g_item);
					stringList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OnePointActivityTaskInfo temp = new OnePointActivityTaskInfo();
					temp.Decode(h_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				remainTime = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_CheckData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["stringList"] = new JsonData();
		json["stringList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityStringData temp in stringList)
		{
			json["stringList"].Add(temp.GetJsonData());
		}
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityTaskInfo temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["remainTime"] = remainTime;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity_CheckExchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity_CheckExchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity_CheckExchange()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity_CheckExchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_CheckExchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int userPoint = 0;
	public int userPoint2 = 0;
	public List<OnePointActivityExchangeInfo> exchangeList = new List<OnePointActivityExchangeInfo>();
	public int exchangeFlag = 0;
	public int exchangeRemainTime = 0;

	public Response_PointActivity_CheckExchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userPoint = 0;
		userPoint2 = 0;
		exchangeFlag = 0;
		exchangeRemainTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userPoint2 = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OnePointActivityExchangeInfo temp = new OnePointActivityExchangeInfo();
					temp.Decode(h_item);
					exchangeList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				exchangeFlag = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				exchangeRemainTime = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_CheckExchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userPoint"] = userPoint;
		json["userPoint2"] = userPoint2;
		json["exchangeList"] = new JsonData();
		json["exchangeList"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityExchangeInfo temp in exchangeList)
		{
			json["exchangeList"].Add(temp.GetJsonData());
		}
		json["exchangeFlag"] = exchangeFlag;
		json["exchangeRemainTime"] = exchangeRemainTime;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity_CheckExchange2 : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity_CheckExchange2_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity_CheckExchange2()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity_CheckExchange2 : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_CheckExchange2_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int userPoint = 0;
	public int userPoint2 = 0;
	public List<OnePointActivityExchangeInfo> exchangeList2 = new List<OnePointActivityExchangeInfo>();
	public int exchangeFlag2 = 0;
	public int exchangeRemainTime2 = 0;

	public Response_PointActivity_CheckExchange2()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userPoint = 0;
		userPoint2 = 0;
		exchangeFlag2 = 0;
		exchangeRemainTime2 = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userPoint2 = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OnePointActivityExchangeInfo temp = new OnePointActivityExchangeInfo();
					temp.Decode(h_item);
					exchangeList2.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				exchangeFlag2 = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				exchangeRemainTime2 = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_CheckExchange2 Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userPoint"] = userPoint;
		json["userPoint2"] = userPoint2;
		json["exchangeList2"] = new JsonData();
		json["exchangeList2"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityExchangeInfo temp in exchangeList2)
		{
			json["exchangeList2"].Add(temp.GetJsonData());
		}
		json["exchangeFlag2"] = exchangeFlag2;
		json["exchangeRemainTime2"] = exchangeRemainTime2;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_PointActivity_Reward()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePointActivityTaskInfo task = new OnePointActivityTaskInfo();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public int userPoint = 0;
	public int userPoint2 = 0;

	public Response_PointActivity_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		task =  new OnePointActivityTaskInfo();
		userPoint = 0;
		userPoint2 = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				task.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				userPoint = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userPoint2 = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["task"] = task.GetJsonData();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["userPoint"] = userPoint;
		json["userPoint2"] = userPoint2;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity_Exchange : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity_Exchange_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int id = 0;
	public int itemId = 0;

	public Request_PointActivity_Exchange()
	{
		id = 0;
		itemId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["id"] = id;
		json["itemId"] = itemId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != id)
		{
			json["c"] = id;
		}

		if (0 != itemId)
		{
			json["d"] = itemId;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity_Exchange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_Exchange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePointActivityExchangeInfo exchange = new OnePointActivityExchangeInfo();
	public OneRewardItem reward = new OneRewardItem();
	public int userPoint = 0;
	public int userPoint2 = 0;

	public Response_PointActivity_Exchange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		exchange =  new OnePointActivityExchangeInfo();
		reward =  new OneRewardItem();
		userPoint = 0;
		userPoint2 = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				exchange.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			if (oKeys.Contains("h"))
			{
				userPoint = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userPoint2 = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_Exchange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["exchange"] = exchange.GetJsonData();
		json["reward"] = reward.GetJsonData();
		json["userPoint"] = userPoint;
		json["userPoint2"] = userPoint2;
		return json.ToJson();
	}
#endif
}

public class Response_PointActivity_TaskChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity_TaskChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OnePointActivityTaskInfo> taskList = new List<OnePointActivityTaskInfo>();

	public Response_PointActivity_TaskChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OnePointActivityTaskInfo temp = new OnePointActivityTaskInfo();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity_TaskChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityTaskInfo temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity2_CheckData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity2_CheckData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity2_CheckData()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity2_CheckData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_CheckData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public int version = 0;
	public List<OneOperatingActivityStringData> stringList = new List<OneOperatingActivityStringData>();
	public List<OnePointActivityTaskInfo> taskList = new List<OnePointActivityTaskInfo>();
	public int remainTime = 0;

	public Response_PointActivity2_CheckData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		version = 0;
		remainTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				version = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneOperatingActivityStringData temp = new OneOperatingActivityStringData();
					temp.Decode(h_item);
					stringList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				foreach(JsonData i_item in json["i"])
				{
					OnePointActivityTaskInfo temp = new OnePointActivityTaskInfo();
					temp.Decode(i_item);
					taskList.Add(temp);
				}
			}
			if (oKeys.Contains("j"))
			{
				remainTime = Int32.Parse(json["j"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_CheckData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["version"] = version;
		json["stringList"] = new JsonData();
		json["stringList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityStringData temp in stringList)
		{
			json["stringList"].Add(temp.GetJsonData());
		}
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityTaskInfo temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		json["remainTime"] = remainTime;
		return json.ToJson();
	}
#endif
}

public class Response_PointActivity2_TaskChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_TaskChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OnePointActivityTaskInfo> taskList = new List<OnePointActivityTaskInfo>();

	public Response_PointActivity2_TaskChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OnePointActivityTaskInfo temp = new OnePointActivityTaskInfo();
					temp.Decode(f_item);
					taskList.Add(temp);
				}
			}
			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_TaskChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["taskList"] = new JsonData();
		json["taskList"].SetJsonType(JsonType.Array);
		foreach(OnePointActivityTaskInfo temp in taskList)
		{
			json["taskList"].Add(temp.GetJsonData());
		}
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity2_TaskReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity2_TaskReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int taskId = 0;

	public Request_PointActivity2_TaskReward()
	{
		taskId = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["taskId"] = taskId;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != taskId)
		{
			json["c"] = taskId;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity2_TaskReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_TaskReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OnePointActivityTaskInfo task = new OnePointActivityTaskInfo();
	public List<OneRewardItem> rewardList = new List<OneRewardItem>();
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_PointActivity2_TaskReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		task =  new OnePointActivityTaskInfo();
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				task.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneRewardItem temp = new OneRewardItem();
					temp.Decode(g_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				activityPoint = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userActivityPoint = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_TaskReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["task"] = task.GetJsonData();
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneRewardItem temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity2_CheckReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity2_CheckReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity2_CheckReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity2_CheckReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_CheckReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public List<OneOperatingActivityRewardInfo> rewardList = new List<OneOperatingActivityRewardInfo>();
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_PointActivity2_CheckReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneOperatingActivityRewardInfo temp = new OneOperatingActivityRewardInfo();
					temp.Decode(g_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				activityPoint = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userActivityPoint = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_CheckReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity2_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity2_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;
	public int id = 0;

	public Request_PointActivity2_Reward()
	{
		groupId = 0;
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity2_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();
	public OneRewardItem reward = new OneRewardItem();

	public Response_PointActivity2_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_PointActivity2_RewardChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_RewardChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneOperatingActivityRewardInfo rewardItem = new OneOperatingActivityRewardInfo();

	public Response_PointActivity2_RewardChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneOperatingActivityRewardInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_RewardChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_PointActivity2_ActivityPointChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_ActivityPointChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_PointActivity2_ActivityPointChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				userActivityPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_ActivityPointChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Request_PointActivity2_UnionRankList : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_PointActivity2_UnionRankList_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_PointActivity2_UnionRankList()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_PointActivity2_UnionRankList : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_PointActivity2_UnionRankList_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<OneOperatingActivityUnionRankInfo> rankList = new List<OneOperatingActivityUnionRankInfo>();
	public OneOperatingActivityUnionRankInfo userRank = new OneOperatingActivityUnionRankInfo();

	public Response_PointActivity2_UnionRankList()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userRank =  new OneOperatingActivityUnionRankInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					OneOperatingActivityUnionRankInfo temp = new OneOperatingActivityUnionRankInfo();
					temp.Decode(f_item);
					rankList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				userRank.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_PointActivity2_UnionRankList Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rankList"] = new JsonData();
		json["rankList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityUnionRankInfo temp in rankList)
		{
			json["rankList"].Add(temp.GetJsonData());
		}
		json["userRank"] = userRank.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Dragon_CheckData : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_CheckData_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Dragon_CheckData()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_CheckData : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_CheckData_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public int version = 0;
	public List<OneOperatingActivityStringData> stringList = new List<OneOperatingActivityStringData>();
	public int remainTime = 0;
	public int currentIndex = 0;
	public int totalCount = 0;
	public int stageState = 0;
	public int stageRemainTime = 0;
	public int fightPoint = 0;
	public int equipPoint = 0;
	public int unionFightPoint = 0;
	public List<int> heroList = new List<int>();
	public List<int> itemList = new List<int>();
	public int equipCount = 0;
	public int userPoint = 0;
	public int unionPoint = 0;

	public Response_Dragon_CheckData()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		version = 0;
		remainTime = 0;
		currentIndex = 0;
		totalCount = 0;
		stageState = 0;
		stageRemainTime = 0;
		fightPoint = 0;
		equipPoint = 0;
		unionFightPoint = 0;
		equipCount = 0;
		userPoint = 0;
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				version = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				foreach(JsonData h_item in json["h"])
				{
					OneOperatingActivityStringData temp = new OneOperatingActivityStringData();
					temp.Decode(h_item);
					stringList.Add(temp);
				}
			}
			if (oKeys.Contains("i"))
			{
				remainTime = Int32.Parse(json["i"].ToString());
			}

			if (oKeys.Contains("j"))
			{
				currentIndex = Int32.Parse(json["j"].ToString());
			}

			if (oKeys.Contains("k"))
			{
				totalCount = Int32.Parse(json["k"].ToString());
			}

			if (oKeys.Contains("l"))
			{
				stageState = Int32.Parse(json["l"].ToString());
			}

			if (oKeys.Contains("m"))
			{
				stageRemainTime = Int32.Parse(json["m"].ToString());
			}

			if (oKeys.Contains("n"))
			{
				fightPoint = Int32.Parse(json["n"].ToString());
			}

			if (oKeys.Contains("o"))
			{
				equipPoint = Int32.Parse(json["o"].ToString());
			}

			if (oKeys.Contains("p"))
			{
				unionFightPoint = Int32.Parse(json["p"].ToString());
			}

			if (oKeys.Contains("q"))
			{
				foreach(JsonData q_item in json["q"])
				{
					int temp = Int32.Parse(q_item.ToString());
					heroList.Add(temp);
				}
			}
			if (oKeys.Contains("r"))
			{
				foreach(JsonData r_item in json["r"])
				{
					int temp = Int32.Parse(r_item.ToString());
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("s"))
			{
				equipCount = Int32.Parse(json["s"].ToString());
			}

			if (oKeys.Contains("t"))
			{
				userPoint = Int32.Parse(json["t"].ToString());
			}

			if (oKeys.Contains("u"))
			{
				unionPoint = Int32.Parse(json["u"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_CheckData Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["version"] = version;
		json["stringList"] = new JsonData();
		json["stringList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityStringData temp in stringList)
		{
			json["stringList"].Add(temp.GetJsonData());
		}
		json["remainTime"] = remainTime;
		json["currentIndex"] = currentIndex;
		json["totalCount"] = totalCount;
		json["stageState"] = stageState;
		json["stageRemainTime"] = stageRemainTime;
		json["fightPoint"] = fightPoint;
		json["equipPoint"] = equipPoint;
		json["unionFightPoint"] = unionFightPoint;
		json["heroList"] = new JsonData();
		json["heroList"].SetJsonType(JsonType.Array);
		foreach(int temp in heroList)
		{
			json["heroList"].Add(temp);
		}
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(int temp in itemList)
		{
			json["itemList"].Add(temp);
		}
		json["equipCount"] = equipCount;
		json["userPoint"] = userPoint;
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class OneDragonRewardInfo
{
	public int groupId = 0;
	public List<OneOperatingActivityRewardData> rewardList = new List<OneOperatingActivityRewardData>();
	public int needPoint = 0;
	public int userNeedPoint = 0;

	public JsonData GetJsonData()
	{
		JsonData json = new JsonData();
		json["groupId"] = groupId;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardData temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["needPoint"] = needPoint;
		json["userNeedPoint"] = userNeedPoint;
		return json;
	}
	public JsonData Encode()
	{
		JsonData json = new JsonData();
		json["_"] = 0;
		if (0 != groupId)
		{
			json["b"] = groupId;
		}

		json["c"] = new JsonData();
		json["c"].SetJsonType(JsonType.Array);
		foreach(OneOperatingActivityRewardData temp in rewardList)
		{
			json["c"].Add(temp.Encode());
		}
		if (0 != needPoint)
		{
			json["d"] = needPoint;
		}

		if (0 != userNeedPoint)
		{
			json["e"] = userNeedPoint;
		}

		return json;
	}
	public bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("b"))
			{
				groupId = Int32.Parse(json["b"].ToString());
			}

			if (oKeys.Contains("c"))
			{
				foreach(JsonData c_item in json["c"])
				{
					OneOperatingActivityRewardData temp = new OneOperatingActivityRewardData();
					temp.Decode(c_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("d"))
			{
				needPoint = Int32.Parse(json["d"].ToString());
			}

			if (oKeys.Contains("e"))
			{
				userNeedPoint = Int32.Parse(json["e"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("OneDragonRewardInfo Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
}

public class Request_Dragon_CheckReward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_CheckReward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int none = 0;

	public Request_Dragon_CheckReward()
	{
		none = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["none"] = none;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != none)
		{
			json["c"] = none;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_CheckReward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_CheckReward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int activityFlag = 0;
	public List<OneDragonRewardInfo> rewardList = new List<OneDragonRewardInfo>();
	public int activityPoint = 0;
	public int userActivityPoint = 0;

	public Response_Dragon_CheckReward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		activityFlag = 0;
		activityPoint = 0;
		userActivityPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				activityFlag = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				foreach(JsonData g_item in json["g"])
				{
					OneDragonRewardInfo temp = new OneDragonRewardInfo();
					temp.Decode(g_item);
					rewardList.Add(temp);
				}
			}
			if (oKeys.Contains("h"))
			{
				activityPoint = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				userActivityPoint = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_CheckReward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["activityFlag"] = activityFlag;
		json["rewardList"] = new JsonData();
		json["rewardList"].SetJsonType(JsonType.Array);
		foreach(OneDragonRewardInfo temp in rewardList)
		{
			json["rewardList"].Add(temp.GetJsonData());
		}
		json["activityPoint"] = activityPoint;
		json["userActivityPoint"] = userActivityPoint;
		return json.ToJson();
	}
#endif
}

public class Response_Dragon_StageChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_StageChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int currentIndex = 0;
	public int totalCount = 0;
	public int stageState = 0;
	public int stageRemainTime = 0;

	public Response_Dragon_StageChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		currentIndex = 0;
		totalCount = 0;
		stageState = 0;
		stageRemainTime = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				currentIndex = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				totalCount = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				stageState = Int32.Parse(json["h"].ToString());
			}

			if (oKeys.Contains("i"))
			{
				stageRemainTime = Int32.Parse(json["i"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_StageChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["currentIndex"] = currentIndex;
		json["totalCount"] = totalCount;
		json["stageState"] = stageState;
		json["stageRemainTime"] = stageRemainTime;
		return json.ToJson();
	}
#endif
}

public class Response_Dragon_PointChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_PointChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int userPoint = 0;
	public int unionPoint = 0;

	public Response_Dragon_PointChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		userPoint = 0;
		unionPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				userPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				unionPoint = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_PointChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["userPoint"] = userPoint;
		json["unionPoint"] = unionPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Dragon_Reward : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_Reward_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int groupId = 0;
	public int id = 0;

	public Request_Dragon_Reward()
	{
		groupId = 0;
		id = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["groupId"] = groupId;
		json["id"] = id;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != groupId)
		{
			json["c"] = groupId;
		}

		if (0 != id)
		{
			json["d"] = id;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_Reward : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_Reward_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneDragonRewardInfo rewardItem = new OneDragonRewardInfo();
	public OneRewardItem reward = new OneRewardItem();

	public Response_Dragon_Reward()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneDragonRewardInfo();
		reward =  new OneRewardItem();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			if (oKeys.Contains("g"))
			{
				reward.Decode(json["g"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_Reward Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		json["reward"] = reward.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Response_Dragon_RewardChange : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_RewardChange_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public OneDragonRewardInfo rewardItem = new OneDragonRewardInfo();

	public Response_Dragon_RewardChange()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		rewardItem =  new OneDragonRewardInfo();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				rewardItem.Decode(json["f"]);
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_RewardChange Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["rewardItem"] = rewardItem.GetJsonData();
		return json.ToJson();
	}
#endif
}

public class Request_Dragon_SetHero : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_SetHero_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int heroUid = 0;
	public int type = 0;

	public Request_Dragon_SetHero()
	{
		heroUid = 0;
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["heroUid"] = heroUid;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != heroUid)
		{
			json["c"] = heroUid;
		}

		if (0 != type)
		{
			json["d"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_SetHero : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_SetHero_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<int> heroList = new List<int>();
	public int fightPoint = 0;
	public int unionFightPoint = 0;

	public Response_Dragon_SetHero()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		fightPoint = 0;
		unionFightPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					int temp = Int32.Parse(f_item.ToString());
					heroList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				fightPoint = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionFightPoint = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_SetHero Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["heroList"] = new JsonData();
		json["heroList"].SetJsonType(JsonType.Array);
		foreach(int temp in heroList)
		{
			json["heroList"].Add(temp);
		}
		json["fightPoint"] = fightPoint;
		json["unionFightPoint"] = unionFightPoint;
		return json.ToJson();
	}
#endif
}

public class Request_Dragon_SetEquip : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_SetEquip_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int equipUid = 0;
	public int type = 0;

	public Request_Dragon_SetEquip()
	{
		equipUid = 0;
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["equipUid"] = equipUid;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != equipUid)
		{
			json["c"] = equipUid;
		}

		if (0 != type)
		{
			json["d"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_SetEquip : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_SetEquip_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public int equipPoint = 0;
	public int equipCount = 0;

	public Response_Dragon_SetEquip()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		equipPoint = 0;
		equipCount = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				equipPoint = Int32.Parse(json["f"].ToString());
			}

			if (oKeys.Contains("g"))
			{
				equipCount = Int32.Parse(json["g"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_SetEquip Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["equipPoint"] = equipPoint;
		json["equipCount"] = equipCount;
		return json.ToJson();
	}
#endif
}

public class Request_Dragon_SetItem : HttpMsgRqstBase
{
	public const int wCmd = MsgType.Request_Dragon_SetItem_Cmd;
	public MsgHead msgHead = new MsgHead();
	public int itemId = 0;
	public int type = 0;

	public Request_Dragon_SetItem()
	{
		itemId = 0;
		type = 0;
		msgHead.IncKeyMsgSeq();
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["itemId"] = itemId;
		json["type"] = type;
		return json.ToJson();
	}
	public override string Encode()
	{
		JsonData json = new JsonData();
		json["_0"] = msgHead.GetKeyMsgSeq();
		json["_1"] = wCmd;
		if (0 != itemId)
		{
			json["c"] = itemId;
		}

		if (0 != type)
		{
			json["d"] = type;
		}

		return json.ToJson();
	}
}

public class Response_Dragon_SetItem : HttpMsgRspdBase
{
	public const int wCmd = MsgType.Response_Dragon_SetItem_Cmd;
#if UNITY_EDITOR
	public MsgHead msgHead = new MsgHead();
#endif
	public int errorCode = 0; //enum EErrorCode
	public int timestamp = 0;
	public string message = "";
	public List<int> itemList = new List<int>();
	public int fightPoint = 0;
	public int unionFightPoint = 0;

	public Response_Dragon_SetItem()
	{
		errorCode = 0;
		timestamp = 0;
		message = String.Empty;
		fightPoint = 0;
		unionFightPoint = 0;
	}

	public override int GetCMD()
	{
		return wCmd;
	}

	public override bool Decode( JsonData json )
	{
		bool isok = false;
		try
		{
			var oKeys = json.getObjectkeys();
			if (oKeys.Contains("c"))
			{
				errorCode = Int32.Parse(json["c"].ToString());
				result = (int)errorCode;
			}

			if (oKeys.Contains("d"))
			{
				timestamp = Int32.Parse(json["d"].ToString());
				serverTime = (int)timestamp;
			}

			if (oKeys.Contains("e"))
			{
				message = json["e"].ToString();
			}
			if (oKeys.Contains("f"))
			{
				foreach(JsonData f_item in json["f"])
				{
					int temp = Int32.Parse(f_item.ToString());
					itemList.Add(temp);
				}
			}
			if (oKeys.Contains("g"))
			{
				fightPoint = Int32.Parse(json["g"].ToString());
			}

			if (oKeys.Contains("h"))
			{
				unionFightPoint = Int32.Parse(json["h"].ToString());
			}

			isok = true;
		}
		catch (Exception e)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError("Response_Dragon_SetItem Decode exception:" + e.Message);
#endif
		}
		return isok;
	}
#if UNITY_EDITOR
	public override string GetJsonParams()
	{
		JsonData json = new JsonData();
		json["msgSeq"] = msgHead.GetKeyMsgSeq();
		json["wCmd"] = wCmd;
		json["errorCode"] = errorCode;
		json["timestamp"] = timestamp;
		json["message"] = message.ToString();
		json["itemList"] = new JsonData();
		json["itemList"].SetJsonType(JsonType.Array);
		foreach(int temp in itemList)
		{
			json["itemList"].Add(temp);
		}
		json["fightPoint"] = fightPoint;
		json["unionFightPoint"] = unionFightPoint;
		return json.ToJson();
	}
#endif
}

public class MsgObjectFactory
{
    private Dictionary<int, Type> m_command2RqstObjects = new Dictionary<int, Type>();
    private Dictionary<int, Type> m_command2RspdObjects = new Dictionary<int, Type>();
    private static MsgObjectFactory s_staticIns = null;

    public static MsgObjectFactory Instance
    {
        get
        {
            if (s_staticIns == null)
            {
                s_staticIns = new MsgObjectFactory();
                //s_staticIns.InitCommand2Objects();
            }
            return s_staticIns;
        }
    }

    public HttpMsgRspdBase createRspdMsgObjectByCommand(int command)
    {
        if (command == MsgType.Response_Gm_Command_Cmd) return new Response_Gm_Command();
        if (command == MsgType.Response_Client_Error_Cmd) return new Response_Client_Error();
        if (command == MsgType.Response_Client_Af_Cmd) return new Response_Client_Af();
        if (command == MsgType.Response_Gate_Cmd) return new Response_Gate();
        if (command == MsgType.Response_Csv_List_Cmd) return new Response_Csv_List();
        if (command == MsgType.Response_Csv_Load_Cmd) return new Response_Csv_Load();
        if (command == MsgType.Response_Heartbeat_Cmd) return new Response_Heartbeat();
        if (command == MsgType.Response_Heartbeat2_Cmd) return new Response_Heartbeat2();
        if (command == MsgType.Response_Notify_Cmd) return new Response_Notify();
        if (command == MsgType.Response_User_Login_Cmd) return new Response_User_Login();
        if (command == MsgType.Response_User_Create_Cmd) return new Response_User_Create();
        if (command == MsgType.Response_User_CommonReward_Cmd) return new Response_User_CommonReward();
        if (command == MsgType.Response_User_ExchangeCodeReward_Cmd) return new Response_User_ExchangeCodeReward();
        if (command == MsgType.Response_User_Data_Cmd) return new Response_User_Data();
        if (command == MsgType.Response_User_DataChange_Cmd) return new Response_User_DataChange();
        if (command == MsgType.Response_User_ChangeName_Cmd) return new Response_User_ChangeName();
        if (command == MsgType.Response_User_DressList_Cmd) return new Response_User_DressList();
        if (command == MsgType.Response_User_BuyDress_Cmd) return new Response_User_BuyDress();
        if (command == MsgType.Response_User_Custom_Cmd) return new Response_User_Custom();
        if (command == MsgType.Response_User_Detail_Cmd) return new Response_User_Detail();
        if (command == MsgType.Response_User_SetGuide_Cmd) return new Response_User_SetGuide();
        if (command == MsgType.Response_User_SkipGuide_Cmd) return new Response_User_SkipGuide();
        if (command == MsgType.Response_User_BindingQuery_Cmd) return new Response_User_BindingQuery();
        if (command == MsgType.Response_User_Binding_Cmd) return new Response_User_Binding();
        if (command == MsgType.Response_User_BindingClaim_Cmd) return new Response_User_BindingClaim();
        if (command == MsgType.Response_User_MainTask_Cmd) return new Response_User_MainTask();
        if (command == MsgType.Response_User_MainTaskChange_Cmd) return new Response_User_MainTaskChange();
        if (command == MsgType.Response_User_MainTaskReward_Cmd) return new Response_User_MainTaskReward();
        if (command == MsgType.Response_User_TriggerGuide_Cmd) return new Response_User_TriggerGuide();
        if (command == MsgType.Response_User_CheckTriggerGuide_Cmd) return new Response_User_CheckTriggerGuide();
        if (command == MsgType.Response_User_TriggerGuideFurnitureUpgrade_Cmd) return new Response_User_TriggerGuideFurnitureUpgrade();
        if (command == MsgType.Response_User_GuideTask_Cmd) return new Response_User_GuideTask();
        if (command == MsgType.Response_User_GuideTaskChange_Cmd) return new Response_User_GuideTaskChange();
        if (command == MsgType.Response_User_GuideTaskReward_Cmd) return new Response_User_GuideTaskReward();
        if (command == MsgType.Response_User_PetInfo_Cmd) return new Response_User_PetInfo();
        if (command == MsgType.Response_User_SetMainPet_Cmd) return new Response_User_SetMainPet();
        if (command == MsgType.Response_User_BuyPetSlot_Cmd) return new Response_User_BuyPetSlot();
        if (command == MsgType.Response_User_BuyPet_Cmd) return new Response_User_BuyPet();
        if (command == MsgType.Response_User_SetPetSlot_Cmd) return new Response_User_SetPetSlot();
        if (command == MsgType.Response_User_PetChangeName_Cmd) return new Response_User_PetChangeName();
        if (command == MsgType.Response_User_PetFeed_Cmd) return new Response_User_PetFeed();
        if (command == MsgType.Response_User_PetInfoUpdate_Cmd) return new Response_User_PetInfoUpdate();
        if (command == MsgType.Response_User_UserPetInfoUpdate_Cmd) return new Response_User_UserPetInfoUpdate();
        if (command == MsgType.Response_Design_Data_Cmd) return new Response_Design_Data();
        if (command == MsgType.Response_Design_ShopUpgrade_Cmd) return new Response_Design_ShopUpgrade();
        if (command == MsgType.Response_Design_ShopRefresh_Cmd) return new Response_Design_ShopRefresh();
        if (command == MsgType.Response_Design_ShopFinish_Cmd) return new Response_Design_ShopFinish();
        if (command == MsgType.Response_Design_ShopImmediately_Cmd) return new Response_Design_ShopImmediately();
        if (command == MsgType.Response_Design_Buy_Cmd) return new Response_Design_Buy();
        if (command == MsgType.Response_Design_Move_Cmd) return new Response_Design_Move();
        if (command == MsgType.Response_Design_Upgrade_Cmd) return new Response_Design_Upgrade();
        if (command == MsgType.Response_Design_Refresh_Cmd) return new Response_Design_Refresh();
        if (command == MsgType.Response_Design_Finish_Cmd) return new Response_Design_Finish();
        if (command == MsgType.Response_Design_Immediately_Cmd) return new Response_Design_Immediately();
        if (command == MsgType.Response_Design_InStore_Cmd) return new Response_Design_InStore();
        if (command == MsgType.Response_Design_SetFloor_Cmd) return new Response_Design_SetFloor();
        if (command == MsgType.Response_Design_SetWall_Cmd) return new Response_Design_SetWall();
        if (command == MsgType.Response_Design_CounterChange_Cmd) return new Response_Design_CounterChange();
        if (command == MsgType.Response_Design_FloorChange_Cmd) return new Response_Design_FloorChange();
        if (command == MsgType.Response_Design_StoreBasketChange_Cmd) return new Response_Design_StoreBasketChange();
        if (command == MsgType.Response_Design_ResBasketChange_Cmd) return new Response_Design_ResBasketChange();
        if (command == MsgType.Response_Design_ShelfChange_Cmd) return new Response_Design_ShelfChange();
        if (command == MsgType.Response_Design_FurnitureChange_Cmd) return new Response_Design_FurnitureChange();
        if (command == MsgType.Response_Design_OnShelf_Cmd) return new Response_Design_OnShelf();
        if (command == MsgType.Response_Design_OffShelf_Cmd) return new Response_Design_OffShelf();
        if (command == MsgType.Response_Design_ShelfEquipChange_Cmd) return new Response_Design_ShelfEquipChange();
        if (command == MsgType.Response_Bag_Data_Cmd) return new Response_Bag_Data();
        if (command == MsgType.Response_Bag_ResourceChange_Cmd) return new Response_Bag_ResourceChange();
        if (command == MsgType.Response_Bag_Del_Cmd) return new Response_Bag_Del();
        if (command == MsgType.Response_Bag_LockEquip_Cmd) return new Response_Bag_LockEquip();
        if (command == MsgType.Response_Resource_ProductionList_Cmd) return new Response_Resource_ProductionList();
        if (command == MsgType.Response_Resource_ProductionRefresh_Cmd) return new Response_Resource_ProductionRefresh();
        if (command == MsgType.Response_Resource_BuyProduction_Cmd) return new Response_Resource_BuyProduction();
        if (command == MsgType.Response_Resource_BuyProductionDaily_Cmd) return new Response_Resource_BuyProductionDaily();
        if (command == MsgType.Response_Resource_ProductionChange_Cmd) return new Response_Resource_ProductionChange();
        if (command == MsgType.Response_Equip_Data_Cmd) return new Response_Equip_Data();
        if (command == MsgType.Response_Equip_BagEquipChange_Cmd) return new Response_Equip_BagEquipChange();
        if (command == MsgType.Response_Equip_EquipInfoChange_Cmd) return new Response_Equip_EquipInfoChange();
        if (command == MsgType.Response_Equip_MakeStart_Cmd) return new Response_Equip_MakeStart();
        if (command == MsgType.Response_Equip_MakeRefresh_Cmd) return new Response_Equip_MakeRefresh();
        if (command == MsgType.Response_Equip_MakeEnd_Cmd) return new Response_Equip_MakeEnd();
        if (command == MsgType.Response_Equip_MakeFaster_Cmd) return new Response_Equip_MakeFaster();
        if (command == MsgType.Response_Equip_MakeImprove_Cmd) return new Response_Equip_MakeImprove();
        if (command == MsgType.Response_Equip_BuySlot_Cmd) return new Response_Equip_BuySlot();
        if (command == MsgType.Response_Equip_Activate_Cmd) return new Response_Equip_Activate();
        if (command == MsgType.Response_Equip_FavoriteEquip_Cmd) return new Response_Equip_FavoriteEquip();
        if (command == MsgType.Response_Equip_MakingList_Cmd) return new Response_Equip_MakingList();
        if (command == MsgType.Response_DailyTask_Data_Cmd) return new Response_DailyTask_Data();
        if (command == MsgType.Response_DailyTask_Reward_Cmd) return new Response_DailyTask_Reward();
        if (command == MsgType.Response_Active_Reward_Cmd) return new Response_Active_Reward();
        if (command == MsgType.Response_DailyTask_Refresh_Cmd) return new Response_DailyTask_Refresh();
        if (command == MsgType.Response_DailyTask_Change_Cmd) return new Response_DailyTask_Change();
        if (command == MsgType.Response_Achievement_Check_Cmd) return new Response_Achievement_Check();
        if (command == MsgType.Response_Achievement_Change_Cmd) return new Response_Achievement_Change();
        if (command == MsgType.Response_Achievement_Reward_Cmd) return new Response_Achievement_Reward();
        if (command == MsgType.Response_AchievementRoad_Reward_Cmd) return new Response_AchievementRoad_Reward();
        if (command == MsgType.Response_Hero_Data_Cmd) return new Response_Hero_Data();
        if (command == MsgType.Response_Hero_FieldUnlock_Cmd) return new Response_Hero_FieldUnlock();
        if (command == MsgType.Response_Hero_BuyList_Cmd) return new Response_Hero_BuyList();
        if (command == MsgType.Response_Hero_BuyListRefresh_Cmd) return new Response_Hero_BuyListRefresh();
        if (command == MsgType.Response_Hero_Buy_Cmd) return new Response_Hero_Buy();
        if (command == MsgType.Response_Hero_Equip_Cmd) return new Response_Hero_Equip();
        if (command == MsgType.Response_Hero_EquipAuto_Cmd) return new Response_Hero_EquipAuto();
        if (command == MsgType.Response_Hero_WarriorRankUp_Cmd) return new Response_Hero_WarriorRankUp();
        if (command == MsgType.Response_Hero_Setting_Cmd) return new Response_Hero_Setting();
        if (command == MsgType.Response_Hero_Fire_Cmd) return new Response_Hero_Fire();
        if (command == MsgType.Response_Hero_Transfer_Cmd) return new Response_Hero_Transfer();
        if (command == MsgType.Response_Hero_DataRefresh_Cmd) return new Response_Hero_DataRefresh();
        if (command == MsgType.Response_Hero_Recover_Cmd) return new Response_Hero_Recover();
        if (command == MsgType.Response_Hero_FixBrokenEquip_Cmd) return new Response_Hero_FixBrokenEquip();
        if (command == MsgType.Response_Hero_Change_Cmd) return new Response_Hero_Change();
        if (command == MsgType.Response_Hero_ExchangeList_Cmd) return new Response_Hero_ExchangeList();
        if (command == MsgType.Response_Hero_Exchange_Cmd) return new Response_Hero_Exchange();
        if (command == MsgType.Response_Worker_MakeExp_Cmd) return new Response_Worker_MakeExp();
        if (command == MsgType.Response_Hero_WorkerChange_Cmd) return new Response_Hero_WorkerChange();
        if (command == MsgType.Response_Hero_WorkerUnlock_Cmd) return new Response_Hero_WorkerUnlock();
        if (command == MsgType.Response_Shopper_Data_Cmd) return new Response_Shopper_Data();
        if (command == MsgType.Response_Shopper_Coming_Cmd) return new Response_Shopper_Coming();
        if (command == MsgType.Response_Shopper_Change_Cmd) return new Response_Shopper_Change();
        if (command == MsgType.Response_Shopper_Chat_Cmd) return new Response_Shopper_Chat();
        if (command == MsgType.Response_Shopper_Discount_Cmd) return new Response_Shopper_Discount();
        if (command == MsgType.Response_Shopper_Double_Cmd) return new Response_Shopper_Double();
        if (command == MsgType.Response_Shopper_Refuse_Cmd) return new Response_Shopper_Refuse();
        if (command == MsgType.Response_Shopper_Checkout_Cmd) return new Response_Shopper_Checkout();
        if (command == MsgType.Response_Shopper_Recommend_Cmd) return new Response_Shopper_Recommend();
        if (command == MsgType.Response_Shopper_Queue_Cmd) return new Response_Shopper_Queue();
        if (command == MsgType.Response_Shopper_Energy_Cmd) return new Response_Shopper_Energy();
        if (command == MsgType.Response_PiggyBank_BaseData_Cmd) return new Response_PiggyBank_BaseData();
        if (command == MsgType.Response_PiggyBank_Props_Cmd) return new Response_PiggyBank_Props();
        if (command == MsgType.Response_Chat_Data_Cmd) return new Response_Chat_Data();
        if (command == MsgType.Response_Chat_Send_Cmd) return new Response_Chat_Send();
        if (command == MsgType.Response_Union_Data_Cmd) return new Response_Union_Data();
        if (command == MsgType.Response_Union_List_Cmd) return new Response_Union_List();
        if (command == MsgType.Response_Union_Create_Cmd) return new Response_Union_Create();
        if (command == MsgType.Response_Union_Enter_Cmd) return new Response_Union_Enter();
        if (command == MsgType.Response_Union_Leave_Cmd) return new Response_Union_Leave();
        if (command == MsgType.Response_Union_UserData_Cmd) return new Response_Union_UserData();
        if (command == MsgType.Response_Union_KickOut_Cmd) return new Response_Union_KickOut();
        if (command == MsgType.Response_Union_SetInfo_Cmd) return new Response_Union_SetInfo();
        if (command == MsgType.Response_Union_SetUserRole_Cmd) return new Response_Union_SetUserRole();
        if (command == MsgType.Response_Union_SearchUserData_Cmd) return new Response_Union_SearchUserData();
        if (command == MsgType.Response_Union_MessageInfo_Cmd) return new Response_Union_MessageInfo();
        if (command == MsgType.Response_Union_MessageInfoRefresh_Cmd) return new Response_Union_MessageInfoRefresh();
        if (command == MsgType.Response_Union_MemberHelpList_Cmd) return new Response_Union_MemberHelpList();
        if (command == MsgType.Response_Union_SetHelp_Cmd) return new Response_Union_SetHelp();
        if (command == MsgType.Response_Union_HelpMember_Cmd) return new Response_Union_HelpMember();
        if (command == MsgType.Response_Union_TaskList_Cmd) return new Response_Union_TaskList();
        if (command == MsgType.Response_Union_TaskResult_Cmd) return new Response_Union_TaskResult();
        if (command == MsgType.Response_Union_KickOutMessage_Cmd) return new Response_Union_KickOutMessage();
        if (command == MsgType.Response_Union_CheckUnionTask_Cmd) return new Response_Union_CheckUnionTask();
        if (command == MsgType.Response_Union_StartUnionTask_Cmd) return new Response_Union_StartUnionTask();
        if (command == MsgType.Response_Union_CancelUnionTask_Cmd) return new Response_Union_CancelUnionTask();
        if (command == MsgType.Response_Union_UnionTaskChange_Cmd) return new Response_Union_UnionTaskChange();
        if (command == MsgType.Response_Union_RewardUnionTask_Cmd) return new Response_Union_RewardUnionTask();
        if (command == MsgType.Response_Union_AccelUnionTask_Cmd) return new Response_Union_AccelUnionTask();
        if (command == MsgType.Response_Union_UnionTaskRankList_Cmd) return new Response_Union_UnionTaskRankList();
        if (command == MsgType.Response_Union_ScienceList_Cmd) return new Response_Union_ScienceList();
        if (command == MsgType.Response_Union_ScienceUpgrade_Cmd) return new Response_Union_ScienceUpgrade();
        if (command == MsgType.Response_Union_ScienceSkillList_Cmd) return new Response_Union_ScienceSkillList();
        if (command == MsgType.Response_Union_ScienceSkillUse_Cmd) return new Response_Union_ScienceSkillUse();
        if (command == MsgType.Response_Union_ScienceSkillRefresh_Cmd) return new Response_Union_ScienceSkillRefresh();
        if (command == MsgType.Response_Union_Impeach_Cmd) return new Response_Union_Impeach();
        if (command == MsgType.Response_Market_OneItemList_Cmd) return new Response_Market_OneItemList();
        if (command == MsgType.Response_Market_OneItemRef_Cmd) return new Response_Market_OneItemRef();
        if (command == MsgType.Response_Market_BuyOrSellOne_Cmd) return new Response_Market_BuyOrSellOne();
        if (command == MsgType.Response_Market_BoothCount_Cmd) return new Response_Market_BoothCount();
        if (command == MsgType.Response_Market_BoothData_Cmd) return new Response_Market_BoothData();
        if (command == MsgType.Response_Jackpot_Data_Cmd) return new Response_Jackpot_Data();
        if (command == MsgType.Response_Jackpot_Refresh_Cmd) return new Response_Jackpot_Refresh();
        if (command == MsgType.Response_User_BehaviorCounter_Cmd) return new Response_User_BehaviorCounter();
        if (command == MsgType.Response_User_Lottery_Cmd) return new Response_User_Lottery();
        if (command == MsgType.Response_User_LotteryTenth_Cmd) return new Response_User_LotteryTenth();
        if (command == MsgType.Response_Cumulative_Reward_Cmd) return new Response_Cumulative_Reward();
        if (command == MsgType.Response_Roulette_Recording_Cmd) return new Response_Roulette_Recording();
        if (command == MsgType.Response_Prize_Free_Cmd) return new Response_Prize_Free();
        if (command == MsgType.Response_Hero_UseHeroStatusItem_Cmd) return new Response_Hero_UseHeroStatusItem();
        if (command == MsgType.Response_Hero_UseEquipItem_Cmd) return new Response_Hero_UseEquipItem();
        if (command == MsgType.Response_Hero_UseItem_Cmd) return new Response_Hero_UseItem();
        if (command == MsgType.Response_City_BuildData_Cmd) return new Response_City_BuildData();
        if (command == MsgType.Response_City_BuildDataChanged_Cmd) return new Response_City_BuildDataChanged();
        if (command == MsgType.Response_City_BuildingRankData_Cmd) return new Response_City_BuildingRankData();
        if (command == MsgType.Response_Explore_BuySlot_Cmd) return new Response_Explore_BuySlot();
        if (command == MsgType.Response_Explore_Data_Cmd) return new Response_Explore_Data();
        if (command == MsgType.Response_Explore_Start_Cmd) return new Response_Explore_Start();
        if (command == MsgType.Response_Explore_End_Cmd) return new Response_Explore_End();
        if (command == MsgType.Response_Explore_RewardVip_Cmd) return new Response_Explore_RewardVip();
        if (command == MsgType.Response_Explore_Unlock_Cmd) return new Response_Explore_Unlock();
        if (command == MsgType.Response_ExploreSlot_Data_Cmd) return new Response_ExploreSlot_Data();
        if (command == MsgType.Response_Explore_Refresh_Cmd) return new Response_Explore_Refresh();
        if (command == MsgType.Response_Explore_Immediately_Cmd) return new Response_Explore_Immediately();
        if (command == MsgType.Response_TreasureBox_Data_Cmd) return new Response_TreasureBox_Data();
        if (command == MsgType.Response_TreasureBox_Open_Cmd) return new Response_TreasureBox_Open();
        if (command == MsgType.Response_Mail_List_Cmd) return new Response_Mail_List();
        if (command == MsgType.Response_Mail_Read_Cmd) return new Response_Mail_Read();
        if (command == MsgType.Response_Mail_Claimed_Cmd) return new Response_Mail_Claimed();
        if (command == MsgType.Response_Mail_Delete_Cmd) return new Response_Mail_Delete();
        if (command == MsgType.Response_Mail_Feedback_Cmd) return new Response_Mail_Feedback();
        if (command == MsgType.Response_Activity_List_Cmd) return new Response_Activity_List();
        if (command == MsgType.Response_Activity_DailyGiftReward_Cmd) return new Response_Activity_DailyGiftReward();
        if (command == MsgType.Response_Activity_SevenDayCheck_Cmd) return new Response_Activity_SevenDayCheck();
        if (command == MsgType.Response_Activity_SevenDayReward_Cmd) return new Response_Activity_SevenDayReward();
        if (command == MsgType.Response_Activity_SevenDayListReward_Cmd) return new Response_Activity_SevenDayListReward();
        if (command == MsgType.Response_Activity_SevenDayChange_Cmd) return new Response_Activity_SevenDayChange();
        if (command == MsgType.Response_Activity_SevenDayListChange_Cmd) return new Response_Activity_SevenDayListChange();
        if (command == MsgType.Response_Activity_Buff_Info_Cmd) return new Response_Activity_Buff_Info();
        if (command == MsgType.Response_Activity_Buff_Refresh_Cmd) return new Response_Activity_Buff_Refresh();
        if (command == MsgType.Response_Activity_Buff_Update_Cmd) return new Response_Activity_Buff_Update();
        if (command == MsgType.Response_Activity_Data_Cmd) return new Response_Activity_Data();
        if (command == MsgType.Response_Activity_Battle_Cmd) return new Response_Activity_Battle();
        if (command == MsgType.Response_Rubbish_List_Cmd) return new Response_Rubbish_List();
        if (command == MsgType.Response_Rubbish_Refresh_Cmd) return new Response_Rubbish_Refresh();
        if (command == MsgType.Response_Rubbish_Claimed_Cmd) return new Response_Rubbish_Claimed();
        if (command == MsgType.Response_Pay_Order_Cmd) return new Response_Pay_Order();
        if (command == MsgType.Response_Pay_Balance_Cmd) return new Response_Pay_Balance();
        if (command == MsgType.Response_Pay_IOSBuy_Cmd) return new Response_Pay_IOSBuy();
        if (command == MsgType.Response_Pay_AmountCheck_Cmd) return new Response_Pay_AmountCheck();
        if (command == MsgType.Response_Pay_AmountReward_Cmd) return new Response_Pay_AmountReward();
        if (command == MsgType.Response_Pay_OrderCancel_Cmd) return new Response_Pay_OrderCancel();
        if (command == MsgType.Response_Pay_GoldVip_Cmd) return new Response_Pay_GoldVip();
        if (command == MsgType.Response_Pay_GoldVipReward_Cmd) return new Response_Pay_GoldVipReward();
        if (command == MsgType.Response_Pay_StoreList_Cmd) return new Response_Pay_StoreList();
        if (command == MsgType.Response_Pay_StoreRefresh_Cmd) return new Response_Pay_StoreRefresh();
        if (command == MsgType.Response_Pay_StoreBuy_Cmd) return new Response_Pay_StoreBuy();
        if (command == MsgType.Response_Pay_BuyVIP_Cmd) return new Response_Pay_BuyVIP();
        if (command == MsgType.Response_Pay_VIPChange_Cmd) return new Response_Pay_VIPChange();
        if (command == MsgType.Response_Pay_GeneralPurchase_Cmd) return new Response_Pay_GeneralPurchase();
        if (command == MsgType.Response_Pay_DailySale_Cmd) return new Response_Pay_DailySale();
        if (command == MsgType.Response_Pay_DirectPurchase_Cmd) return new Response_Pay_DirectPurchase();
        if (command == MsgType.Response_Pay_OperatingActivityPurchase_Cmd) return new Response_Pay_OperatingActivityPurchase();
        if (command == MsgType.Response_Pay_PointActivityPurchase_Cmd) return new Response_Pay_PointActivityPurchase();
        if (command == MsgType.Response_OperatingActivity_Check_Cmd) return new Response_OperatingActivity_Check();
        if (command == MsgType.Response_OperatingActivity_CheckReward_Cmd) return new Response_OperatingActivity_CheckReward();
        if (command == MsgType.Response_OperatingActivity_CheckExchange_Cmd) return new Response_OperatingActivity_CheckExchange();
        if (command == MsgType.Response_OperatingActivity_Reward_Cmd) return new Response_OperatingActivity_Reward();
        if (command == MsgType.Response_OperatingActivity_RewardChange_Cmd) return new Response_OperatingActivity_RewardChange();
        if (command == MsgType.Response_OperatingActivity_Exchange_Cmd) return new Response_OperatingActivity_Exchange();
        if (command == MsgType.Response_OperatingActivity_UpdateInfo_Cmd) return new Response_OperatingActivity_UpdateInfo();
        if (command == MsgType.Response_OperatingActivity_UpdateExchange_Cmd) return new Response_OperatingActivity_UpdateExchange();
        if (command == MsgType.Response_OperatingActivity_DailyCoin_Cmd) return new Response_OperatingActivity_DailyCoin();
        if (command == MsgType.Response_OperatingActivity_EquipMakeInfo_Cmd) return new Response_OperatingActivity_EquipMakeInfo();
        if (command == MsgType.Response_OperatingActivity_ActivityPointChange_Cmd) return new Response_OperatingActivity_ActivityPointChange();
        if (command == MsgType.Response_OperatingActivity_CoinChange_Cmd) return new Response_OperatingActivity_CoinChange();
        if (command == MsgType.Response_OperatingActivity_DataCheck_Cmd) return new Response_OperatingActivity_DataCheck();
        if (command == MsgType.Response_OperatingActivity_UnionRankList_Cmd) return new Response_OperatingActivity_UnionRankList();
        if (command == MsgType.Response_OperatingActivity2_DataCheck_Cmd) return new Response_OperatingActivity2_DataCheck();
        if (command == MsgType.Response_OperatingActivity2_CheckReward_Cmd) return new Response_OperatingActivity2_CheckReward();
        if (command == MsgType.Response_OperatingActivity2_Reward_Cmd) return new Response_OperatingActivity2_Reward();
        if (command == MsgType.Response_OperatingActivity2_ActivityPointChange_Cmd) return new Response_OperatingActivity2_ActivityPointChange();
        if (command == MsgType.Response_OperatingActivity2_RewardChange_Cmd) return new Response_OperatingActivity2_RewardChange();
        if (command == MsgType.Response_OperatingActivity2_DailyReward_Cmd) return new Response_OperatingActivity2_DailyReward();
        if (command == MsgType.Response_OperatingActivity2_UnionRankList_Cmd) return new Response_OperatingActivity2_UnionRankList();
        if (command == MsgType.Response_OperatingActivity2_ExploreStart_Cmd) return new Response_OperatingActivity2_ExploreStart();
        if (command == MsgType.Response_OperatingActivity2_ExploreEnd_Cmd) return new Response_OperatingActivity2_ExploreEnd();
        if (command == MsgType.Response_OperatingActivity2_ExploreImmediately_Cmd) return new Response_OperatingActivity2_ExploreImmediately();
        if (command == MsgType.Response_AD_Start_Cmd) return new Response_AD_Start();
        if (command == MsgType.Response_AD_End_Cmd) return new Response_AD_End();
        if (command == MsgType.Response_AD_UserData_Cmd) return new Response_AD_UserData();
        if (command == MsgType.Response_User_OnlineRewardList_Cmd) return new Response_User_OnlineRewardList();
        if (command == MsgType.Response_User_OnlineRewardListReward_Cmd) return new Response_User_OnlineRewardListReward();
        if (command == MsgType.Response_User_SearchHeroInfo_Cmd) return new Response_User_SearchHeroInfo();
        if (command == MsgType.Response_User_RankList_Cmd) return new Response_User_RankList();
        if (command == MsgType.Response_User_ProsperityLevelUp_Cmd) return new Response_User_ProsperityLevelUp();
        if (command == MsgType.Response_Pay_ShopperLevelPurchase_Cmd) return new Response_Pay_ShopperLevelPurchase();
        if (command == MsgType.Response_User_ShopperLevelPurchaseReward_Cmd) return new Response_User_ShopperLevelPurchaseReward();
        if (command == MsgType.Response_User_DailyBoxInfo_Cmd) return new Response_User_DailyBoxInfo();
        if (command == MsgType.Response_User_DailyBoxReward_Cmd) return new Response_User_DailyBoxReward();
        if (command == MsgType.Response_Tower_Info_Cmd) return new Response_Tower_Info();
        if (command == MsgType.Response_Tower_ExploreStart_Cmd) return new Response_Tower_ExploreStart();
        if (command == MsgType.Response_Tower_ExploreEnd_Cmd) return new Response_Tower_ExploreEnd();
        if (command == MsgType.Response_Tower_ExploreImmediately_Cmd) return new Response_Tower_ExploreImmediately();
        if (command == MsgType.Response_Tower_Reward_Cmd) return new Response_Tower_Reward();
        if (command == MsgType.Response_PointActivity_CheckData_Cmd) return new Response_PointActivity_CheckData();
        if (command == MsgType.Response_PointActivity_CheckExchange_Cmd) return new Response_PointActivity_CheckExchange();
        if (command == MsgType.Response_PointActivity_CheckExchange2_Cmd) return new Response_PointActivity_CheckExchange2();
        if (command == MsgType.Response_PointActivity_Reward_Cmd) return new Response_PointActivity_Reward();
        if (command == MsgType.Response_PointActivity_Exchange_Cmd) return new Response_PointActivity_Exchange();
        if (command == MsgType.Response_PointActivity_TaskChange_Cmd) return new Response_PointActivity_TaskChange();
        if (command == MsgType.Response_PointActivity2_CheckData_Cmd) return new Response_PointActivity2_CheckData();
        if (command == MsgType.Response_PointActivity2_TaskChange_Cmd) return new Response_PointActivity2_TaskChange();
        if (command == MsgType.Response_PointActivity2_TaskReward_Cmd) return new Response_PointActivity2_TaskReward();
        if (command == MsgType.Response_PointActivity2_CheckReward_Cmd) return new Response_PointActivity2_CheckReward();
        if (command == MsgType.Response_PointActivity2_Reward_Cmd) return new Response_PointActivity2_Reward();
        if (command == MsgType.Response_PointActivity2_RewardChange_Cmd) return new Response_PointActivity2_RewardChange();
        if (command == MsgType.Response_PointActivity2_ActivityPointChange_Cmd) return new Response_PointActivity2_ActivityPointChange();
        if (command == MsgType.Response_PointActivity2_UnionRankList_Cmd) return new Response_PointActivity2_UnionRankList();
        if (command == MsgType.Response_Dragon_CheckData_Cmd) return new Response_Dragon_CheckData();
        if (command == MsgType.Response_Dragon_CheckReward_Cmd) return new Response_Dragon_CheckReward();
        if (command == MsgType.Response_Dragon_StageChange_Cmd) return new Response_Dragon_StageChange();
        if (command == MsgType.Response_Dragon_PointChange_Cmd) return new Response_Dragon_PointChange();
        if (command == MsgType.Response_Dragon_Reward_Cmd) return new Response_Dragon_Reward();
        if (command == MsgType.Response_Dragon_RewardChange_Cmd) return new Response_Dragon_RewardChange();
        if (command == MsgType.Response_Dragon_SetHero_Cmd) return new Response_Dragon_SetHero();
        if (command == MsgType.Response_Dragon_SetEquip_Cmd) return new Response_Dragon_SetEquip();
        if (command == MsgType.Response_Dragon_SetItem_Cmd) return new Response_Dragon_SetItem();
        throw new System.ArgumentException("count not find msg object for " + command);
    }

}

