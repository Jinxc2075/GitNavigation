--GoldenCityUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csUserDataProxyInst = CS.UserDataProxy.inst
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_luaList = typeof(CS.LuaListItem)
local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local csGameTimerInst = CS.GameTimer.inst
local csVector2 = CS.UnityEngine.Vector2
local csWorldParConfigManagerInst = CS.WorldParConfigManager.inst
local CS_TimeUtils = CS.TimeUtils

GoldenCityUIView = class(ViewBase)

function GoldenCityUIView:ctor()
	self.viewID = Constants.ViewName.GoldenCityUIView
	GoldenCityUIView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function GoldenCityUIView:initComp()
	local contentPane = self.contentPanel

	local superList =  contentPane:GetObjByName("scrollView")
	self.scrollView = superList:GetComponent(CS_type_superList)
	self.listItemCount = 0

	self.titleIcon = contentPane:GetGUIIcon("titleIcon")
	self.titleText = contentPane:GetText("titleText")
	self.closeBtn = contentPane:GetButton("closeBtn")
	self.timeText = contentPane:GetText("timeText")
	self.dailyBtn = contentPane:GetButton("dailyBtn")
	self.dailyIcon = contentPane:GetGUIIcon("dailyIcon")
	self.dailyNumText = contentPane:GetText("dailyNumText")
	self.bgIcon = contentPane:GetGUIIcon("bgIcon")
	self.stateGroup = contentPane:GetObjByName("stateGroup"):GetComponent("ToggleGroupMarget")
	self.toggleLinkObjs = contentPane:GetObjByName("toggleLinkObjs"):GetComponent("ObjList").objList
	self.awardBtn = contentPane:GetButton("awardBtn")
	self.boxBtn = contentPane:GetButton("boxBtn")
	self.remainSlotText = contentPane:GetText("remainSlotText")
	self.scoreItem1 = contentPane:GetButton("scoreItem1")
	self.scoreItem2 = contentPane:GetButton("scoreItem2")
	self.icon = contentPane:GetGUIIcon("icon")
	self.nameText = contentPane:GetText("nameText")
	self.bossIcon = contentPane:GetGUIIcon("bossIcon")
	self.bossNameText = contentPane:GetText("bossNameText")
	self.bossScheduleText = contentPane:GetText("bossScheduleText")
	self.bossGray = contentPane:GetImage("bossGray")
	self.bossFinishText = contentPane:GetText("bossFinishText")
	self.unlockObj = contentPane:GetObjByName("unlockObj")
	self.boxNumText = contentPane:GetText("boxNumText")
	self.boxIcon = contentPane:GetGUIIcon("boxIcon")
	self.keyNumText = contentPane:GetText("keyNumText")
	self.keyIcon = contentPane:GetGUIIcon("keyIcon")
	self.grayObj = contentPane:GetObjByName("grayObj")
	self.dailyRedPoint = contentPane:GetObjByName("dailyRedPoint")
	self.infoBtn = contentPane:GetButton("infoBtn")
	self.awardRedPoint = contentPane:GetObjByName("awardRedPoint")
	self.emptyText = contentPane:GetText("emptyText")
	self.stateRedPoint = contentPane:GetObjByName("stateRedPoint")
	self.lvbar = contentPane:GetObjByName("lvbar"):GetComponent("Slider")
	self.vipLvBg = contentPane:GetImage("vipLvBg")
	self.LVText = contentPane:GetText("LVText")
	self.huangguanImg = contentPane:GetImage("huangguanImg")
	self.goldenCityIcon = contentPane:GetGUIIcon("goldenCityIcon")
	self.scoreCountTx = contentPane:GetText("scoreCountTx")
	self.glodCountText = contentPane:GetText("glodCountText")
	self.gemCountText = contentPane:GetText("gemCountText")

	self.uiAnimator = contentPane.uiAnimator
end

function GoldenCityUIView:onInit()

	self:initComp()

	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.dailyBtn:ButtonClickTween(
		function ()
			-- 每日免费领取
			self:RewardDailyItem()
		end
	)

	self.awardBtn:ButtonClickTween(
		function ()
			-- 打开查看奖励界面
			EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.OpenUI_GoldenCityRewardList,GoldenCityDataProxy.inst:GetCurScorePointLv())
		end
	)

	self.boxBtn:ButtonClickTween(
		function ()
			-- 打开宝箱场景
			self:boxBtnClick()
		end
	)

	self.infoBtn:ButtonClickTween(
		function ()
			EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.OpenUI_GoldenCityMess,0)
		end
	)

	self.scoreItem1:ButtonClickTween(
		function ()
			EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.OpenUI_GoldenCityPrepare,self.normalCfg)
		end
	)

	self.scoreItem2:ButtonClickTween(
		function ()
			if(self.isHaveBossSlot)then

				local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
				local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
				func(
					csEventControllerInst,
					csGameEventType.SHOWUI_TEXTMSGTIP,
					cs_LanguageManagerInst:GetValueByKey("探索尚未完成"),
					csGUIHelper.GetColorByColorHex("FF2828")
				)

				return
			end

			if(GoldenCityDataProxy.inst.bossExploreIsAllOver)then
				local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
				local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
				func(
					csEventControllerInst,
					csGameEventType.SHOWUI_TEXTMSGTIP,
					cs_LanguageManagerInst:GetValueByKey("已通关全部副本"),
					csGUIHelper.GetColorByColorHex("FF2828")
				)
			else
				if(GoldenCityDataProxy.inst.bossExploreCfg.unlock_num <= GoldenCityDataProxy.inst.bossExploreProcess)then
					EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.OpenUI_GoldenCityPrepare,GoldenCityDataProxy.inst.bossExploreCfg)
				else
					local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
					local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
					func(
						csEventControllerInst,
						csGameEventType.SHOWUI_TEXTMSGTIP,
						cs_LanguageManagerInst:GetValueByKey("尚未解锁"),
						csGUIHelper.GetColorByColorHex("FF2828")
					)
				end
			end
		end
	)

	self.scrollView.itemRenderer = function(index,item)
		self:ListItemRenderer(index,item)
	end

	self.stateGroup.OnSelectedIndexValueChange = function (index)
		self:onSelectedIndexValueChange(index)
	end

	self.normalCfgList = {}
	self.remainTimer = 0
	self.slotList = {}
	self.normalCfg = nil
	self.index = 0
	self.isHaveBossSlot = false
end

--function GoldenCityUIView:DoShowAnimation()
	--self:onShowed()

	--self.uiAnimator:CrossFade("show", 0)
	--self.uiAnimator:Update(0)
	--self.uiAnimator:Play("show")
--end

--function GoldenCityUIView:DoHideAnimation()
	--self.uiAnimator:Play("hide")
	--local animLength = self.uiAnimator:GetClipLength("commonBagUI_hide")

	--csGameTimerInst:AddTimer(
		--animLength,
		--1,
		--function()
			--self.uiAnimator:CrossFade("null", 0)
			--self.uiAnimator:Update(0)
			--self:HideView()
		--end
	--)
--end

function GoldenCityUIView:onHide()
	--print("GoldenCityUIView onHide")
	self.closeBtn.enabled = true
	self:clearTimer()
end

function GoldenCityUIView:clearTimer()
	if self.remainTimer ~= 0 then

		csGameTimerInst:RemoveTimer(self.remainTimer)
		self.remainTimer = 0

	end
end

function  GoldenCityUIView:onShowed()
	--print("GoldenCityUIView onShowed")
	self.closeBtn.enabled = false
	csGameTimerInst:AddTimer(0.3,1,function ()
			self.closeBtn.enabled = true
	end)
end

function GoldenCityUIView:shiftIn()
	self.contentObject:SetActive(true)


end

function GoldenCityUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function GoldenCityUIView:closeBtnClick()
	self:hide()
end

function GoldenCityUIView:RefreshData(index)
	self:SetUIData(index)
end

function GoldenCityUIView:RewardDailyItem()
	if(not GoldenCityDataProxy.inst.flag)then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("活动已结束"),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
		return
	end
	if(GoldenCityDataProxy.inst.dailyFlag)then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("今日奖励已领取，明天再来吧"),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
	else
		EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Request_GoldenCity_DailyReward)
	end
end

function GoldenCityUIView:boxBtnClick()
	local goldenCityCfg = nil
	if(GoldenCityDataProxy.inst.bossExploreIsAllOver)then
		goldenCityCfg = GoldenCityConfigManager:GetLastBossConfig()
	else
		goldenCityCfg = GoldenCityDataProxy.inst.bossExploreCfg
	end

	if(CS.ManagerBinder.inst.mGameState == CS.kGameState.Shop)then
		CS.TreasureBoxDataProxy.inst.isBackToTown = false
	end

	if(goldenCityCfg ~= nil)then
		local boxData = CS.ItemBagProxy.inst:GetItem(goldenCityCfg.box_id)
		if(boxData ~= nil)then
			if(boxData.count > 0)then
				CS.TreasureBoxDataProxy.inst.newBoxGroupId = boxData.ID
				EventDispatcher:dispatchEvent(GameEvent.CSEvent.Change_State, CS.StateTransition(CS.kGameState.TBox,true))
			else
				EventDispatcher:dispatchEvent(GameEvent.CSEvent.Change_State, CS.StateTransition(CS.kGameState.TBox,true))
			end
		else
			EventDispatcher:dispatchEvent(GameEvent.CSEvent.Change_State, CS.StateTransition(CS.kGameState.TBox,true))
		end
	else
		--csEventControllerInst:TriggerEvent(csGameEventType.TreasureBoxEvent.OPENTBOXUINOTPARA)
		EventDispatcher:dispatchEvent(GameEvent.CSEvent.Change_State, CS.StateTransition(CS.kGameState.TBox,true))
	end

	self:hide()
end

function GoldenCityUIView:SetUIData(toggleType) -- 1 - 选择副本 2 - 探索队列
	self.titleIcon:SetSpriteURL(GoldenCityDataProxy.inst:GetActivityStr(4))
	self.bgIcon:SetSpriteURL(GoldenCityDataProxy.inst:GetActivityStr(5))
	self.titleText.text = GoldenCityDataProxy.inst:GetActivityStr(1)
	self.remainSlotText.text = cs_LanguageManagerInst:GetValueByKey("当前剩余栏位：{0}",tostring(CS.ExploreDataProxy.inst.SlotIdleCount))

	if(csWorldParConfigManagerInst:GetConfig(8401) ~= nil)then
		self.dailyBtn.gameObject:SetActive(true)

		local itemCfg = CS.ItemconfigManager.inst:GetConfig(csWorldParConfigManagerInst:GetConfig(8401).parameters)
		if(itemCfg ~= nil)then
			self.dailyBtn.gameObject:SetActive(true)

			self.dailyIcon:SetSprite(itemCfg.atlas,itemCfg.icon)

			if(csWorldParConfigManagerInst:GetConfig(8402) ~= nil)then
				self.dailyNumText.text = "x" .. tostring(math.ceil(csWorldParConfigManagerInst:GetConfig(8402).parameters))
			else
				self.dailyNumText.text = ""
			end
		else
			self.dailyBtn.gameObject:SetActive(false)
		end
	else
		self.dailyBtn.gameObject:SetActive(false)
	end

	self.grayObj:SetActive(GoldenCityDataProxy.inst.dailyFlag)
	self.dailyRedPoint:SetActive(not GoldenCityDataProxy.inst.dailyFlag)

	self.stateRedPoint:SetActive(CS.ExploreDataProxy.inst.HasFinishExplore)

	self:setTimer()
	self:SetExploreData()

	self:ShowTopVal()
	
	self:refreshRedPoint(GoldenCityDataProxy.inst:GetScoreReallyCanRewardCount() > 0)

	self.stateGroup:OnEnableMethod(toggleType)
end

function GoldenCityUIView:ShowTopVal()

	self.scoreCountTx.text = tostring(GoldenCityDataProxy.inst.unionScore)

	self.lvbar.maxValue = CS.UserDataProxy.inst.playerData.MaxExp
	self.lvbar.value = CS.UserDataProxy.inst.playerData.CurrExp

	self.vipLvBg.enabled = CS.K_Vip_State.__CastFrom(CS.UserDataProxy.inst.playerData.vipState) == CS.K_Vip_State.Vip
	self.huangguanImg.enabled = CS.K_Vip_State.__CastFrom(CS.UserDataProxy.inst.playerData.vipState) == CS.K_Vip_State.Vip

	self.LVText.text = tostring(CS.UserDataProxy.inst.playerData.level)
	self.glodCountText.text = CS.AbbreviationUtility.AbbreviateNumber(CS.UserDataProxy.inst.playerData.gold , 2)
	self.gemCountText.text = CS.AbbreviationUtility.AbbreviateNumber(CS.UserDataProxy.inst.playerData.gem , 2)
end

function GoldenCityUIView:setTimer()

	self:clearTimer()

	local remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow

	if(remainTime <= 0)then
		self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
	else
		self.timeText.text = CS_TimeUtils.timeSpanStrip(remainTime,true)
	end

	self.remainTimer = csGameTimerInst:AddTimer(1,GoldenCityDataProxy.inst.endTime,function()

			local _remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow
			if(self.timeText == nil) then return end
			if(_remainTime <= 0)then
				self:clearTimer()
				self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
			else
				self.timeText.text = CS_TimeUtils.timeSpanStrip(_remainTime,true)
			end

		end)
end

function GoldenCityUIView:SetExploreData()
	self.normalCfgList = GoldenCityConfigManager:GetConfigByType(1)
	if(self.normalCfgList ~= nil and #self.normalCfgList > 0)then
		local difficultNum = CS.SaveManager.inst:GetInt("GoldenCity_NormalExplore_Difficult")
		if(difficultNum == 0)then
			difficultNum = 1
		elseif difficultNum > #self.normalCfgList then
			difficultNum = #self.normalCfgList
		end

		self.normalCfg = self.normalCfgList[difficultNum]
		if(self.normalCfg ~= nil)then
			local instanceCfg = CS.ExploreInstanceConfigManager.inst:GetConfig(self.normalCfg.instance_id)
			if(instanceCfg ~= nil)then
				self.nameText.text = cs_LanguageManagerInst:GetValueByKey(instanceCfg.instance_name)
				local pointItemWdpCfg = csWorldParConfigManagerInst:GetConfig(8403)
				if(pointItemWdpCfg ~= nil)then
					local pointItemCfg = CS.ItemconfigManager.inst:GetConfig(pointItemWdpCfg.parameters)
					if(pointItemCfg ~= nil)then
						self.icon.iconImage.enabled = true
						self.goldenCityIcon.iconImage.enabled = true
						self.icon:SetSprite(pointItemCfg.atlas,pointItemCfg.icon)
						self.goldenCityIcon:SetSprite(pointItemCfg.atlas,pointItemCfg.icon)
					else
						self.icon.iconImage.enabled = false
						self.goldenCityIcon.iconImage.enabled = false
					end
				else
					self.icon.iconImage.enabled = false
					self.goldenCityIcon.iconImage.enabled = false
				end
			end
		end
	else
		print("输出 没有普通副本的数据")
	end

	if(GoldenCityDataProxy.inst.bossExploreIsAllOver)then
		self.unlockObj:SetActive(false)
		self.bossGray.enabled = true
		self.bossFinishText.enabled = true

		self.bossNameText.text = ""
		
		csGUIHelper.SetUIGray(self.scoreItem2.transform,false)

		local lastBossCfg = GoldenCityConfigManager:GetLastBossConfig()
		if(lastBossCfg ~= nil)then

			local keyItemCfg = CS.ItemconfigManager.inst:GetConfig(lastBossCfg.ic_id)
			if(keyItemCfg ~= nil)then
				self.bossIcon.iconImage.enabled = true
				self.bossIcon:SetSprite(keyItemCfg.atlas,keyItemCfg.icon)
			else
				self.bossIcon.iconImage.enabled = false
			end

			local keyItemData = CS.ItemBagProxy.inst:GetItem(lastBossCfg.ic_id)
			if(keyItemData ~= nil)then
				if(keyItemData.count >= 1)then
					self.keyNumText.text = "<Color=#FFFFFF>" .. math.ceil(keyItemData.count) .. "</Color>/1"
				else
					self.keyNumText.text = "<Color=#FF0000>" .. math.ceil(keyItemData.count) .. "</Color>/1"
				end

				if(keyItemData.itemConfig ~= nil)then
					self.keyIcon:SetSprite(keyItemData.itemConfig.atlas,keyItemData.itemConfig.icon)
				else
					self.keyIcon.iconImage.enabled = false
				end
			else
				self.keyNumText.text = ""
				self.keyIcon.iconImage.enabled = false
			end
			local boxItemData = CS.ItemBagProxy.inst:GetItem(lastBossCfg.box_id)
			if(boxItemData ~= nil)then
				local boxNum = math.max(0,boxItemData.count)
				if(boxItemData.count >= 1)then
					self.boxNumText.text = "<Color=#FFFFFF>" .. math.ceil(boxNum) .. "</Color>/1"
				else
					self.boxNumText.text = "<Color=#FF0000>" .. math.ceil(boxNum) .. "</Color>/1"
				end

				if(boxItemData.itemConfig ~= nil)then
					self.boxIcon:SetSprite(boxItemData.itemConfig.atlas,boxItemData.itemConfig.icon)
				else
					self.boxIcon.iconImage.enabled = false
				end
			else
				self.boxNumText.text = ""
				self.boxIcon.iconImage.enabled = false
			end
		else
			self.bossIcon.iconImage.enabled = false
			self.keyIcon.iconImage.enabled = false
			self.boxIcon.iconImage.enabled = false
		end
	else
		self.unlockObj:SetActive(true)
		self.bossGray.enabled = false
		self.bossFinishText.enabled = false

		if(GoldenCityDataProxy.inst.bossExploreCfg ~= nil)then
			local bossCfg = GoldenCityDataProxy.inst.bossExploreCfg
			local bossInstanceCfg = CS.ExploreInstanceConfigManager.inst:GetConfig(bossCfg.instance_id)

			local keyItemCfg = CS.ItemconfigManager.inst:GetConfig(bossCfg.ic_id)
			if(keyItemCfg ~= nil)then
				self.bossIcon.iconImage.enabled = true
				self.bossIcon:SetSpriteURL(keyItemCfg.icon)
			else
				self.bossIcon.iconImage.enabled = false
			end

			if(bossInstanceCfg ~= nil)then
				self.bossNameText.text = cs_LanguageManagerInst:GetValueByKey(bossInstanceCfg.instance_name)
			end

			self.bossScheduleText.text = GoldenCityDataProxy.inst.bossExploreProcess .. "/" .. bossCfg.unlock_num

			local slotList = CS.ExploreDataProxy.inst.exploreSlotList

			self.isHaveBossSlot = false
			for i = 0,slotList.Count - 1  do
				if(slotList[i].slotType == 3)then
					local slotExploreCfg = CS.ExploreInstanceConfigManager.inst:GetConfig(slotList[i].exploreId)
					if(slotExploreCfg ~= nil)then
						if(slotExploreCfg.instance_type == 2)then
							self.isHaveBossSlot = true
							break
						end
					end
				end
			end

			csGUIHelper.SetUIGray(self.scoreItem2.transform,GoldenCityDataProxy.inst.bossExploreProcess < bossCfg.unlock_num or self.isHaveBossSlot)

			self.keyIcon.iconImage.enabled = true
			self.boxIcon.iconImage.enabled = true

			local keyItemData = CS.ItemBagProxy.inst:GetItem(bossCfg.ic_id)
			if(keyItemData ~= nil)then
				if(keyItemData.count >= 1)then
					self.keyNumText.text = "<Color=#FFFFFF>" .. math.ceil(keyItemData.count) .. "</Color>/1"
				else
					self.keyNumText.text = "<Color=#FF0000>" .. math.ceil(keyItemData.count) .. "</Color>/1"
				end

				if(keyItemData.itemConfig ~= nil)then
					self.keyIcon:SetSprite(keyItemData.itemConfig.atlas,keyItemData.itemConfig.icon)
				else
					self.keyIcon.iconImage.enabled = false
				end
			else
				self.keyNumText.text = ""
				self.keyIcon.iconImage.enabled = false
			end
			local boxItemData = CS.ItemBagProxy.inst:GetItem(bossCfg.box_id)
			if(boxItemData ~= nil)then
				local boxNum = math.max(0,boxItemData.count)
				if(boxItemData.count >= 1)then
					self.boxNumText.text = "<Color=#FFFFFF>" .. math.ceil(boxNum) .. "</Color>/1"
				else
					self.boxNumText.text = "<Color=#FF0000>" .. math.ceil(boxNum) .. "</Color>/1"
				end

				if(boxItemData.itemConfig ~= nil)then
					self.boxIcon:SetSprite(boxItemData.itemConfig.atlas,boxItemData.itemConfig.icon)
				else
					self.boxIcon.iconImage.enabled = false
				end
			else
				self.boxNumText.text = ""
				self.boxIcon.iconImage.enabled = false
			end
		else
			print("输出 没有boss副本的数据 后端给的id是",GoldenCityDataProxy.inst.bossExploreId)
		end
	end
end

function GoldenCityUIView:refreshRedPoint(flag)

	self.awardRedPoint:SetActive(flag)
	self.dailyRedPoint:SetActive(not GoldenCityDataProxy.inst.dailyFlag)

end

function GoldenCityUIView:onSelectedIndexValueChange(index)

	self.index = index

	CS.AudioManager.inst:PlaySound(11)

	for i = 0,self.toggleLinkObjs.Count - 1 do
		self.toggleLinkObjs[i]:SetActive(false)
	end

	self.toggleLinkObjs[index]:SetActive(true)

	self:setState(index)

end

function GoldenCityUIView:setState(index)
	if(index == 0)then -- 选择副本

	elseif index == 1 then -- 出征状态
		self:SetSlotListData()
	else

	end
end

function GoldenCityUIView:SetSlotListData()
	self.slotList = {}
	local allSlotList = CS.ExploreDataProxy.inst.exploreSlotList
	for i = 0, allSlotList.Count - 1 do
		local index = i
		if(allSlotList[index].exploreState ~= 0)then
			self.slotList[#self.slotList + 1] = allSlotList[index]
		end
	end

	if(#self.slotList > 0)then
		self.emptyText.enabled = false
		self:SetListItemTotalCount(#self.slotList)
	else
		self:SetListItemTotalCount(0)
		self.emptyText.enabled = true
	end
end

function GoldenCityUIView:ListItemRenderer(index,item)
	local prefabItem = item
	if(index >= self.listItemCount)then
		prefabItem.gameObject:SetActive(false)
	end

	if(index < self.listItemCount)then
		prefabItem.gameObject:SetActive(true)
		prefabItem:SetData(self.slotList[index + 1])
	end
end

function GoldenCityUIView:SetListItemTotalCount(count)
	self.listItemCount = count
	if(count < 0)then
		self.listItemCount = 0
	end

	self.scrollView.totalItemCount = count
end

function GoldenCityUIView:Refresh()
	if(self.index == 1)then
		self:SetSlotListData()
		self.scrollView:refresh()
	end
end
------------------------------------------------