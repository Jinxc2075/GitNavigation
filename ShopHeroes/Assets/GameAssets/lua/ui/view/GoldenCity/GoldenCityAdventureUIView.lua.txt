--GoldenCityAdventureUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_luaList = typeof(CS.LuaListItem)
local csGameTimerInst = CS.GameTimer.inst
local csWorldParConfigManagerInst = CS.WorldParConfigManager.inst
local csTimeUtils = CS.TimeUtils

GoldenCityAdventureUIView = class(ViewBase)

function GoldenCityAdventureUIView:ctor()
	self.viewID = Constants.ViewName.GoldenCityAdventureUIView
	GoldenCityAdventureUIView.super.init(self, self.viewID)
	self.sortingLayerName = "popup"
end

function GoldenCityAdventureUIView:initComp()
	local contentPane = self.contentPanel

	local heroList = contentPane:GetObjByName("allHero"):GetComponent("ObjList").objList
	self.allHeroes = {}
	for i = 0, heroList.Count - 1 do
		self.allHeroes[#self.allHeroes + 1] = heroList[i]:GetComponent("RoleAdventureItemUI")
	end

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.nameText = contentPane:GetText("nameText")
	self.adventureIcon = contentPane:GetGUIIcon("adventureIcon")
	self.difficultText = contentPane:GetText("difficultText")
	self.numText = contentPane:GetText("numText")
	self.dungeonIcon = contentPane:GetGUIIcon("dungeonIcon")
	self.scheduleSlider = contentPane:GetObjByName("scheduleSlider"):GetComponent("Slider")
	self.residueText = contentPane:GetText("residueText")
	self.finishTip = contentPane:GetText("finishTip")
	self.gemBtn = contentPane:GetButton("gemBtn")
	self.confirmObj = contentPane:GetObjByName("confirmObj")
	self.finishBtn = contentPane:GetButton("finishBtn")
	self.gemTx = contentPane:GetText("gemTx")

	self.uiAnimator = contentPane.uiAnimator
end

function GoldenCityAdventureUIView:onInit()

	self:initComp()

	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.gemBtn:ButtonClickTween(
		function ()
			self:gemButtonMethod()
		end
	)

	self.finishBtn:ButtonClickTween(
		function ()
			self:finishButtonMethod()
		end
	)

	self.data = nil
	self.timerId = 0
	self.canQuicken = false
end

function GoldenCityAdventureUIView:DoShowAnimation()
	self:onShowed()

	self.uiAnimator:CrossFade("show", 0)
	self.uiAnimator:Update(0)
	self.uiAnimator:Play("show")
end

function GoldenCityAdventureUIView:DoHideAnimation()
	self.uiAnimator:Play("hide")
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	csGameTimerInst:AddTimer(
		animLength,
		1,
		function()
			if(self.contentObject == nil) then return end
			self.uiAnimator:CrossFade("null", 0)
			self.uiAnimator:Update(0)
			self:HideView()
		end
	)
end

function GoldenCityAdventureUIView:onHide()
	--print("GoldenCityAdventureUIView onHide")
	if(self.timerId ~= 0)then
		csGameTimerInst:RemoveTimer(self.timerId)
		self.timerId = 0
	end
	
	if(self.confirmObj.activeSelf)then
		self.confirmObj:SetActive(false)
	end
end

function  GoldenCityAdventureUIView:onShowed()
	--print("GoldenCityAdventureUIView onShowed")
end

function GoldenCityAdventureUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function GoldenCityAdventureUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function GoldenCityAdventureUIView:closeBtnClick()
	self:hide()
end

function GoldenCityAdventureUIView:finishButtonMethod()
	if(self.data.exploreState == 2)then
		self:hide()

		CS.GUIManager.BackMainView()
		EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Request_GoldenCity_ExploreEnd,self.data.slotId)
	end
end

function GoldenCityAdventureUIView:gemButtonMethod()
	if(not self.canQuicken and CS.UserDataProxy.inst.playerData.exploreImmediatelyFreeCount <= 0)then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("金条不足"),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
		return
	end

	if(self.confirmObj.activeSelf)then
		self.confirmObj:SetActive(false)
		-- 副本加速
		EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Request_GoldenCity_ExploreImmediately,self.data.slotId)
	else
		self.confirmObj:SetActive(true)
	end
end

function GoldenCityAdventureUIView:SetUIData(slotId)
	self.data = CS.ExploreDataProxy.inst:GetSlotDataById(slotId)
	local cfg = CS.ExploreInstanceConfigManager.inst:GetConfig(self.data.exploreId)

	if(cfg ~= nil)then
		self.nameText.text = cs_LanguageManagerInst:GetValueByKey(cfg.instance_name)
		local goldenCityCfg = GoldenCityConfigManager:GetConfigByInstanceId(cfg.id)
		local difficultPercent = 1
		if(goldenCityCfg ~= nil)then
			self.difficultText.text = cs_LanguageManagerInst:GetValueByKey("难度：{0}",tostring(goldenCityCfg.difficulty))
			--difficultPercent = goldenCityCfg.difficulty
		else
			self.difficultText.text = ""
		end

		if(cfg.instance_type == 2)then
			local bossGoldenCfg = nil

			if(GoldenCityDataProxy.inst.bossExploreIsAllOver)then
				bossGoldenCfg = GoldenCityConfigManager:GetLastBossConfig()
			else
				bossGoldenCfg = GoldenCityDataProxy.inst.bossExploreCfg
			end

			if(bossGoldenCfg ~= nil)then
				local keyItemCfg = CS.ItemconfigManager.inst:GetConfig(bossGoldenCfg.ic_id)

				if(keyItemCfg ~= nil)then
					self.adventureIcon.iconImage.enabled = true
					self.adventureIcon:SetSprite(keyItemCfg.atlas,keyItemCfg.icon)
				else
					self.adventureIcon.iconImage.enabled = false
				end

			else
				self.adventureIcon.iconImage.enabled = false
			end
		else
			local worldParCfg = csWorldParConfigManagerInst:GetConfig(8403)

			if(worldParCfg ~= nil)then
				local itemCfg = CS.ItemconfigManager.inst:GetConfig(worldParCfg.parameters)

				if(itemCfg ~= nil)then
					self.adventureIcon.iconImage.enabled = true
					self.adventureIcon:SetSprite(itemCfg.atlas,itemCfg.icon)
				else
					self.adventureIcon.iconImage.enabled = false
				end
			else
				self.adventureIcon.iconImage.enabled = false
			end
		end

		--self.adventureIcon.iconImage.enabled = true

		--self.adventureIcon:SetSprite(CS.StaticConstants.exploreAtlas,cfg.instance_icon)

		local useItemCfg = CS.ItemconfigManager.inst:GetConfig(self.data.useItemId)
		local percent = 1
		if(useItemCfg ~= nil and useItemCfg.type == 21)then
			percent = 1 + useItemCfg.effect / 100
		end

		local minVal = math.ceil(cfg.drop3_num_min * difficultPercent * (self.data.heroInfoUIds.Count / cfg.people_number) * percent)
		local maxVal = math.ceil(cfg.drop3_num_max * difficultPercent * (self.data.heroInfoUIds.Count / cfg.people_number) * percent)

		self.numText.text = minVal .. "-" .. maxVal
	else
		self.nameText.text = ""
		self.difficultText.text = ""
		self.adventureIcon.iconImage.enabled = false
	end

	local itemWdpCfg = csWorldParConfigManagerInst:GetConfig(8403)
	if(itemWdpCfg ~= nil)then
		local itemCfg = CS.ItemconfigManager.inst:GetConfig(itemWdpCfg.parameters)
		if(itemCfg ~= nil)then
			self.dungeonIcon.iconImage.enabled = true
			self.dungeonIcon:SetSprite(itemCfg.atlas,itemCfg.icon)
		else
			self.dungeonIcon.iconImage.enabled = false
		end
	else
		self.dungeonIcon.iconImage.enabled = false
	end

	self.scheduleSlider.maxValue = self.data.exploreTotalTime


	self:SetTimer()
	self:setState()
	self:setHeroData()
end

function GoldenCityAdventureUIView:SetTimer()
	if(self.timerId ~= 0)then
		csGameTimerInst:RemoveTimer(self.timerId)
		self.timerId = 0
	end

	if self.data.exploreState == 1 and self.data.exploringRemainTime > 0 then
		self.scheduleSlider.value = self.data.exploreTotalTime - self.data.exploringRemainTime
		self.residueText.text = csTimeUtils.timeSpanStrip(self.data.exploringRemainTime)
		local result = CS.DiamondCountUtils.GetExploreOrMakeEquipUpgradeDiamonds(self.data.exploringRemainTime)
		self.gemTx.text = tostring(result)
		if(CS.UserDataProxy.inst.playerData.gem >= result) then
			self.gemTx.color = CS.UnityEngine.Color.white
		else
			self.gemTx.color = CS.UnityEngine.Color.red
		end

		self.canQuicken = CS.UserDataProxy.inst.playerData.gem >= result

		self.timerId = csGameTimerInst:AddTimer(1,self.data.exploringRemainTime,function ()
				if (self.data.exploringRemainTime <= 0) then
					self.residueText.text = "0" .. cs_LanguageManagerInst:GetValueByKey("秒")
					csGameTimerInst:RemoveTimer(self.timerId)
					self.timerId = 0
				else
					result = CS.DiamondCountUtils.GetExploreOrMakeEquipUpgradeDiamonds(self.data.exploringRemainTime)
					self.gemTx.text = tostring(result)
					if(CS.UserDataProxy.inst.playerData.gem >= result) then
						self.gemTx.color = CS.UnityEngine.Color.white
					else
						self.gemTx.color = CS.UnityEngine.Color.red
					end
					self.canQuicken = CS.UserDataProxy.inst.playerData.gem >= result
					self.scheduleSlider.value = self.data.exploreTotalTime - self.data.exploringRemainTime
					self.residueText.text = csTimeUtils.timeSpanStrip(self.data.exploringRemainTime)
				end
			end)
	elseif self.data.exploreState == 2 then
		self.scheduleSlider.maxValue = 1
		self.scheduleSlider.value = 1
	end
end

function GoldenCityAdventureUIView:setState()
	if (self.data.exploreState == 2) then
		self.residueText.gameObject:SetActive(false)
		self.finishTip.enabled = true
		self.finishBtn.gameObject:SetActive(true)
	elseif (self.data.exploreState == 1) then
		self.residueText.gameObject:SetActive(true)
		self.finishTip.enabled = false
		self.finishBtn.gameObject:SetActive(false)
	end
end

function GoldenCityAdventureUIView:setHeroData()
	for i = 1,#self.allHeroes  do
		local index = i
		if (index <= self.data.heroInfoUIds.Count) then
			self.allHeroes[index].gameObject:SetActive(true)
			local tempData = CS.RoleDataProxy.inst:GetHeroDataByUid(self.data.heroInfoUIds[index - 1])
			local upgradeCfg = CS.heroupgradeconfigManager.inst:GetHeroUpgradeConfig(tempData.level + 1)
			self.allHeroes[index]:setData(tempData, upgradeCfg)
		else
			self.allHeroes[index].gameObject:SetActive(false)
		end
	end
end
------------------------------------------------