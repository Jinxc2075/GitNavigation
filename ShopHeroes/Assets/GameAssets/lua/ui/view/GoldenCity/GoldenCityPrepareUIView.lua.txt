--GoldenCityPrepareUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csUserDataProxyInst = CS.UserDataProxy.inst
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_luaList = typeof(CS.LuaListItem)
local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local csGameTimerInst = CS.GameTimer.inst
local csVector2 = CS.UnityEngine.Vector2
local csWorldParConfigManagerInst = CS.WorldParConfigManager.inst
local CS_TimeUtils = CS.TimeUtils

GoldenCityPrepareUIView = class(ViewBase)

function GoldenCityPrepareUIView:ctor()
	self.viewID = Constants.ViewName.GoldenCityPrepareUIView
	GoldenCityPrepareUIView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function GoldenCityPrepareUIView:initComp()
	local contentPane = self.contentPanel

	local heroList = contentPane:GetObjByName("allHeroes"):GetComponent("ObjList").objList
	self.allHeroes = get_csharp_list(CS.ExploreHeroItemView)
	for i = 0, heroList.Count - 1 do
		self.allHeroes:Add(heroList[i]:GetComponent("ExploreHeroItemView"))
	end

	local awardList = contentPane:GetObjByName("allAwards"):GetComponent("ObjList").objList
	self.allAwards = {}
	for i = 0, awardList.Count - 1 do
		self.allAwards[#self.allAwards + 1] = awardList[i]:GetComponent("LuaListItem")
	end

	self.pointObj = contentPane:GetObjByName("allPoint")
	local pointList = self.pointObj:GetComponent("ObjList").objList
	self.allPoints = {}
	for i = 0, pointList.Count - 1 do
		self.allPoints[#self.allPoints + 1] = pointList[i]:GetComponent("GUIIcon")
	end

	self.heroCanvas = contentPane:GetObjByName("allHeroes"):GetComponent("Canvas")

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.leftBtn = contentPane:GetButton("leftBtn")
	self.rightBtn = contentPane:GetButton("rightBtn")
	self.exploreBtn = contentPane:GetButton("exploreBtn")
	self.useItemBtn = contentPane:GetButton("useItemBtn")
	self.btmInfoBtn = contentPane:GetButton("btmInfoBtn")

	self.BgIcon = contentPane:GetGUIIcon("BgIcon") -- 战斗背景图
	self.icon = contentPane:GetGUIIcon("icon") -- 活动图标
	self.bgIcon = contentPane:GetGUIIcon("bgIcon") -- 奖励底图
	self.iconBgIcon = contentPane:GetGUIIcon("iconBgIcon") -- boss头像底图
	self.bossIcon = contentPane:GetGUIIcon("bossIcon")
	self.itemIcon = contentPane:GetGUIIcon("itemIcon")

	self.exploreTimeText = contentPane:GetText("exploreTimeText")
	self.renshuText = contentPane:GetText("renshuText")
	self.nameText = contentPane:GetText("nameText")
	self.timeText = contentPane:GetText("timeText")
	self.bossNameText = contentPane:GetText("bossNameText")
	self.difficultText = contentPane:GetText("difficultText")
	self.itemNumText = contentPane:GetText("itemNumText")
	self.suggestFightingText = contentPane:GetText("suggestFightingText")
	self.orText = contentPane:GetText("orText")

	self.orTextRect = self.orText.gameObject:GetComponent("RectTransform")

	self.notUse = contentPane:GetObjByName("notUse")
	self.use = contentPane:GetObjByName("use")
	self.numBg = contentPane:GetObjByName("numBg")
	
	self.showTalentObj = contentPane:GetButton("showTalentObj")
	self.showTalentIcon = contentPane:GetGUIIcon("showTalentIcon")
	self.showItemObj = contentPane:GetButton("showItemObj")
	self.showItemIcon = contentPane:GetGUIIcon("showItemIcon")
	self.talentTipObj = contentPane:GetButton("talentTipObj")
	self.talentNameText = contentPane:GetText("talentNameText")
	self.talentDescText = contentPane:GetText("talentDescText")
end

function GoldenCityPrepareUIView:onInit()

	self:initComp()

	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.leftBtn:ButtonClickTween(
		function ()
			-- 切换难度
			self:ChangeDifficult(false)
		end
	)

	self.rightBtn:ButtonClickTween(
		function ()
			-- 切换难度
			self:ChangeDifficult(true)
		end
	)

	self.exploreBtn:ButtonClickTween(
		function ()
			-- 发出战协议
			self:ExploreMethod()
		end
	)

	self.useItemBtn:ButtonClickTween(
		function ()
			-- 有道具就清除道具 没有就打开选择道具界面
			self:clickItemButtonMethod()
		end
	)

	self.btmInfoBtn:ButtonClickTween(
		function ()
			-- 打开信息界面
			EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.OpenUI_GoldenCityMess,0)
		end
	)
	
	self.showTalentObj:ButtonClickTween(
		function ()
			if(self.selectTalent == nil)then return end

			self.talentTipObj.gameObject:SetActive(true)
			self.talentDescText.text = cs_LanguageManagerInst:GetValueByKey(CS.HeroBuffConfigManager.inst:GetConfig(self.selectTalent.type).name, tostring(math.floor(self.selectTalent.value)))
			self.talentNameText.text = cs_LanguageManagerInst:GetValueByKey(self.selectTalent.talentDesc)
		end
	)

	self.showItemObj:ButtonClickTween(
		function ()
			if(self.selectItem == nil)then return end

			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.CommonRewardData, CS.UnityEngine.Transform)
			local commonData = CS.CommonRewardData(self.selectItem.id,1,1,self.selectItem.type)
			func(csEventControllerInst, csGameEventType.CommonEvent.COMMONTIPS_SETINFO, commonData, self.showItemObj.transform)
		end
	)

	self.talentTipObj:ButtonClickTween(
		function ()
			self.talentTipObj.gameObject:SetActive(false)
		end
	)

	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		self.allHeroes[index]:setData(index,function (heroIndex)
				self:HeroItemAddClickHandler(heroIndex)
			end,function (heroUid,index)
				self:RemoveHeroCom(heroUid,index)
			end)
	end

	self.data = nil
	self.curInstanceCfg = nil
	self.difficultIndex = 1 -- 难度从1开始
	self.normalCfgList = {}
	self.timer = 0
	self.renshu = 0
	self.selectItem = nil
	self.itemAddPercent = 1
	self.itemAddExpPercent = 1
	self.itemTimePercent = 1
	self.isAuto = false
	self.teamFightSum = 0
	self.itemAttPercent = -1
	self.selectTalent = nil
end

function GoldenCityPrepareUIView:onHide()
	--print("GoldenCityPrepareUIView onHide")
	if(self.timer ~= 0)then
		csGameTimerInst:RemoveTimer(self.timer)
		self.timer = 0
	end

	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		if (self.allHeroes[index].Data ~= nil) then
			self:RemoveHeroCom(self.allHeroes[index].Data.uid, index)
		else
			self.allHeroes[index]:clearHeroData()
		end
	end

	self.use:SetActive(false)
	self.notUse:SetActive(true)
	self.showTalentObj.gameObject:SetActive(false)
	self.showItemObj.gameObject:SetActive(false)
	self.talentTipObj.gameObject:SetActive(false)

	self.data = nil
	self.curInstanceCfg = nil
	self.normalCfgList = {}
	self.selectItem = nil
	self.isAuto = false
	self.renshu = 0
	self.teamFightSum = 0
	self.itemAddPercent = 1
	self.itemAddExpPercent = 1
	self.itemAttPercent = -1
	self.itemTimePercent = 1
	self.selectTalent = nil
end

function  GoldenCityPrepareUIView:onShowed()
	--print("GoldenCityPrepareUIView onShowed")
	self.showItemObj.gameObject:SetActive(false)
	self.talentTipObj.gameObject:SetActive(false)
	self.heroCanvas.sortingOrder = self._uiCanvas.sortingOrder + 2
end

function GoldenCityPrepareUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function GoldenCityPrepareUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function GoldenCityPrepareUIView:closeBtnClick()
	self:hide()
	EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Refresh_GoldenCity_MainToggle,0)
end

function GoldenCityPrepareUIView:ExploreMethod()
	local slotData = CS.ExploreDataProxy.inst:GetFreeSlotData()
	if(slotData == nil)then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("无可用探索栏位"),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
		return
	else
		CS.ExploreDataProxy.inst.curSlotId = slotData.slotId
	end

	local combatHeroList = ""
	local roleSum = 0

	for i = 0, self.allHeroes.Count - 1 do
		if (self.allHeroes[i].Data ~= nil) then
			if(i == 0)then
				combatHeroList = self.allHeroes[i].Data.uid
			else
				combatHeroList = combatHeroList .. ":" .. self.allHeroes[i].Data.uid
			end

			roleSum = roleSum + 1
		else
			if(i == 0)then
				combatHeroList = self.allHeroes[i].indexState
			else
				combatHeroList = combatHeroList .. ":" .. self.allHeroes[i].indexState
			end

		end
	end

	print("输出出战人员",combatHeroList)

	if(roleSum <= 0)then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("请先选择英雄参战"),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
	else
		for i = 0, self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				if(self.allHeroes[index].Data.equip1.equipId ~= 0)then
					local equipCfg = CS.EquipConfigManager.inst:GetEquipInfoConfig(self.allHeroes[index].Data.equip1.equipId)
					if(equipCfg ~= nil)then
						local action = CS.EquipActionConfigManager.inst:GetCfg(equipCfg.equipDrawingId)
						self.allHeroes[index].heroDress:Play(action.act_skill,false,1,0,function ()
								self.allHeroes[index].heroDress:Play(action.act_combat_standby,true)
							end)
					end
				else
					local action = CS.EquipActionConfigManager.inst:GetCfg(999999)
					self.allHeroes[index].heroDress:Play(action.act_skill,false,1,0,function ()
							self.allHeroes[index].heroDress:Play(action.act_combat_standby,true)
						end)
				end
			end
		end

		CS.AudioManager.inst:PlaySound(149)

		local useItemId = 0
		if(self.selectItem ~= nil)then
			useItemId = self.selectItem.id
		end


		CS.FGUI.inst:showGlobalMask(1.5)
		csGameTimerInst:AddTimer(1.5,1,function ()
				EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Request_GoldenCity_ExploreStart,CS.ExploreDataProxy.inst.curSlotId,self.curInstanceCfg.id,useItemId,combatHeroList)
			end)
	end
end

function GoldenCityPrepareUIView:clickItemButtonMethod()
	if(self.use.activeSelf)then
		self:SwitchItemTypeAdd(false)
		self.use:SetActive(false)
		self.notUse:SetActive(true)
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
		func(
			csEventControllerInst,
			csGameEventType.SHOWUI_TEXTMSGTIP,
			cs_LanguageManagerInst:GetValueByKey("{0}已移除", cs_LanguageManagerInst:GetValueByKey(self.selectItem.name)),
			csGUIHelper.GetColorByColorHex("FF2828")
		)
		self.numBg:SetActive(true)
		self.selectItem = nil
		self.showItemObj.gameObject:SetActive(false)
	else
		EventDispatcher:dispatchEvent(GameEvent.RefugeEvent.ShowUI_RefugeSelectItem,2)
	end
end

function GoldenCityPrepareUIView:HeroItemAddClickHandler(heroIndex)
	EventDispatcher:dispatchEvent(GameEvent.RefugeEvent.ShowUI_RefugeSelectHero,heroIndex,self.curInstanceCfg.id,self.itemAddExpPercent,2)
end

function GoldenCityPrepareUIView:SortAllHeroList()
	self.allHeroes:Sort(function (hero1, hero2)
			if(hero1.index < hero2.index)then
				return -1
			else
				return 1
			end
		end)
	
	self.talentTipObj.gameObject:SetActive(false)

	self:RefreshShowTalent()
end

function GoldenCityPrepareUIView:RefreshHero()
	self.isAuto = false
	self:SetDifficultData(self.data)
end

function GoldenCityPrepareUIView:ChangeDifficult(isAdd)
	if(isAdd)then
		self.difficultIndex = self.difficultIndex + 1

		if(self.difficultIndex > #self.normalCfgList)then
			self.difficultIndex = 1
		end
	else
		self.difficultIndex = self.difficultIndex - 1

		if(self.difficultIndex < 1)then
			self.difficultIndex = #self.normalCfgList
		end
	end

	CS.SaveManager.inst:SaveInt("GoldenCity_NormalExplore_Difficult",self.difficultIndex)
	self.data = self.normalCfgList[self.difficultIndex]

	self:SetDifficultData(self.data)
end

function GoldenCityPrepareUIView:SetUIData(_data)

	if(_data == nil) then self:hide() return end

	self.data = _data

	self.normalCfgList = {}
	self.normalCfgList = GoldenCityConfigManager:GetConfigByType(1)
	self.difficultIndex = self.data.difficulty

	self.icon:SetSpriteURL(GoldenCityDataProxy.inst:GetActivityStr(4))
	self.nameText.text = GoldenCityDataProxy.inst:GetActivityStr(1)

	if(self.data.instance_type == 1)then

		self.bgIcon:SetSprite("goldenCity_atlas","wanshengjie_landi")
		self.iconBgIcon:SetSprite("goldenCity_atlas","zhuxian_jindu1")

	elseif self.data.instance_type == 2 then

		self.bgIcon:SetSprite("goldenCity_atlas","tanxian_bossjiangli")
		self.iconBgIcon:SetSprite("goldenCity_atlas","tanxian_bossjiangli1")

	end

	local types = get_csharp_array(CS.ItemType,4)
	types[0] = CS.ItemType.ExploreTimeItem
	types[1] = CS.ItemType.ExploreAttBonus
	types[2] = CS.ItemType.ExploreExpBonusItem
	types[3] = CS.ItemType.ExploreAddYieldItem
	local allItems = CS.ItemBagProxy.inst:GetItemsByTypes(types, false)
	self.itemNumText.text = allItems.Count

	self:setTimer()
	self:SetDifficultData(self.data)
end

function GoldenCityPrepareUIView:SelectItemComplete(itemId)
	self.selectItem = CS.ItemconfigManager.inst:GetConfig(itemId)
	local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
	local func = funcGeneric(CS.System.String, CS.UnityEngine.Color)
	func(
		csEventControllerInst,
		csGameEventType.SHOWUI_TEXTMSGTIP,
		cs_LanguageManagerInst:GetValueByKey("{0}添加为强化品", cs_LanguageManagerInst:GetValueByKey(self.selectItem.name)),
		csGUIHelper.GetColorByColorHex("FF2828")
	)
	self.numBg:SetActive(false)
	self.use:SetActive(true)
	self.notUse:SetActive(false)
	self.itemIcon:SetSprite(self.selectItem.atlas, self.selectItem.icon)
	
	self.showItemObj.gameObject:SetActive(true)
	self.showItemIcon:SetSprite(self.selectItem.atlas, self.selectItem.icon)

	self:SwitchItemTypeAdd(true)
end

function GoldenCityPrepareUIView:SwitchItemTypeAdd(isAdd)
	if(self.selectItem.type == 20)then
		if(isAdd)then
			self.itemTimePercent = 1 - self.selectItem.effect / 100
		else
			self.itemTimePercent = 1
		end
		self:calculateTime()
	elseif self.selectItem.type == 24 then
		if(isAdd)then
			self.itemAddExpPercent = 1 + self.selectItem.effect / 100
		else
			self.itemAddExpPercent = 1
		end
		local AddExpPercent = 1
		local buff = CS.GlobalBuffDataProxy.inst:GetGlobalBuffData(CS.GlobalBuffType.explore_heroExpUp)
		if(buff ~= nil)then
			AddExpPercent = AddExpPercent * (1 + buff.buffInfo.buffParam / 100)
		end
		local unionBuffData = CS.UserDataProxy.inst:GetUnionBuffData(CS.EUnionScienceType.ExpSkill)
		if(unionBuffData ~= nil)then
			AddExpPercent = AddExpPercent * (1 + unionBuffData.config.add2_num / 100)
		end
		local canAddExp = self.curInstanceCfg.hero_exp * AddExpPercent * self.itemAddExpPercent

		for i = 0, self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				self.allHeroes[index]:setHeroTween(canAddExp)
			end
		end
	elseif self.selectItem.type == 22 then
		if(isAdd)then
			self.itemAttPercent = self.selectItem.effect / 100
		else
			self.itemAttPercent = -1
		end
		self.teamFightSum = 0
		for i = 0, self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				self.allHeroes[index]:setHeroFightCount(self.itemAttPercent)
			end
		end
		for i = 0, self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				self.teamFightSum = self.teamFightSum + self.allHeroes[index].fightingCount
			end
		end

		for i = 0, self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				self.allHeroes[index]:setHeroFighit(self.itemAttPercent, self.curInstanceCfg.recommend_power, self.teamFightSum, self.curInstanceCfg.team_strength)
			end
		end
	elseif self.selectItem.type == 21 then
		if(isAdd)then
			self.itemAddPercent = 1 + self.selectItem.effect / 100
		else
			self.itemAddPercent = 1
		end
		self:RefreshAward()
	end
end

function GoldenCityPrepareUIView:setHeroPositionData()
	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		if (self.curInstanceCfg.people_number == 5)then
			self.allHeroes[index]:setIndexState(0)
			self.allHeroes[index].gameObject:SetActive(true)
		elseif (self.curInstanceCfg.people_number == 4) then
			if (index + 1 == self.curInstanceCfg.position_open[0] or index + 1 == self.curInstanceCfg.position_open[1] or index + 1 == self.curInstanceCfg.position_open[2] or index + 1 == self.curInstanceCfg.position_open[3]) then
				self.allHeroes[index]:setIndexState(0)
				self.allHeroes[index].gameObject:SetActive(true)
			else
				self.allHeroes[index]:setIndexState(-1)
				self.allHeroes[index]:clearHeroData()
				self.allHeroes[index].gameObject:SetActive(false)
			end
		elseif (self.curInstanceCfg.people_number == 3) then
			if (index + 1 == self.curInstanceCfg.position_open[0] or index + 1 == self.curInstanceCfg.position_open[1] or index + 1 == self.curInstanceCfg.position_open[2]) then
				self.allHeroes[index]:setIndexState(0)
				self.allHeroes[index].gameObject:SetActive(true)
			else
				self.allHeroes[index]:setIndexState(-1)
				self.allHeroes[index]:clearHeroData()
				self.allHeroes[index].gameObject:SetActive(false)
			end
		end
	end
end

function GoldenCityPrepareUIView:setAutomaticHeroData()
	if(self.isAuto)then
		local AddExpPercent = 1
		local buff = CS.GlobalBuffDataProxy.inst:GetGlobalBuffData(CS.GlobalBuffType.explore_heroExpUp)
		if(buff ~= nil)then
			AddExpPercent = AddExpPercent * (1 + buff.buffInfo.buffParam / 100)
		end
		local unionBuffData = CS.UserDataProxy.inst:GetUnionBuffData(CS.EUnionScienceType.ExpSkill)
		if(unionBuffData ~= nil)then
			AddExpPercent = AddExpPercent * (1 + unionBuffData.config.add2_num / 100)
		end
		local canAddExp = self.curInstanceCfg.hero_exp * self.itemAddExpPercent * AddExpPercent

		for i = 0,self.allHeroes.Count - 1 do
			local index = i
			if (self.allHeroes[index].Data ~= nil) then
				self.allHeroes[index]:setHeroTween(canAddExp)
			end
		end

		self:setFightChange()
		return
	end

	for i = 0,self.allHeroes.Count - 1 do
		local index = i
		if (self.allHeroes[index].Data == nil and self.allHeroes[index].gameObject.activeSelf) then
			local heroUid = CS.RoleDataProxy.inst:GetHeroUidByExploreIndex(index)--data.recommend_power
			if (heroUid ~= -1) then
				self:AddHeroCom(heroUid, self.allHeroes[index].index)
			end
		end
	end

	self.isAuto = true
end

function GoldenCityPrepareUIView:AddHeroCom(heroUid,index)
	local heroData = CS.RoleDataProxy.inst:GetHeroDataByUid(heroUid)
	heroData.isSelect = true
	local AddExpPercent = 1
	local buff = CS.GlobalBuffDataProxy.inst:GetGlobalBuffData(CS.GlobalBuffType.explore_heroExpUp)
	if(buff ~= nil)then
		AddExpPercent = AddExpPercent * (1 + buff.buffInfo.buffParam / 100)
	end
	local unionBuffData = CS.UserDataProxy.inst:GetUnionBuffData(CS.EUnionScienceType.ExpSkill)
	if(unionBuffData ~= nil)then
		AddExpPercent = AddExpPercent * (1 + unionBuffData.config.add2_num / 100)
	end

	local canAddExp = self.curInstanceCfg.hero_exp * self.itemAddExpPercent * AddExpPercent
	
	self.allHeroes[index]:setHeroData(heroData, self._uiCanvas.sortingLayerName, self._uiCanvas.sortingOrder, canAddExp)
	self:exploreHeroNumChange(true)
	self:setFightChange()
	self:RefreshAward()

	if(self.isAuto)then
		self.allHeroes[index]:CheckPosAndProfessionType()
	end
	
	self:RefreshShowTalent()
end

function GoldenCityPrepareUIView:RemoveHeroCom(heroUid,index)
	local heroData = CS.RoleDataProxy.inst:GetHeroDataByUid(heroUid)
	heroData.isSelect = false
	self.allHeroes[index]:clearHeroData()
	self:exploreHeroNumChange(false)
	self.teamFightSum = self.teamFightSum - self.allHeroes[index].fightingCount
	self:setFightChange()
	self:RefreshAward()
	
	self:RefreshShowTalent()
end

function GoldenCityPrepareUIView:RefreshShowTalent()
	local heroTypes = {}
	heroTypes[1] = 0
	heroTypes[2] = 0
	heroTypes[3] = 0

	self.selectTalent = nil

	for i = 0, self.allHeroes.Count - 1 do
		local heroIndex = i
		if self.allHeroes[heroIndex].Data ~= nil then
			heroTypes[self.allHeroes[heroIndex].Data.config.type] = heroTypes[self.allHeroes[heroIndex].Data.config.type] + 1
		end
	end

	for i = self.allHeroes.Count - 1, 0 ,-1 do
		local heroIndex = i

		if(self.allHeroes[heroIndex].Data ~= nil)then
			local curTalentData = self.allHeroes[heroIndex].Data.talentConfig:GetRingVal()
			if (curTalentData ~= nil)then
				if (heroTypes[curTalentData:GetRingHeroType()] >= 3) then
					self.selectTalent = curTalentData
					self.selectTalent.isOpen = true
				end
			end
		end
	end

	if (self.selectTalent ~= nil) then
		self.showTalentObj.gameObject:SetActive(self.selectTalent.isOpen)
		if (self.selectTalent.isOpen) then
			local skillShowCfg = CS.HeroSkillShowConfigManager.inst:GetConfig(self.selectTalent.talentId)
			if (skillShowCfg ~= null) then
				self.showTalentIcon:SetSprite(skillShowCfg.skill_atlas, skillShowCfg.skill_icon)
			end
		end
	else
		self.showTalentObj.gameObject:SetActive(false)
	end
end

function GoldenCityPrepareUIView:exploreHeroNumChange(isAdd)
	if(isAdd)then
		self.renshu = self.renshu + 1
	else
		self.renshu = self.renshu - 1
	end
	self.renshuText.text = tostring(self.renshu)

	self:calculateTime()
end

function GoldenCityPrepareUIView:calculateTime()
	local exploreTime = self.curInstanceCfg.explore_time
	local numPercent = math.ceil(exploreTime * self.curInstanceCfg.decreas_formula / 100)
	exploreTime = exploreTime - self.renshu * numPercent
	exploreTime = math.ceil(exploreTime * self.itemTimePercent)
	local buff = CS.GlobalBuffDataProxy.inst:GetGlobalBuffData(CS.GlobalBuffType.explore_speedUp)
	if(buff ~= nil)then
		exploreTime = exploreTime - math.ceil(exploreTime * buff.buffInfo.buffParam / 100)
	end
	local unionBuffData = CS.UserDataProxy.inst:GetUnionBuffData(CS.EUnionScienceType.ExploreSkill)
	if(unionBuffData ~= nil)then
		exploreTime = exploreTime - math.ceil(exploreTime * unionBuffData.config.add2_num / 100)
	end

	self.exploreTimeText.text = CS.TimeUtils.timeSpanStrip(exploreTime)
end

function GoldenCityPrepareUIView:setFightChange()
	self.teamFightSum = 0
	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		if (self.allHeroes[index].Data ~= nil) then
			self.allHeroes[index]:setHeroFightCount(self.itemAttPercent)
		end
	end
	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		if (self.allHeroes[index].Data ~= nil) then
			self.teamFightSum = self.teamFightSum + self.allHeroes[index].fightingCount
		end
	end

	for i = 0, self.allHeroes.Count - 1 do
		local index = i
		if (self.allHeroes[index].Data ~= nil) then
			self.allHeroes[index]:setHeroFighit(self.itemAttPercent, self.curInstanceCfg.recommend_power, self.teamFightSum,self.curInstanceCfg.team_strength)
		end
	end
end

function GoldenCityPrepareUIView:setTimer()

	if(self.timer ~= 0)then
		csGameTimerInst:RemoveTimer(self.timer)
		self.timer = 0
	end

	local remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow

	if(remainTime <= 0)then
		self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
	else
		self.timeText.text = CS_TimeUtils.timeSpanStrip(remainTime,true)
	end

	self.timer = csGameTimerInst:AddTimer(1,GoldenCityDataProxy.inst.endTime,function()

			local _remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow

			if(remainTime <= 0)then
				self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
				if(self.timer ~= 0)then
					csGameTimerInst:RemoveTimer(self.timer)
					self.timer = 0
				end
			else
				self.timeText.text = CS_TimeUtils.timeSpanStrip(remainTime,true)
			end

		end)
end

function GoldenCityPrepareUIView:SetDifficultData(cfg)
	if(cfg == nil) then print("输出 夺宝奇兵没拿到数据") return end

	self.difficultText.text = cs_LanguageManagerInst:GetValueByKey("难度{0}",tostring(self.difficultIndex))

	self.curInstanceCfg = CS.ExploreInstanceConfigManager.inst:GetConfig(cfg.instance_id)

	self.suggestFightingText.text = cs_LanguageManagerInst:GetValueByKey("建议战力：{0}",tostring(self.curInstanceCfg.recommend_power))

	self:SetAllPointData()
	self:setHeroPositionData()
	self:setAutomaticHeroData()
	self:calculateTime()

	self:RefreshAward()

	if(self.curInstanceCfg ~= nil)then
		local monsterCfg = CS.MonsterConfigManager.inst:GetConfig(self.curInstanceCfg.boss_id)
		if(monsterCfg ~= nil)then
			self.bossIcon:SetSprite(monsterCfg.monster_atlas,monsterCfg.monster_icon)
			self.bossNameText.text = cs_LanguageManagerInst:GetValueByKey(monsterCfg.monster_name)
		end


	end
end

function GoldenCityPrepareUIView:RefreshAward()
	if(self.data.instance_type == 1)then
		self:SetNormalExploreData(self.curInstanceCfg)
	elseif self.data.instance_type == 2 then
		self:SetBossExploreData(self.curInstanceCfg)
	end
end

function GoldenCityPrepareUIView:SetAllPointData()
	for i = 1, #self.allPoints do
		local index = i

		if(index <= #self.normalCfgList)then
			self.allPoints[index].gameObject:SetActive(true)
			if(index == self.difficultIndex)then

				self.allPoints[index]:SetSprite("goldenCity_atlas","tanxian_nandu2")
			else

				self.allPoints[index]:SetSprite("goldenCity_atlas","tanxian_nandu1")
			end
		else
			self.allPoints[index].gameObject:SetActive(false)
		end
	end
end

function GoldenCityPrepareUIView:SetNormalExploreData(instanceCfg)

	self.leftBtn.gameObject:SetActive(true)
	self.rightBtn.gameObject:SetActive(true)
	self.pointObj:SetActive(true)
	--self.pointList.gameObject:SetActive(true)

	local awards = {}

	if(instanceCfg ~= nil)then
		local val1 = math.ceil(instanceCfg.drop1_num_min * self.itemAddPercent) .. "-" .. math.ceil(instanceCfg.drop1_num_max * self.itemAddPercent)
		local drop1 = {itemId = instanceCfg.drop1_id,valStr = val1}
		local val2 = math.ceil(instanceCfg.drop2_num_min * self.itemAddPercent) .. "-" .. math.ceil(instanceCfg.drop2_num_max * self.itemAddPercent)
		local drop2 = {itemId = instanceCfg.drop2_id,valStr = val2}
		local minVal = math.ceil(instanceCfg.drop3_num_min  * (self.renshu / instanceCfg.people_number) * self.itemAddPercent)
		local maxVal = math.ceil(instanceCfg.drop3_num_max  * (self.renshu / instanceCfg.people_number) * self.itemAddPercent)
		local val3 = minVal .. "-" .. maxVal
		local drop3 = {itemId = instanceCfg.drop3_id,valStr = val3}
		awards[1] = drop1
		awards[2] = drop2
		awards[3] = drop3

		self:SetAwardListData(awards,false)
	end
end

function GoldenCityPrepareUIView:SetBossExploreData(instanceCfg)
	self.leftBtn.gameObject:SetActive(false)
	self.rightBtn.gameObject:SetActive(false)
	self.pointObj:SetActive(false)
	--self.pointList.gameObject:SetActive(false)

	local awards = {}

	if(instanceCfg ~= nil)then
		local minVal = math.ceil(instanceCfg.drop3_num_min  * (self.renshu / instanceCfg.people_number) * self.itemAddPercent)
		local maxVal = math.ceil(instanceCfg.drop3_num_max  * (self.renshu / instanceCfg.people_number) * self.itemAddPercent)
		local val1 = minVal .. "-" .. maxVal
		local drop1 = {itemId = instanceCfg.drop3_id,valStr = val1}
		local drop2 = {itemId = self.data.ic_id,valStr = math.ceil(self.data.ic_probability / 100) .. "%"}
		local drop3 = {itemId = self.data.box_id,valStr = math.ceil(self.data.box_probability / 100) .. "%"}
		awards[1] = drop1
		awards[2] = drop2
		awards[3] = drop3

		self:SetAwardListData(awards,true)
	end
end

function GoldenCityPrepareUIView:SetAwardListData(awardsList,isBossExplore)
	if(isBossExplore)then
		self.orText.enabled = true
		if(#awardsList == 3)then
			self.orTextRect.anchoredPosition = csVector2(80,-10)
		elseif #awardsList == 4 then
			self.orTextRect.anchoredPosition = csVector2(162,-10)
		end
	else
		self.orText.enabled = false
	end

	for i = 1, #self.allAwards do
		local index = i

		if(index <= #awardsList)then

			self.allAwards[index].gameObject:SetActive(true)
			self.allAwards[index]:SetData(awardsList[index])

		else

			self.allAwards[index].gameObject:SetActive(false)

		end
	end
end
------------------------------------------------