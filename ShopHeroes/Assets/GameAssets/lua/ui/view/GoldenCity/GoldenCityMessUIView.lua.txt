--GoldenCityMessUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csUserDataProxyInst = CS.UserDataProxy.inst
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local csGameTimerInst = CS.GameTimer.inst
local Vector3 = CS.UnityEngine.Vector3
local csWorldParConfigManagerInst = CS.WorldParConfigManager.inst
local CS_TimeUtils = CS.TimeUtils
local CS_CharacterManagerInst = CS.CharacterManager.inst
local CS_SpineUtils = CS.SpineUtils

GoldenCityMessUIView = class(ViewBase)

function GoldenCityMessUIView:ctor()
	self.viewID = Constants.ViewName.GoldenCityMessUIView
	GoldenCityMessUIView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function GoldenCityMessUIView:initComp()
	local contentPane = self.contentPanel

	self.closeBtn = contentPane:GetButton("closeBtn")
	local superList =  contentPane:GetObjByName("scrollView")
	self.scrollView = superList:GetComponent(CS_type_superList)
	self.listItemCount = 0

	self.titleIcon = contentPane:GetGUIIcon("titleIcon")
	self.titleText = contentPane:GetText("titleText")
	self.timeText = contentPane:GetText("timeText")
	self.stateGroup = contentPane:GetObjByName("stateGroup"):GetComponent("ToggleGroupMarget")
	self.toggleLinkObjs = contentPane:GetObjByName("toggleLinkObjs"):GetComponent("ObjList").objList
	self.messIcon1 = contentPane:GetGUIIcon("messIcon1")
	self.messIcon2 = contentPane:GetGUIIcon("messIcon2")
	self.messIcon3 = contentPane:GetGUIIcon("messIcon3")
	self.allScoreText = contentPane:GetText("allScoreText")
	self.nothingTips = contentPane:GetText("nothingTips")
	self.icon = contentPane:GetGUIIcon("icon")
	self.selfRankText = contentPane:GetText("selfRankText")
	self.selfRankValText = contentPane:GetText("selfRankValText")
	self.selfRankValIcon = contentPane:GetGUIIcon("selfRankValIcon")
	self.selfNameText = contentPane:GetText("selfNameText")
	self.selfHeadIconTf = contentPane:GetObjByName("selfHeadIconTf").transform
	self.bottomObj = contentPane:GetObjByName("bottomObj")

	self.uiAnimator = contentPane.uiAnimator
end

function GoldenCityMessUIView:onInit()

	self:initComp()

	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.stateGroup.OnSelectedIndexValueChange = function (index)
		self:onSelectedIndexValueChange(index)
	end

	self.scrollView.itemRenderer = function(index,item)
		self:ListItemRenderer(index,item)
	end

	self.remainTimer = 0
	self.rankList = {}

	self.itemCfg = nil
	self.headGraphicSystem = nil

	self.dataList = {}
	self.index = 0
end

function GoldenCityMessUIView:DoShowAnimation()
	self:onShowed()

	self.uiAnimator:CrossFade("show", 0)
	self.uiAnimator:Update(0)
	self.uiAnimator:Play("show")
end

function GoldenCityMessUIView:DoHideAnimation()
	self.uiAnimator:Play("hide")
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	csGameTimerInst:AddTimer(
		animLength,
		1,
		function()
			self.uiAnimator:CrossFade("null", 0)
			self.uiAnimator:Update(0)
			self:HideView()
		end
	)
end

function GoldenCityMessUIView:onHide()
	--print("GoldenCityMessUIView onHide")
	self:clearTimer()
end

function GoldenCityMessUIView:clearTimer()
	if self.remainTimer ~= 0 then

		csGameTimerInst:RemoveTimer(self.remainTimer)
		self.remainTimer = 0

	end
end

function  GoldenCityMessUIView:onShowed()
	--print("GoldenCityMessUIView onShowed")
end

function GoldenCityMessUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function GoldenCityMessUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function GoldenCityMessUIView:closeBtnClick()
	self:hide()
end

function GoldenCityMessUIView:SetUIData(index)
	self.titleIcon:SetSpriteURL(GoldenCityDataProxy.inst:GetActivityStr(4))
	self.titleText.text = GoldenCityDataProxy.inst:GetActivityStr(1)

	local itemWdpCfg = csWorldParConfigManagerInst:GetConfig(8403)
	if(itemWdpCfg ~= nil)then
		self.itemCfg = CS.ItemconfigManager.inst:GetConfig(itemWdpCfg.parameters)
		if(self.itemCfg ~= nil)then
			self.messIcon2.iconImage.enabled = true
			self.messIcon2:SetSprite(self.itemCfg.atlas,self.itemCfg.icon)
		else
			self.messIcon2.iconImage.enabled = false
		end
	else
		self.messIcon2.iconImage.enabled = false
	end

	local lastBossCfg = nil
	if(GoldenCityDataProxy.inst.bossExploreIsAllOver)then
		lastBossCfg = GoldenCityConfigManager:GetLastBossConfig()
	else
		lastBossCfg = GoldenCityDataProxy.inst.bossExploreCfg
	end

	if(lastBossCfg ~= nil)then
		local keyItemCfg = CS.ItemconfigManager.inst:GetConfig(lastBossCfg.ic_id)
		if(keyItemCfg ~= nil)then
			self.messIcon3.iconImage.enabled = true
			self.messIcon3:SetSprite(keyItemCfg.atlas,keyItemCfg.icon)
		else
			self.messIcon3.iconImage.enabled = false
		end
	else
		self.messIcon3.iconImage.enabled = false
	end

	self:setTimer()

	self.stateGroup:OnEnableMethod(index)
end

function GoldenCityMessUIView:setTimer()

	self:clearTimer()

	local remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow

	if(remainTime <= 0)then
		self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
	else
		self.timeText.text = CS_TimeUtils.timeSpanStrip(remainTime,true)
	end

	self.remainTimer = csGameTimerInst:AddTimer(1,GoldenCityDataProxy.inst.endTime,function()

			local _remainTime = GoldenCityDataProxy.inst.endtime_serverEndtime - csGameTimerInst.serverNow

			if(remainTime <= 0)then
				self:clearTimer()
				self.timeText.text = cs_LanguageManagerInst:GetValueByKey("已结束")
			else
				self.timeText.text = CS_TimeUtils.timeSpanStrip(remainTime,true)
			end

		end)
end

function GoldenCityMessUIView:onSelectedIndexValueChange(index)

	self.index = index

	CS.AudioManager.inst:PlaySound(11)

	for i = 0,self.toggleLinkObjs.Count - 1 do
		self.toggleLinkObjs[i]:SetActive(false)
	end

	self.toggleLinkObjs[index]:SetActive(true)

	self:setState(index)

end

function GoldenCityMessUIView:setState(index)
	if(index == 0)then -- 信息

	elseif index == 1 then -- 排行
		self:setRankData()
	else

	end
end

function GoldenCityMessUIView:setRankData()
	self.allScoreText.text = ""
	--self.nothingTips.gameObject:SetActive(true)
	self.allScoreText.gameObject:SetActive(false)
	self.bottomObj:SetActive(false)
	self.scrollView.gameObject:SetActive(false)

	--EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.Request_OperatingActivity_UnionRankList)
	EventDispatcher:dispatchEvent(GameEvent.GoldenCityEvent.Request_GoldenCity_RankList)
end

function GoldenCityMessUIView:getRankListData(rankList,selfRankData)
	if self.index ~= 1 then
		return
	end

	self.allScoreText.gameObject:SetActive(true)
	self.bottomObj:SetActive(true)
	self.scrollView.gameObject:SetActive(true)

	self.rankList = rankList

	if #self.rankList > 1 then

		table.sort(self.rankList,function (a,b)

				if a == nil or b == nil then
					return false
				end

				if a.point > b.point then
					return true
				elseif a.point == b.point then
					return false
				else
					return false
				end
			end)

	end

	self:SetListItemTotalCount(#self.rankList)

	self.nothingTips.gameObject:SetActive(#self.rankList == 0)

	local allPointNum = 0

	for i = 1, #self.rankList do
		allPointNum = self.rankList[i].point + allPointNum
	end

	self.allScoreText.text = tostring(allPointNum)

	if(self.itemCfg ~= nil)then
		self.icon.iconImage.enabled = true
		self.selfRankValIcon.iconImage.enabled = true
		self.icon:SetSprite(self.itemCfg.atlas,self.itemCfg.icon)
		self.selfRankValIcon:SetSprite(self.itemCfg.atlas,self.itemCfg.icon)
	else
		self.icon.iconImage.enabled = false
		self.selfRankValIcon.iconImage.enabled = false
	end

	

	if(selfRankData == nil)then
		self.selfRankText.text = ""
		self.selfRankValText.text = ""
		self.selfNameText.text = ""
	else
		local rankVal = 1
		for i = 1, #self.rankList do
			if(self.rankList[i].userId == selfRankData.userId)then
				rankVal = i
				break
			end
		end
		
		self.selfRankText.text = tostring(rankVal)
		self.selfRankValText.text = tostring(selfRankData.point)
		self.selfNameText.text = cs_LanguageManagerInst:GetValueByKey(selfRankData.name)
		self:SetSelfRankPrefab(selfRankData.gender,selfRankData.userDress)
	end
end

function GoldenCityMessUIView:SetSelfRankPrefab(gender,userDress)
	if self.headGraphicSystem == nil or self.headGraphicSystem:IsNull() == true then

		local funcGeneric = xlua.get_generic_method(CS.CharacterManager, "GetCharacter")
		local func = funcGeneric(CS.GraphicDressUpSystem)

		func(CS_CharacterManagerInst,CS_CharacterManagerInst:GetPeopleShapeNudeSpinePath(CS.EGender.__CastFrom(gender)),CS_SpineUtils.RoleDressToHeadDressIdList(userDress),CS.EGender.__CastFrom(gender),1.4,true,function (system)
				self.headGraphicSystem = system
				system.transform:SetParent(self.selfHeadIconTf)
				system.transform.localScale = Vector3.one * 0.3
				system.transform.localPosition = Vector3.down * 186
				system:SetDirection(CS.RoleDirectionType.Right)
			end)

	else
		CS_CharacterManagerInst:ReSetCharacter(self.headGraphicSystem,CS_CharacterManagerInst:GetPeopleShapeNudeSpinePath(CS.EGender.__CastFrom(gender)),CS_SpineUtils.RoleDressToHeadDressIdList(userDress),CS.EGender.__CastFrom(gender))
	end
end

function GoldenCityMessUIView:ListItemRenderer(index,item)
	local prefabItem = item
	if(index >= self.listItemCount)then
		prefabItem.gameObject:SetActive(false)
	end

	if(index < self.listItemCount)then
		prefabItem.gameObject:SetActive(true)
		prefabItem:SetData(self.rankList[index + 1])
	end
end

function GoldenCityMessUIView:SetListItemTotalCount(count)
	self.listItemCount = count
	if(count < 0)then
		self.listItemCount = 0
	end

	self.scrollView.totalItemCount = count
end
------------------------------------------------