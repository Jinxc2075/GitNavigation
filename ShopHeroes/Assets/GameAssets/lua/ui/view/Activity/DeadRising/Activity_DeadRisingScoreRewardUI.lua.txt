
--Activity_DeadRisingScoreRewardUI

require("const/Constants")
require("class")
require("ui/ViewBase")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csUserDataProxyInst = CS.UserDataProxy.inst
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_luaList = typeof(CS.LuaListItem)
local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local csGameTimerInst = CS.GameTimer.inst
local csVector2 = CS.UnityEngine.Vector2
local csWorldParConfigManagerInst = CS.WorldParConfigManager.inst

Activity_DeadRisingScoreRewardUI = class(ViewBase)

function Activity_DeadRisingScoreRewardUI:ctor()
	self.viewID = Constants.ViewName.Activity_DeadRisingScoreRewardUI
	Activity_DeadRisingScoreRewardUI.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function Activity_DeadRisingScoreRewardUI:initComp()
	local contentPane = self.contentPanel

	local superList =  contentPane:GetObjByName("scrollView")
	self.scrollView = superList:GetComponent(CS_type_superList)
	self.listItemCount = 0

	self.titleText = contentPane:GetText("titleText")
	self.rankBtn = contentPane:GetButton("rankBtn")
	self.backBtn = contentPane:GetButton("backBtn")
	self.titleIcon = contentPane:GetGUIIcon("titleIcon")
	self.itemIcon = contentPane:GetGUIIcon("itemIcon")
end

function Activity_DeadRisingScoreRewardUI:onInit()

	self:initComp()

	self.rankBtn:ButtonClickTween(
		function ()
			EventDispatcher:dispatchEvent(GameEvent.Activity_DeadRisingEvent.ShowUI_Activity_DeadRising_messRankUI,1)
		end
	)

	self.backBtn:ButtonClickTween(
		function ()
			self:hide()
		end
	)

	self.scrollView.itemRenderer = function(index,item)
		self:ListItemRenderer(index,item)
	end

	self.scrollView.itemUpdateInfo = function(index,item)
		self:ListItemRenderer(index,item)
	end

	self.index = 0
end

function Activity_DeadRisingScoreRewardUI:ShowByRewardLv(lv)

	self:SetData()

	--self.titleIcon:SetSpriteURL(Activity_DeadRisingDataProxy.inst:GetActivityStr(MsgType.EOperatingActivityStringType.Icon))
	--self.titleText.text = Activity_DeadRisingDataProxy.inst:GetActivityStr(MsgType.EOperatingActivityStringType.Name)

	--local itemWdpCfg = csWorldParConfigManagerInst:GetConfig(8512)
	--if(itemWdpCfg ~= nil)then
		--local itemCfg = CS.ItemconfigManager.inst:GetConfig(itemWdpCfg.parameters)
		--if(itemCfg ~= nil)then
			--self.itemIcon.iconImage.enabled = true
			--self.itemIcon:SetSprite(itemCfg.atlas,itemCfg.icon)
		--else
			--self.itemIcon.iconImage.enabled = false
		--end
	--else
		--self.itemIcon.iconImage.enabled = false
	--end

	--local num = #Activity_DeadRisingDataProxy.inst.scoreRewardList
	--if lv < 1 then
		--lv = 1
	--end

	--CS.FGUI.inst.isLandscape and lv - 1 or num - lv
	self.scrollView:scrollByItemIndex(CS.FGUI.inst.isLandscape and lv - 1 or num - lv)
	--self:Refresh()
end

function Activity_DeadRisingScoreRewardUI:SetData()

	--local num = #Activity_DeadRisingDataProxy.inst.scoreRewardList

	--self:SetListItemTotalCount(num + 2)

end

function Activity_DeadRisingScoreRewardUI:Refresh()

	self.scrollView:refresh()

end

function Activity_DeadRisingScoreRewardUI:ListItemRenderer(index,item)
	local prefabItem = item
	if(index >= self.listItemCount)then
		prefabItem.gameObject:SetActive(false)
	end

	if(index < self.listItemCount)then
		if(index ~= 0 and index ~= self.listItemCount - 1)then
			prefabItem.gameObject:SetActive(true)
			prefabItem:SetData(index)
		else
			prefabItem.gameObject:SetActive(false)
		end
	end
end

function Activity_DeadRisingScoreRewardUI:SetListItemTotalCount(count)
	self.listItemCount = count
	if(count < 0)then
		self.listItemCount = 0
	end

	self.scrollView.totalItemCount = count
end
------------------------------------------------