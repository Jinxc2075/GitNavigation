--UnionTaskCheckView

require("const/Constants")
require("class")
require("ui/ViewBase")
require("utils/XLuaUtils")
local EventDispatcher = require("event/EventDispatcher")
local CS_TimeUtils = CS.TimeUtils
local CS_GameTimerInst = CS.GameTimer.inst

local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local CS_type_ObjList = typeof(CS.ObjList)
local CS_type_GUIIcon = typeof(CS.GUIIcon)

local CS_UserDataProxyInst = CS.UserDataProxy.inst
local CS_LanguageManagerInst = CS.LanguageManager.inst
local CS_EventControllerInst = CS.EventController.inst
local CS_GameEventType = CS.GameEventType
local CS_WorldParConfigManagerInst = CS.WorldParConfigManager.inst
local CS_UnionTaskConfigManagerInst = CS.UnionTaskConfigManager.inst

UnionTaskCheckView = class(ViewBase)

function UnionTaskCheckView:ctor()
	self.viewID = Constants.ViewName.UnionTaskCheckView
	UnionTaskCheckView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
	self.isShowResPanel = true
	self.topResPanelType = CS.TopPlayerShowType.selfUnionToken
end
------------------------------------------------

function UnionTaskCheckView:initComp()
	local contentPane = self.contentPanel

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.headIcon = contentPane:GetObjByName("headIcon").transform:GetComponent(CS_type_GUIIcon)
	self.roleNameTx = contentPane:GetText("roleNameTx")
	self.roleTalkTx = contentPane:GetText("roleTalkTx")

	local objList = contentPane:GetObjByName("stars").transform:GetComponent(CS_type_ObjList).objList
	self.stars = {}

	for i = 0,objList.Count - 1 do
		self.stars[i + 1] = objList[i].transform:GetComponent(CS_type_GUIIcon)
	end

	self.leftBtn = contentPane:GetButton("leftBtn")
	self.rightBtn = contentPane:GetButton("rightBtn")
	self.targetIcon = contentPane:GetObjByName("targetIcon"):GetComponent(CS_type_GUIIcon)
	self.taskNameTx = contentPane:GetText("taskNameTx")
	self.awardIcon = contentPane:GetObjByName("awardIcon"):GetComponent(CS_type_GUIIcon)
	self.awardNumTx = contentPane:GetText("awardNumTx")
	self.startBtn = contentPane:GetButton("startBtn")
	self.refreshObj = contentPane:GetObjByName("refreshObj")
	self.refreshOverObj = contentPane:GetObjByName("refreshOverObj")
	self.difficultIcon = contentPane:GetObjByName("difficultIcon"):GetComponent(CS_type_GUIIcon)
	self.difficultTx = contentPane:GetText("difficultTx")
	self.countdownTx = contentPane:GetText("countdownTx")
	
	self.uiAnimator = contentPane.uiAnimator
	
end


function UnionTaskCheckView:onInit()

	self:initComp()

	self.difficultIcons = {"lianmeng_dengjijiandan","lianmeng_dengjizhongdeng","lianmeng_dengjikunnan" }
	
	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.startBtn:ButtonClickTween(
		function ()
			self:onStartBtnClick()
		end
	)

	self.leftBtn:ButtonClickTween(
		function ()
			self:turnPage(true)
		end
	)

	self.rightBtn:ButtonClickTween(
		function ()
			self:turnPage(false)
		end
	)

end


function UnionTaskCheckView:onHide()
	print("UnionTaskCheckView onHide")
	self.data = nil
end

function  UnionTaskCheckView:onShowed()
	print("UnionTaskCheckView onShowed")
end

function UnionTaskCheckView:DoShowAnimation()

	self:onShowed()

	self.uiAnimator:CrossFade("show", 0);
	self.uiAnimator:Update(0);
	self.uiAnimator:Play("show");

end

function UnionTaskCheckView:DoHideAnimation()

	self.uiAnimator:Play("hide");
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	CS_GameTimerInst:AddTimer(animLength,1,function ()
			self.uiAnimator:CrossFade("null", 0);
			self.uiAnimator:Update(0);
			self:HideView();
		end)

end


function UnionTaskCheckView:getDifficultyStr(point)

	local result = ""

	if 	point == 1 then
		result = "简单"
	elseif point == 2 then
		result = "中等"
	elseif point == 3 then
		result = "困难"
	end

	return result

end

function UnionTaskCheckView:GetServerData(data)

	if 	data == nil or data:IsNull() == true or self.data.data.taskUid ~= data.data.taskUid then
		return
	end

	self.data = data

	self.targetIcon:SetSprite(data.atlas,data.icon)
	self.taskNameTx.text = CS_LanguageManagerInst:GetValueByKey(data.config.desc,tostring(data.data.limit),data.StrParam_2)
	self.refreshObj:SetActive(false)
	self.refreshOverObj:SetActive(true)

	local selfNotHasUnionTask = CS_UserDataProxyInst.selfUnionTask == nil or  CS_UserDataProxyInst.selfUnionTask:IsNull() == true

	self.startBtn.enabled = selfNotHasUnionTask
	CS.GUIHelper.SetUIGray(self.startBtn.transform,not selfNotHasUnionTask)

end

function UnionTaskCheckView:SetData(data)

	self.data = data
	self.refreshObj:SetActive(true)
	self.refreshOverObj:SetActive(false)

	self.headIcon:SetSprite("portrait_atlas",data.npcConfig.icon)
	self.roleNameTx.text = CS_LanguageManagerInst:GetValueByKey(data.npcConfig.name)
	self.roleTalkTx.text = CS_LanguageManagerInst:GetValueByKey(data.npcConfig.union_task_desc)

	self.awardIcon:SetSprite(data.selfAwardConfig.atlas,data.selfAwardConfig.icon)
	
	local cfg = CS_UnionTaskConfigManagerInst:GetConfig(data.data.taskId)
	
	if cfg == nil then
		
		CS.Logger.error("Lua侧 联盟悬赏任务配置表 未读取到该id ： "..data.data.taskId)
		self:hide()
		return
		
	end
	
	data.config = cfg
	
	self.awardNumTx.text = "X"..tostring(cfg.reward_number)

	for i = 1,#self.stars do

		if i <= data.data.point then
			self.stars[i]:SetSprite("__common_1", "lianmeng_shengwang")
		else
			self.stars[i]:SetSprite("union_atlas", "lianmeng_shengwang2")
		end

	end
	
	self.difficultIcon:SetSprite("union_atlas",self.difficultIcons[cfg.difficulty])
	self.difficultTx.text =  CS_LanguageManagerInst:GetValueByKey(self:getDifficultyStr(cfg.difficulty))

	self.countdownTx.text = CS_TimeUtils.timeSpanStrip(CS_WorldParConfigManagerInst:GetConfig(2022).parameters * 3600,false)
	
	
	local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent")
	local func = funcGeneric(CS.System.Int32)
	
	func(CS_EventControllerInst,CS_GameEventType.UnionEvent.UNION_REQUEST_CHECKUNIONTASK,data.data.taskUid)

end

function UnionTaskCheckView:shiftIn()
	self.contentObject:SetActive(true)
end

function UnionTaskCheckView:shiftOut()
	self.contentObject:SetActive(false)
end

function UnionTaskCheckView:closeBtnClick()
	self:hide()
end

function UnionTaskCheckView:onStartBtnClick()
	
	
	local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent")
	local func = funcGeneric(CS.System.Int32)
	
	func(CS_EventControllerInst,CS_GameEventType.UnionEvent.UNION_REQUEST_STARTUNIONTASK,self.data.data.taskUid)
end

function UnionTaskCheckView:turnPage(isLeft)
	EventDispatcher:dispatchEvent(GameEvent.UnionEvent.TurnPage_UnionTaskCheckView,isLeft,self.data)
end

------------------------------------------------