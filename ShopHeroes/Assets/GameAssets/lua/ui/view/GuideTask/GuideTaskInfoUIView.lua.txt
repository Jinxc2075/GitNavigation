--GuideTaskInfoUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
require("utils/XLuaUtils")
require("data/GuideTaskDataProxy")
local CS_type_luaList = typeof(CS.LuaListItem)
local CS_type_objList = typeof(CS.ObjList)
local cs_LanguageManagerInst = CS.LanguageManager.inst
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local csGUIHelper = CS.GUIHelper
local EventDispatcher = require("event/EventDispatcher")

local CS_GameTimerInst = CS.GameTimer.inst

GuideTaskInfoUIView = class(ViewBase)

function GuideTaskInfoUIView:ctor()
	self.viewID = Constants.ViewName.GuideTaskInfoUIView
	GuideTaskInfoUIView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function GuideTaskInfoUIView:initComp()
	local contentPane = self.contentPanel

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.nameText = contentPane:GetText("taskNameText")
	self.scheduleText = contentPane:GetText("descText")
	self.allTask = contentPane:GetObjByName("allTask"):GetComponent(CS_type_objList)
	self.rewardIcon = contentPane:GetGUIIcon("rewardIcon")
	self.rewardNumText = contentPane:GetText("rewardNumText")
	self.finishBtn = contentPane:GetButton("finishBtn")
	self.panelBgBtn = contentPane:GetButton("CoverBG")

	local allObj = self.allTask.objList
	self.allTasks = {}
	for i = 1, allObj.Count do
		self.allTasks[i] = allObj[i - 1]:GetComponent(CS_type_luaList)
	end

	self.uiAnimator = contentPane.uiAnimator
end

function GuideTaskInfoUIView:onInit()
	self:initComp()

	self.closeBtn:ButtonClickTween(
		function()
			self:closeBtnClick()
		end
	)

	self.finishBtn:ButtonClickTween(
		function()
			EventDispatcher:dispatchEvent(GameEvent.GuideTask.REQUEST_GuideTaskReward)
		end
	)

	self.panelBgBtn.onClick:AddListener(
		function()
			self:closeBtnClick()
		end
	)
end

function GuideTaskInfoUIView:DoShowAnimation()
	self:onShowed()

	self.uiAnimator:CrossFade("show", 0)
	self.uiAnimator:Update(0)
	self.uiAnimator:Play("show")
end

function GuideTaskInfoUIView:DoHideAnimation()
	self.uiAnimator:Play("hide")
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	CS_GameTimerInst:AddTimer(
		animLength,
		1,
		function()
			self.uiAnimator:CrossFade("null", 0)
			self.uiAnimator:Update(0)
			if(self.contentObject ~= nil) then
				self:HideView()
			end
		end
	)
end

function GuideTaskInfoUIView:onHide()
	--print("GuideTaskInfoUIView onHide")
	--CS.AudioManager.inst:PlaySound(9)
end

function GuideTaskInfoUIView:onShowed()
	self:SetUIData()
	--print("GuideTaskInfoUIView onShowed")
end

function GuideTaskInfoUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function GuideTaskInfoUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function GuideTaskInfoUIView:closeBtnClick()
	self:hide()
end

function GuideTaskInfoUIView:SetUIData()
	local data = GuideTaskDataProxy.inst.curData
	if (data ~= nil) then
		self.nameText.text = cs_LanguageManagerInst:GetValueByKey(data.name)
		self.scheduleText.text = cs_LanguageManagerInst:GetValueByKey("待办任务{0}", data:GetGroupSchedule())
		local itemCfg = CS.ItemconfigManager.inst:GetConfig(data.allReward[1].itemId)
		if (itemCfg ~= nil) then
			self.rewardIcon:SetSprite(itemCfg.atlas, itemCfg.icon)
			self.rewardNumText.text = "x" .. data.allReward[1].count
		end
		self.finishBtn.gameObject:SetActive(data.state == 2)

		for i = 1, #self.allTasks do
			if (i > #data.allTask) then
				self.allTasks[i].gameObject:SetActive(false)
			else
				self.allTasks[i].gameObject:SetActive(true)
				self.allTasks[i]:SetData(data.allTask[i])
			end
		end
	else
		print("当前没有这个代办任务组的数据")
	end
end
------------------------------------------------
