--RefugeUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
require("data/RefugeTowerDataProxy")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csGUIHelper = CS.GUIHelper
local cs_LanguageManagerInst = CS.LanguageManager.inst
local CS_type_luaList = typeof(CS.LuaListItem)
local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local csGameTimerInst = CS.GameTimer.inst
local csTimeUtils = CS.TimeUtils

local data
local remainTime
local tempComp = nil

RefugeUIView = class(ViewBase)

function RefugeUIView:ctor()
	self.viewID = Constants.ViewName.RefugeUIView
	RefugeUIView.super.init(self, self.viewID)
	self.sortingLayerName = "window"
end

function RefugeUIView:initComp()
	local contentPane = self.contentPanel

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.remainTimeText = contentPane:GetText("remainTimeText")
	self.titleText = contentPane:GetText("titleText")
	self.titleText2 = contentPane:GetText("titleText2")
	self.levelText = contentPane:GetText("levelText")
	self.descText = contentPane:GetText("descText")
	self.startBtn = contentPane:GetButton("startBtn")
	self.zuanIcon = contentPane:GetGUIIcon("zuanIcon")
	self.bgBtn = contentPane:GetButton("bg")

	self.uiAnimator = contentPane.uiAnimator
end

function RefugeUIView:onInit()

	self:initComp()

	self.closeBtn:ButtonClickTween(
		function ()
			self:closeBtnClick()
		end
	)

	self.bgBtn.onClick:AddListener(
		function ()
			self:closeBtnClick()
		end
	)

	self.startBtn:ButtonClickTween(
		function ()
			EventDispatcher:dispatchEvent(GameEvent.RefugeEvent.ShowUI_RefugePanelUI)
			--self:closeBtnClick()
		end
	)
	
	self.timerId = 0
end

function RefugeUIView:DoShowAnimation()
	self:onShowed()

	self.uiAnimator:CrossFade("show", 0)
	self.uiAnimator:Update(0)
	self.uiAnimator:Play("show")
end

function RefugeUIView:DoHideAnimation()
	self.uiAnimator:Play("hide")
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	csGameTimerInst:AddTimer(
		animLength,
		1,
		function()
			self.uiAnimator:CrossFade("null", 0)
			self.uiAnimator:Update(0)
			self:HideView()
		end
	)
end

function RefugeUIView:onHide()
	--print("RefugeUIView onHide")
	if(self.timerId ~= 0)then
		csGameTimerInst:RemoveTimer(self.timerId)
		self.timerId = 0
	end
end

function  RefugeUIView:onShowed()
	--print("RefugeUIView onShowed")
end

function RefugeUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function RefugeUIView:shiftOut()
	self.contentObject:SetActive(false)
end

function RefugeUIView:closeBtnClick()
	self:hide()
end

function RefugeUIView:SetUIData()
	data = RefugeTowerDataProxy.inst.refugeData
	self.titleText2.text = cs_LanguageManagerInst:GetValueByKey(data.name)
	self.descText.text = cs_LanguageManagerInst:GetValueByKey(data.dec)
	self.levelText.text = data.min_lv
	--self.zuanIcon:SetSprite(data.atlas_icon,data.icon)

	if(self.timerId ~= 0)then
		csGameTimerInst:RemoveTimer(self.timerId)
		self.timerId = 0
	end
	if(RefugeTowerDataProxy.inst.remainTime > 0)then
		self.remainTimeText.text = csTimeUtils.timeSpan3Str(RefugeTowerDataProxy.inst.remainTime)
	else
		self.remainTimeText.text = cs_LanguageManagerInst:GetValueByKey("活动已结束")
	end

	self.timerId = csGameTimerInst:AddTimer(1,RefugeTowerDataProxy.inst.remainTime,function ()
			if(RefugeTowerDataProxy.inst.remainTime > 0)then
				self.remainTimeText.text = csTimeUtils.timeSpan3Str(RefugeTowerDataProxy.inst.remainTime)
			else
				self.remainTimeText.text = cs_LanguageManagerInst:GetValueByKey("活动已结束")
				csGameTimerInst:removeLoopTimer(tempComp)
				tempComp = nil
			end
		end)
end
------------------------------------------------