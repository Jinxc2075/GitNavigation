--LookBackInfoUIView

require("const/Constants")
require("class")
require("ui/ViewBase")
require("utils/XLuaUtils")
local cs_LanguageManagerInst = CS.LanguageManager.inst
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local EventDispatcher = require("event/EventDispatcher")
local csGameTimerInst = CS.GameTimer.inst

local CS_type_superList = typeof(CS.Mosframe.DynamicScrollView)
local CS_type_luaList = typeof(CS.LuaListItem)

local CS_CharacterManagerInst = CS.CharacterManager.inst
local CS_SpineUtils = CS.SpineUtils
local csVector3 = CS.UnityEngine.Vector3


local graphicDressUp = nil

LookBackInfoUIView = class(ViewBase)

function LookBackInfoUIView:ctor()
	self.viewID = Constants.ViewName.LookBackInfoUIView
	LookBackInfoUIView.super.init(self, self.viewID)
	--self.showType = 0
	self.sortingLayerName = "window"
end

function LookBackInfoUIView:initComp()
	local contentPane = self.contentPanel

	self.closeBtn = contentPane:GetButton("closeBtn")
	self.bgBtn = contentPane:GetButton("bg")

	local superList = contentPane:GetObjByName("allContent")
	self.scrollView = superList:GetComponent(CS_type_superList)

	self.rolePos = contentPane:GetObjByName("rolePos"):GetComponent("Transform")

	self.uiAnimator = contentPane.uiAnimator
end

function LookBackInfoUIView:onInit()
	self:initComp()

	self.closeBtn:ButtonClickTween(
		function()
			self:closeBtnClick()
		end
	)

	self.bgBtn.onClick:AddListener(
		function ()
			self:closeBtnClick()
		end
	)

	self.scrollView.itemRenderer = function(index, item)
		self:ListItemRenderer(index, item)
	end

	self.systemList = {}
end

function LookBackInfoUIView:ListItemRenderer(index, item)
	local smallItem = item.gameObject:GetComponent(CS_type_luaList)

	if (index >= self.listItemCount) then
		smallItem.gameObject:SetActive(false)
	end

	if (index < self.listItemCount) then
		smallItem.gameObject:SetActive(true)
		smallItem:SetData(self.systemList[index + 1])
	else
		smallItem.gameObject:SetActive(false)
	end
end

function LookBackInfoUIView:SetListItemTotalCount(count)
	self.listItemCount = count
	if (self.listItemCount < 0) then
		self.listItemCount = 0
	end

	self.scrollView.totalItemCount = count
end

function LookBackInfoUIView:DoShowAnimation()
	self:onShowed()
	self.uiAnimator:CrossFade("show", 0)
	self.uiAnimator:Update(0)
	self.uiAnimator:Play("show")
end

function LookBackInfoUIView:DoHideAnimation()
	self.uiAnimator:Play("hide")
	local animLength = self.uiAnimator:GetClipLength("common_popUpUI_hide")

	csGameTimerInst:AddTimer(
		animLength,
		1,
		function()
			self.uiAnimator:CrossFade("null", 0)
			self.uiAnimator:Update(0)
			self:HideView()
		end
	)
end

function LookBackInfoUIView:closeBtnClick()
	self:hide()
end

function LookBackInfoUIView:onShowed()
	local maxCount = 0
	if(CS.ChatDataProxy.inst.sysMsgChannelList.Count >= 10)then
		maxCount = 10
	else
		maxCount = CS.ChatDataProxy.inst.sysMsgChannelList.Count
	end

	local tempList = CS.ChatDataProxy.inst.sysMsgChannelList:GetRange(0,maxCount)
	local tempCache = {}
	local tempMaxCache = {}

	for i = 0, tempList.Count - 1 do
		local curContent = split(tempList[i].content,"|")
		if(tonumber(curContent[1]) == 4)then
			if(tempCache[tempList[i].userId..curContent[2]] ~= nil)then
				tempCache[tempList[i].userId..curContent[2]].level = tempCache[tempList[i].userId..curContent[2]].level + tonumber(curContent[3])
				tempCache[tempList[i].userId..curContent[2]].content = "4|"..curContent[2].."|"..tostring(tempCache[tempList[i].userId..curContent[2]].level)
			else
				tempCache[tempList[i].userId..curContent[2]] = tempList[i]
				tempCache[tempList[i].userId..curContent[2]].level = tonumber(curContent[3])
			end
		else
			self.systemList[#self.systemList + 1] = tempList[i]
		end
	end

	for i, v in pairs(tempCache) do
		self.systemList[#self.systemList + 1] = v
	end

	for i = 1, #self.systemList do
		local curContent = split(self.systemList[i].content,"|")
		--print("输出上",self.systemList[i].content,"      ",self.systemList[i].nickName,"       ",self.systemList[i].level)
		if(tonumber(curContent[1]) == 4)then
			if(tempMaxCache[curContent[2]] ~= nil)then
				--print("输出a1",curContent[2],"       ",tempMaxCache[curContent[2]].level,"      ",curContent[3])
				if(tempMaxCache[curContent[2]].level < tonumber(curContent[3]))then
					--print("输出a3",curContent[2],"      ",curContent[3])
					tempMaxCache[curContent[2]].level = tonumber(curContent[3])
					tempMaxCache[curContent[2]].userId = self.systemList[i].userId
				end
			else
				tempMaxCache[curContent[2]] = {}
				tempMaxCache[curContent[2]].level = tonumber(curContent[3])
				tempMaxCache[curContent[2]].userId = self.systemList[i].userId
				--print("输出a2",curContent[2],"       ",tempMaxCache[curContent[2]].level,"      ",curContent[3])
			end
		end
	end

	for i = 1, #self.systemList do
		local index = i
		--print("输出下",self.systemList[i].content,"      ",self.systemList[i].nickName,"       ",self.systemList[i].level)
		local curContent = split(self.systemList[index].content,"|")
		for k, v in pairs(tempMaxCache) do
			--print("输出xxx",curContent[2],"     ",k,"       ",self.systemList[index].userId,"      ",v.userId,"      ")
			--print("输出zzzz",self.systemList[index].level,"       ",v.level,"        ",self.systemList[index].nickName,"      ",v.nickName)
			if(tonumber(curContent[2]) == tonumber(k) and self.systemList[index].userId == v.userId)then
				--print("输出nice",self.systemList[index].level,"     ",curContent[2],"      ",self.systemList[index].nickName,"    ",index)
				self.systemList[index].level = 9999
			end
		end
	end

	self:SetPrefab()

	self:SetListItemTotalCount(#self.systemList)
end

function LookBackInfoUIView:SetPrefab()
	local funcGeneric = xlua.get_generic_method(CS.CharacterManager, "GetCharacterByModel")
	local func = funcGeneric(CS.GraphicDressUpSystem)
	func(CS_CharacterManagerInst,60000,0.14,true,function (system)
			graphicDressUp = system
			system.transform:SetParent(self.rolePos)
			system.transform.localScale = csVector3(1,1,1) * 0.8
			system.transform.localPosition = csVector3(0,0,0)
			graphicDressUp:Play("idle_1",true)
		end,nil)
	--if(graphicDressUp == nil)then

	--else
	--CS_CharacterManagerInst:ReSetCharacterByModel(graphicDressUp,60000,true,nil)
	----self:setRandomAnim(0)
	--end
end

function LookBackInfoUIView:onHide()
	csEventControllerInst:TriggerEvent(csGameEventType.ReceiveEvent.GO_ON)
end

function LookBackInfoUIView:shiftIn()
	self.contentObject:SetActive(true)
end

function LookBackInfoUIView:shiftOut()
	self.contentObject:SetActive(false)
end
------------------------------------------------
