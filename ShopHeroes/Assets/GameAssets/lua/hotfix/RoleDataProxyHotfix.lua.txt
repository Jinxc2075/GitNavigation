
local CSItemBagProxyInst = CS.ItemBagProxy.inst
local CSheroupgradeconfigManagerInst = CS.heroupgradeconfigManager.inst
local CSEquipConfigManagerInst = CS.EquipConfigManager.inst
local CSHeroProfessionConfigManagerInst = CS.HeroProfessionConfigManager.inst

-- C#已同步 新包需要

require("utils/XLuaUtils")
local util = require("xlua/util")
local EventDispatcher = require("event/EventDispatcher")

xlua.private_accessible(CS.RoleDataProxy)
xlua.hotfix(
	CS.RoleDataProxy,
	"GetHeroBestEquips",
	function(self, heroUid)

		local heroChangeEquips = get_csharp_list(CS.HeroChangeEquipData)

		local data = self:GetHeroDataByUid(heroUid)

		if(data == nil)then return heroChangeEquips end

		local equipDic = CSHeroProfessionConfigManagerInst:GetEquipDic(data.id)

		for i = 0, equipDic.Count - 1 do
			local equips = CSItemBagProxyInst:GetEquipItemsByHero(equipDic[i]:ToArray(), CSheroupgradeconfigManagerInst:GetHeroUpgradeConfig(data.level).equip_lv)
			if(equips.Count > 0)then

				local fightingMaxEquip = equips[0]

				for k = 1, equips.Count - 1 do
					local index = k
					if(EquipProperty_make_integral_ConfigManager:GetEquipFighting(fightingMaxEquip.equipConfig,data.talentConfig) < EquipProperty_make_integral_ConfigManager:GetEquipFighting(equips[index].equipConfig,data.talentConfig))then
						fightingMaxEquip = equips[index]
					end
				end

				local heroEquip = data:GetEquipByField(i + 1)
				if(heroEquip ~= nil)then
					if(heroEquip.equipId > 0)then
						local cfg = CSEquipConfigManagerInst:GetEquipInfoConfig(heroEquip.equipId)

						if (cfg ~= nil and EquipProperty_make_integral_ConfigManager:GetEquipFighting(cfg,data.talentConfig) < EquipProperty_make_integral_ConfigManager:GetEquipFighting(fightingMaxEquip.equipConfig,data.talentConfig)) then
							heroChangeEquips:Add(CS.HeroChangeEquipData(data.uid, i + 1, fightingMaxEquip.itemUid))
						end
					else
						heroChangeEquips:Add(CS.HeroChangeEquipData(data.uid, i + 1, fightingMaxEquip.itemUid))
					end
				end
			end
		end

		return heroChangeEquips

	end
)


util.hotfix_ex(
	CS.RoleDataProxy,
	"GetHeroChangeData",
	function (self,msg)
		self:GetHeroChangeData(msg)
		EventDispatcher:dispatchEvent(GameEvent.Activity_DeadRisingEvent.RefreshUI_Activity_DeadRising_SelectHeroUI)
	end)

util.hotfix_ex(
	CS.RoleDataProxy,
	"GetHeroRefreshData",
	function (self,msg)
		self:GetHeroRefreshData(msg)
		EventDispatcher:dispatchEvent(GameEvent.Activity_DeadRisingEvent.RefreshUI_Activity_DeadRising_SelectHeroUI)
	end)

