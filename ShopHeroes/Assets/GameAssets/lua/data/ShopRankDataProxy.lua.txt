--ShopRankDataProxy

require("class")
require("data/BaseDataProxy")
require("event/GameEvent")
require("network/NetworkEvent")
local EventDispatcher = require("event/EventDispatcher")
local csEventControllerInst = CS.EventController.inst
local csGameEventType = CS.GameEventType
local csGameTimerInst = CS.GameTimer.inst
local cs_LanguageManagerInst = CS.LanguageManager.inst
local csGUIHelper = CS.GUIHelper

ShopRankDataProxy = class(BaseDataProxy)

ShopRankDataProxy.inst = ShopRankDataProxy:new()

function ShopRankDataProxy:Init()
	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_User_RankList_Cmd,
		function(resp)
			print("Response_User_RankList_Cmd success", resp)
			self:GetRankData(resp)
		end,
		function(code)
			print("Response_User_RankList_Cmd fail --- code", code)
			--csEventControllerInst:TriggerEvent(csGameEventType.SHOWUI_MSGBOX,"获取签到数据失败!")
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_User_ExchangeCodeReward_Cmd,
		function(resp)
			print("Response_User_ExchangeCodeReward_Cmd success", resp)
			self:GetExchangeData(resp)
		end,
		function(code)
			print("Response_User_ExchangeCodeReward_Cmd fail --- code", code)
			--csEventControllerInst:TriggerEvent(csGameEventType.SHOWUI_MSGBOX,"获取签到数据失败!")
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_User_SearchHeroInfo_Cmd,
		function(resp)
			print("Response_User_SearchHeroInfo_Cmd success", resp)
			self:GetOtherHeroData(resp)
		end,
		function(code)
			print("Response_User_SearchHeroInfo_Cmd fail --- code", code)
			--csEventControllerInst:TriggerEvent(csGameEventType.SHOWUI_MSGBOX,"获取签到数据失败!")
		end
	)
	
	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_Client_Af_Cmd,
		function(resp)
			print("Response_Client_Af_Cmd success", resp)
			self:GetAFFunc(resp)
		end,
		function(code)
			print("Response_Client_Af_Cmd fail --- code", code)
			--csEventControllerInst:TriggerEvent(csGameEventType.SHOWUI_MSGBOX,"获取签到数据失败!")
		end
	)

	self.headPrefabPool = {}
	self.curRankList = {}
	self.curSelectItemId = nil

	self.numberIcon = {}
	self.numberIcon[1] = "zhuejiemian_meiyuan"
	self.numberIcon[2] = "zhuejiemian_xiaofangzi"
	self.numberIcon[3] = "zhuejiemian_meiyuan"
end

function ShopRankDataProxy:GetAFFunc(respData)
	local data = MsgType.Response_Client_Af:New(respData)
	if (CS.EErrorCode.__CastFrom(data.errorCode) ~= CS.EErrorCode.EEC_Success) then
		return
	end
	CS.PlatformManager.inst:GameHandleEventLog(data.eventName,"")
end

function ShopRankDataProxy:GetRankData(respData)
	local data = MsgType.Response_User_RankList:New(respData)
	if (CS.EErrorCode.__CastFrom(data.errorCode) ~= CS.EErrorCode.EEC_Success) then
		return
	end

	self.selfRankInfo = data.userRank
	self.curRankList = data.rankList
	self.rankId = data.rankId
	self.rankListType = data.rankListType

	EventDispatcher:dispatchEvent(GameEvent.RankEvent.Open_RankUI,data.rankId,self.curRankList,self.selfRankInfo)
	
	--测试
	--if(tonumber(self.rankListType) == 4)then
		--self.tempList = {}
		--local tempRankData = {}
		--tempRankData.heroId = CS.RoleDataProxy.inst.HeroList[2].id	
		--tempRankData.heroUid = CS.RoleDataProxy.inst.HeroList[2].uid
		--tempRankData.rank = 1
		--tempRankData.gender = CS.RoleDataProxy.inst.HeroList[2].gender
		--tempRankData.userDress = CS.RoleDataProxy.inst.HeroList[2].roleDress
		--tempRankData.name = ""
		--tempRankData.userId = ""
		--tempRankData.number = 100
		--tempRankData.heroEquipList = CS.RoleDataProxy.inst.HeroList[2]:GetAllWearEquipId()
		--self.tempList[1] = tempRankData
		--EventDispatcher:dispatchEvent(GameEvent.RankEvent.Open_RankUI,1,self.tempList,tempRankData)
	--else
		
	--end
end

function ShopRankDataProxy:GetOtherHeroData(respData)
	local data = MsgType.Response_User_SearchHeroInfo:New(respData)
	if (CS.EErrorCode.__CastFrom(data.errorCode) ~= CS.EErrorCode.EEC_Success) then
		return
	end

	self.curSearchHeroInfo = data.heroInfo
	EventDispatcher:dispatchEvent(GameEvent.RankEvent.ShowUI_RoleInfo,self.curSearchHeroInfo,data.userId,data.name)
end

function ShopRankDataProxy:GetExchangeData(respData)
	local data = MsgType.Response_User_ExchangeCodeReward:New(respData)
	if (CS.EErrorCode.__CastFrom(data.errorCode) ~= CS.EErrorCode.EEC_Success) then
		if (CS.EErrorCode.__CastFrom(data.errorCode) == CS.EErrorCode.EEC_ExchangeCodeReward_Failed)then
			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.System.String,CS.UnityEngine.Color)
			func(csEventControllerInst, csGameEventType.SHOWUI_TEXTMSGTIP, cs_LanguageManagerInst:GetValueByKey("兑换失败"),csGUIHelper.GetColorByColorHex("FF2828"))
		end
		if (CS.EErrorCode.__CastFrom(data.errorCode) == CS.EErrorCode.EEC_ExchangeCodeReward_CodeUsed)then
			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.System.String,CS.UnityEngine.Color)
			func(csEventControllerInst, csGameEventType.SHOWUI_TEXTMSGTIP, cs_LanguageManagerInst:GetValueByKey("兑换码已经被使用"),csGUIHelper.GetColorByColorHex("FF2828"))
		end
		if (CS.EErrorCode.__CastFrom(data.errorCode) == CS.EErrorCode.EEC_ExchangeCodeReward_Rewarded)then
			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.System.String,CS.UnityEngine.Color)
			func(csEventControllerInst, csGameEventType.SHOWUI_TEXTMSGTIP, cs_LanguageManagerInst:GetValueByKey("已兑换"),csGUIHelper.GetColorByColorHex("FF2828"))
		end
		if (CS.EErrorCode.__CastFrom(data.errorCode) == CS.EErrorCode.EEC_ExchangeCodeReward_TimeOut)then
			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.System.String,CS.UnityEngine.Color)
			func(csEventControllerInst, csGameEventType.SHOWUI_TEXTMSGTIP, cs_LanguageManagerInst:GetValueByKey("兑换码已过有效时间"),csGUIHelper.GetColorByColorHex("FF2828"))
		end
		if (CS.EErrorCode.__CastFrom(data.errorCode) == CS.EErrorCode.EEC_ExchangeCodeReward_NotTime)then
			local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
			local func = funcGeneric(CS.System.String,CS.UnityEngine.Color)
			func(csEventControllerInst, csGameEventType.SHOWUI_TEXTMSGTIP, cs_LanguageManagerInst:GetValueByKey("未到兑换码有效时间"),csGUIHelper.GetColorByColorHex("FF2828"))
		end
		return
	end

	EventDispatcher:dispatchEvent(GameEvent.ExchangeEvent.Hide_ExchangeUI)

	if (#data.rewardList > 1) then
		--csEventControllerInst:TriggerEvent_Lua1(csGameEventType.ReceiveEvent.NEWITEM_MSG,awardItem)
		local tempList = {}
		for i = 1, #data.rewardList do
			local tempCommonRewardData = CS.CommonRewardData(data.rewardList[i].itemId, data.rewardList[i].count, 0,data.rewardList[i].itemType)
			tempList[i] = tempCommonRewardData
		end
		local awardItem = CS.Award_AboutCommon()
		awardItem.type = CS.ReceiveInfoUIType.CommonReward
		awardItem.allRewardList = tempList

		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua1")
		local func = funcGeneric(CS.Award_AboutCommon)
		func(csEventControllerInst, csGameEventType.ReceiveEvent.NEWITEM_MSG, awardItem)
	else
		--csEventControllerInst:TriggerEvent_Lua1(csGameEventType.ReceiveEvent.NEWITEM_MSG,queueItem)
		local cfg = CS.ItemconfigManager.inst:GetConfig(data.rewardList[1].itemId)
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua1")
		local func = funcGeneric(CS.queueItem)
		if (cfg ~= nil) then
			local queueItem = CS.queueItem(CS.ReceiveInfoUIType.GetItem, "", 0, data.rewardList[1].itemId, data.rewardList[1].count)

			func(csEventControllerInst, csGameEventType.ReceiveEvent.NEWITEM_MSG, queueItem)
		else
			local queueItem = CS.queueItem(CS.ReceiveInfoUIType.GetItem, "", data.rewardList[1].itemId, 0, data.rewardList[1].count)

			func(csEventControllerInst, csGameEventType.ReceiveEvent.NEWITEM_MSG, queueItem)
		end
	end
	--EventDispatcher:dispatchEvent(GameEvent.RankEvent.Open_RankUI,data.rankId,self.curRankList,self.selfRankInfo)
end

function ShopRankDataProxy:ClearPool()
	for i, v in pairs(self.headPrefabPool) do
		if(v ~= nil)then
			CS.UnityEngine.Object.Destroy(v.gameObject)
		end
	end

	self.headPrefabPool = {}
end

function ShopRankDataProxy:Clear()
end

function ShopRankDataProxy:GetData()
end
