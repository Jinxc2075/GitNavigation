--Activity_WorkerGameProxy

require("class")
require("data/BaseDataProxy")
require("event/GameEvent")
require("network/NetworkEvent")
local EventDispatcher = require("event/EventDispatcher")
local CS_EventControllerInst = CS.EventController.inst
local CS_GameEventType = CS.GameEventType
local CS_GameTimerInst = CS.GameTimer.inst
local CS_ItemType = CS.ItemType
local CS_LanguageManagerInst = CS.LanguageManager.inst
local CS_PlayerPrefs = CS.UnityEngine.PlayerPrefs
local CS_AccountDataProxyInst = CS.AccountDataProxy.inst
local CS_UserDataProxyInst = CS.UserDataProxy.inst
local CS_WorldParConfigManagerInst = CS.WorldParConfigManager.inst
local CS_itemConfigManagerInst = CS.ItemconfigManager.inst
local CS_EquipConfigManagerInst = CS.EquipConfigManager.inst


Activity_WorkerGameProxy = class(BaseDataProxy)

Activity_WorkerGameProxy.inst = Activity_WorkerGameProxy:new()

function Activity_WorkerGameProxy:init()
	self.makingActivityList = {} --当前制作加积分的列表
	self.scoreRewardList = {} --积分等级达到奖励列表
	self.scoreCanRewardCount = 0 --积分到达奖励为可领取状态的数量（仅状态）
	self.exchangeList = {} --活动币兑换列表
	self.slotList = {} --槽位列表补充
	self.exchangeRefreshTime = 0
	--兑换奖励刷新时间
	self.exchangeRefreshTime_serverEndTime = 0 --兑换奖励刷新时间结束时间
	self.scorePoint = 0 --活动积分 总积分
	self.scorePoint_self = 0 --活动积分 个人积分
	self.coin = 0 --活动币
	self.endtime = 0 --结束时间
	self.endtime_serverEndtime = 0 --结束时间_服务器时间
	self.flag = false --是否开启
	self.coinFreeFlag = false --免费领取活动币的flag
	self.coinGiftsData = {} --活动币礼包数据

	self.exchangeRefreshTimer = 0 --兑换奖励刷新时间timer
	self.endTimer = 0 --结束时间timer

	self.stringList = {} --各个地方显示的语句

	---测试---
	--self:test()
end

function Activity_WorkerGameProxy:test()
	self.flag = true
	self.endtime = 6000
	self.scorePoint = 500 --活动积分
	self.coin = 160 --活动币
	self.slotList[1] = {slotId = 1, makingState = 1, activityFlag = 1}
	self.slotList[2] = {slotId = 2, makingState = 1, activityFlag = 0}
	self.slotList[3] = {slotId = 3, makingState = 0, activityFlag = 0}

	self:setMakingActivityData(
		{
			rowId = 1,
			index = 1,
			id = 1,
			type = 1,
			remainTime = 9000
		}
	)

	self:setMakingActivityData(
		{
			rowId = 1,
			index = 2,
			id = 3,
			type = 2,
			remainTime = 7200
		}
	)

	self:setMakingActivityData(
		{
			rowId = 1,
			index = 3,
			id = 22,
			type = 2,
			remainTime = 5400
		}
	)

	self:setMakingActivityData(
		{
			rowId = 1,
			index = 4,
			id = 1010,
			type = 3,
			remainTime = 5400
		}
	)

	self:setExchangeData(
		{
			index = 1,
			itemId = 161160,
			itemType = 16,
			cost = 200,
			state = 0
		}
	)

	self:setExchangeData(
		{
			index = 2,
			itemId = 164140,
			itemType = 16,
			cost = 150,
			state = 0
		}
	)

	self:setExchangeData(
		{
			index = 3,
			itemId = 162150,
			itemType = 16,
			cost = 120,
			state = 1
		}
	)

	self:setExchangeData(
		{
			index = 4,
			itemId = 413010,
			itemType = 40,
			cost = 60,
			state = 0
		}
	)
end

function Activity_WorkerGameProxy:Init()
	self:init()

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_DataCheck_Cmd,
		function(resp)
			print("Response_OperatingActivity_DataCheck success", resp)
			self:GetWorkerGameStateData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_DataCheck fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_ActivityPointChange_Cmd,
		function(resp)
			print("Response_OperatingActivity_ActivityPointChange success", resp)
			self:ActivityPointChange(resp)
		end,
		function(code)
			print("Response_OperatingActivity_ActivityPointChange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_CoinChange_Cmd,
		function(resp)
			print("Response_OperatingActivity_CoinChange success", resp)
			self:CoinChange(resp)
		end,
		function(code)
			print("Response_OperatingActivity_CoinChange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_Check_Cmd,
		function(resp)
			print("Response_OperatingActivity_Check success", resp)
			self:GetWorkerGameMakingActivityListData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_Check fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_UpdateInfo_Cmd,
		function(resp)
			print("Response_OperatingActivity_UpdateInfo success", resp)
			self:UpdateWorkerGameMakingActivityData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_UpdateInfo fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_CheckReward_Cmd,
		function(resp)
			print("Response_OperatingActivity_CheckReward success", resp)
			self:GetWorkerGameScoreRewardListData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_CheckReward fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_Reward_Cmd,
		function(resp)
			print("Response_OperatingActivity_Reward success", resp)
			self:RewardWorkerGameScoreRewardData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_Reward fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_RewardChange_Cmd,
		function(resp)
			print("Response_OperatingActivity_RewardChange success", resp)
			self:WorkerGameScoreRewardDataChange(resp)
		end,
		function(code)
			print("Response_OperatingActivity_RewardChange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_CheckExchange_Cmd,
		function(resp)
			print("Response_OperatingActivity_CheckExchange success", resp)
			self:GetWorkerGameExchangeListData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_CheckExchange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_Exchange_Cmd,
		function(resp)
			print("Response_OperatingActivity_Exchange success", resp)
			self:RewardWorkerGameExchangeData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_Exchange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_UpdateExchange_Cmd,
		function(resp)
			print("Response_OperatingActivity_UpdateExchange success", resp)
			self:UpdateWorkerGameExchangeData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_UpdateExchange fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_EquipMakeInfo_Cmd,
		function(resp)
			print("Response_OperatingActivity_EquipMakeInfo success", resp)
			self:GetWorkerGameEquipSlotData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_EquipMakeInfo fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_DailyCoin_Cmd,
		function(resp)
			print("Response_OperatingActivity_DailyCoin success", resp)
			self:GetDailyFreeCoinData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_DailyCoin fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_Pay_OperatingActivityPurchase_Cmd,
		function(resp)
			print("Response_Pay_OperatingActivityPurchase success", resp)
			self:GetActivityPurchaseData(resp)
		end,
		function(code)
			print("Response_Pay_OperatingActivityPurchase fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)

	NetworkEvent:SetCallback(
		MsgTypeCmd.Response_OperatingActivity_UnionRankList_Cmd,
		function(resp)
			print("Response_OperatingActivity_UnionRankList success", resp)
			self:GetActivityUnionMemberRankData(resp)
		end,
		function(code)
			print("Response_OperatingActivity_UnionRankList fail --- code", code)
			CS_EventControllerInst:TriggerEvent(
				CS_GameEventType.SHOWUI_MSGBOX,
				CS_LanguageManagerInst:GetValueByKey("巧匠大赛数据获取失败")
			)
		end
	)
end

function Activity_WorkerGameProxy:Clear()
end

function Activity_WorkerGameProxy:clearExchangeRefreshTimer()
	if self.exchangeRefreshTimer ~= 0 then
		CS_GameTimerInst:RemoveTimer(self.exchangeRefreshTimer)
		self.exchangeRefreshTimer = 0
	end
end

function Activity_WorkerGameProxy:clearEndTimeTimer()
	if self.endTimer ~= 0 then
		CS_GameTimerInst:RemoveTimer(self.endTimer)
		self.endTimer = 0
	end
end

function Activity_WorkerGameProxy:clearTimer()
	self:clearExchangeRefreshTimer()
	self:clearEndTimeTimer()
end

function Activity_WorkerGameProxy:setExchangeRefreshTimer()

	self:clearExchangeRefreshTimer()

	if (self.exchangeRefreshTime_serverEndTime < CS_GameTimerInst.serverNow) then
		return
	end

	self.exchangeRefreshTimer = CS_GameTimerInst:AddTimer(self.exchangeRefreshTime,1,function()
			self:exchangeRefreshTimerMethod()
		end,CS.GameTimerType.byServerTime)

end

function Activity_WorkerGameProxy:exchangeRefreshTimerMethod()

	self.exchangeRefreshTime = self.exchangeRefreshTime_serverEndTime - CS_GameTimerInst.serverNow
	if self.exchangeRefreshTime > 0 then
		self.exchangeRefreshTimer = CS_GameTimerInst:AddTimer(self.exchangeRefreshTime,1,function()
				self:exchangeRefreshTimerMethod()
			end,CS.GameTimerType.byServerTime)
	else
		EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.Request_OperatingActivity_UpdateExchange,0,1)
	end

end

function Activity_WorkerGameProxy:setEndtimeTimer()

	self:clearEndTimeTimer()

	if (self.endtime_serverEndtime < CS_GameTimerInst.serverNow) then
		return
	end

	local remainTime = self.endtime_serverEndtime - CS_GameTimerInst.serverNow
	self.endTimer = CS_GameTimerInst:AddTimer(remainTime,1,function()
			self:endtimeTimerMethod()
		end,CS.GameTimerType.byServerTime)
end

function Activity_WorkerGameProxy:endtimeTimerMethod()

	local remainTime = self.endtime_serverEndtime - CS_GameTimerInst.serverNow

	if remainTime > 0 then
		self.endTimer = CS_GameTimerInst:AddTimer(remainTime,1,function()
				self:endtimeTimerMethod()
			end,CS.GameTimerType.byServerTime)
	else
		EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.Request_OperatingActivity_DataCheck)
	end

end

--获取巧匠大赛状态
function Activity_WorkerGameProxy:GetWorkerGameStateData(respData)
	local data = MsgType.Response_OperatingActivity_DataCheck:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self.scoreCanRewardCount = 0;
	self.scorePoint = data.activityPoint
	self.scorePoint_self = data.userActivityPoint
	self.coin = data.operatingActivityCoin
	self.endtime = data.endTime
	self.endtime_serverEndtime = self.endtime + CS_GameTimerInst.serverNow
	self.flag = data.flag == 1
	self.version = data.version

	if self.flag then
		self:setEndtimeTimer()
	else
		self:clearEndTimeTimer()
	end

	self.stringList = data.stringList

	if CS_UserDataProxyInst.playerData.level >= CS_WorldParConfigManagerInst:GetConfig(323).parameters then --等级足够
		if self.flag then --活动开启
			local storyNpcCfg = StoryNpcConfigManager:GetConfig(3, -1)

			if
				storyNpcCfg ~= nil and
				CS_PlayerPrefs.GetString(
					CS_AccountDataProxyInst.account ..
					"_StoryNpc_ActivityWorkerGame_" .. tostring(self.version) .. "_" .. tostring(storyNpcCfg.story_id),
					"-1"
				) == "-1"
				then
				EventDispatcher:dispatchEvent(
					GameEvent.EventSystem.AddEvent,
					GameEvent.StoryRoleEvent.AddStoryRole,
					{
						storyType = 3,
						parame = -1,
						callback = function()
							CS_PlayerPrefs.SetString(
								CS_AccountDataProxyInst.account ..
								"_StoryNpc_ActivityWorkerGame_" .. tostring(self.version) .. "_" .. tostring(storyNpcCfg.story_id),
								"1"
							)
							EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.ShowUI_Activity_WorkerGamePanel)
							CS.GoOperationManager.inst.isDoing = false
							EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefrshActivity_WorkerGameState, self.flag)
							CS.FGUI.inst:SetAllUIInteractable(true)
							CS.FGUI.inst:SetAllUIAlpha(1)
							EventDispatcher:dispatchEvent(GameEvent.EventSystem.EventEnd)
							EventDispatcher:dispatchEvent(GameEvent.ShopMapEditEvent.ShowHeadTips)
						end
					},
					ExecuteType.queueup,
					kGameState.Shop
				)
			else
				EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefrshActivity_WorkerGameState, self.flag)
			end
		else
			EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefrshActivity_WorkerGameState, self.flag)
		end
	end
end

function Activity_WorkerGameProxy:GetActivityStr(type)
	local str = nil

	for i = 1, #self.stringList do
		if self.stringList[i].type == type then
			local data = self.stringList[i]

			if CS_LanguageManagerInst.curType == CS.LanguageType.SIMPLIFIED_CHINESE then
				str = data.CN
			elseif CS_LanguageManagerInst.curType == CS.LanguageType.TRADITIONAL_CHINESE then
				str = data.TW
			elseif CS_LanguageManagerInst.curType == CS.LanguageType.ENGLISH then
				str = data.EN
			end

			break
		end
	end

	return (str == nil or str == "") and CS_LanguageManagerInst:GetValueByKey("-暂无-") or str
end

function Activity_WorkerGameProxy:ActivityPointChange(respData)
	local data = MsgType.Response_OperatingActivity_ActivityPointChange:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	local scorePointChangeVal = data.activityPoint - self.scorePoint

	self.scorePoint = data.activityPoint
	self.scorePoint_self = data.userActivityPoint

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGamePanel_PointChanged,scorePointChangeVal)
end

function Activity_WorkerGameProxy:CoinChange(respData)
	local data = MsgType.Response_OperatingActivity_CoinChange:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	local lastCoinCount = self.coin

	self.coin = data.operatingActivityCoin

	if self.coin > lastCoinCount then
		local funcGeneric_3 = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua3")
		local func_3 = funcGeneric_3(CS.System.Int64, CS.System.Int64, CS.System.Int64)
		func_3(
			CS_EventControllerInst,
			CS_GameEventType.Activity_WorkerGameCoin_Fly,
			self.coin - lastCoinCount,
			lastCoinCount,
			self.coin
		)
	else
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua2")
		local func_2 = funcGeneric(CS.System.Int64, CS.System.Int64)

		func_2(CS_EventControllerInst, CS_GameEventType.ItemChangeEvent.ACTIVITY_WORKERGAME_COIN, 0, self.coin)
	end
end

function Activity_WorkerGameProxy:setMakingActivityData(data)
	if data.remainTime > 0 then
		if self.makingActivityList[data.index] == nil then
			local makingActivityData = WorkerGame_MakingActivityData.new()
			self.makingActivityList[data.index] = makingActivityData
		end

		self.makingActivityList[data.index]:SetData(data)
	else
		--self.makingActivityList[data.index]
		if self.makingActivityList[data.index] ~= nil then
			self.makingActivityList[data.index]:clearTimer()
		end
	end
end

function Activity_WorkerGameProxy:getMakingActivityData(index)
	return self.makingActivityList[index]
end

function Activity_WorkerGameProxy:GetMakingActivityRateByEquipDrawingId(equipDrawingId)
	local rate = 0

	if not self.flag then
		return 0
	end

	local equipDrawingCfg = CS_EquipConfigManagerInst:GetEquipDrawingsCfg(equipDrawingId)

	for i = 1, 4 do
		local activityData = self:getMakingActivityData(i)

		if activityData ~= nil then
			if activityData.serverData.type == MsgType.EOperatingActivityInfoType.EquipPropertyType then --装备大类
				if activityData.serverData.id == equipDrawingCfg.type then
					rate = rate + 1
				end
			elseif activityData.serverData.type == MsgType.EOperatingActivityInfoType.EquipPropertySubType then --装备小类
				if activityData.serverData.id == equipDrawingCfg.sub_type then
					rate = rate + 1
				end
			elseif activityData.serverData.type == MsgType.EOperatingActivityInfoType.EquipDrawingId then --指定装备
				if activityData.serverData.id == equipDrawingId then
					rate = rate + 2
				end
			end
		end
	end

	return rate
end

function Activity_WorkerGameProxy:GetEquipMakeIntegralByDrawingId(equipDrawingId)

	local workerGameRate = self:GetMakingActivityRateByEquipDrawingId(equipDrawingId)

	local makeIntegral = EquipProperty_make_integral_ConfigManager:GetEquipMakeIntegralByEquipDrawingId(equipDrawingId)

	if workerGameRate <= 0 then
		makeIntegral = 0
	elseif workerGameRate >= 2 then --双倍及以上
		makeIntegral = makeIntegral * workerGameRate
	end

	return makeIntegral

end

function Activity_WorkerGameProxy:setExchangeData(data)
	self.exchangeList[data.index] = data
end

function Activity_WorkerGameProxy:getExchangeData(index)
	return self.exchangeList[index]
end

function Activity_WorkerGameProxy:GetCurScorePointLv()
	local lv = 1

	local num = #self.scoreRewardList

	for i = num, 1, -1 do
		local data = self.scoreRewardList[i]
		if tonumber(self.scorePoint) >= tonumber(data.needPoint) then
			lv = i
			break
		end
	end

	return tonumber(lv)
end

function Activity_WorkerGameProxy:GetCurSelfScorePointLv()
	local lv = 1

	local num = #self.scoreRewardList

	for i = num, 1, -1 do
		local data = self.scoreRewardList[i]
		if tonumber(self.scorePoint_self) >= tonumber(data.userNeedPoint) then
			lv = i
			break
		end
	end

	return tonumber(lv)
end

function Activity_WorkerGameProxy:GetNoneExchangeDataNum()
	local count = 0

	for i, v in ipairs(self.exchangeList) do
		if v.state == MsgType.EOperatingActivityExchangeState.None then
			count = count + 1
		end
	end

	return count
end

function Activity_WorkerGameProxy:GetTurnPageExchangeData(index, isLeft)
	local curIndex = index

	for i = 1, 10 do
		curIndex = curIndex + (isLeft and -1 or 1)

		if curIndex == 0 then
			curIndex = 4
		elseif curIndex == 5 then
			curIndex = 1
		end

		local data = self:getExchangeData(curIndex)

		if data.state == MsgType.EOperatingActivityExchangeState.None then
			return data
		end
	end

	return nil
end

function Activity_WorkerGameProxy:setScoreRewardData(data)
	local state1 = false
	local state2 = false

	if self.scoreRewardList[tonumber(data.groupId)] ~= nil then
		state1 = self.scoreRewardList[tonumber(data.groupId)].rewardList[1].state or false
		state2 = self.scoreRewardList[tonumber(data.groupId)].rewardList[2].state or false
	end

	self.scoreRewardList[tonumber(data.groupId)] = data

	if state1 then
		if
			state1 == MsgType.EOperatingActivityRewardState.None and
			data.rewardList[1].state == MsgType.EOperatingActivityRewardState.CanReward
			then
			self.scoreCanRewardCount = self.scoreCanRewardCount + 1
		elseif
			state1 == MsgType.EOperatingActivityRewardState.CanReward and
			data.rewardList[1].state == MsgType.EOperatingActivityRewardState.Rewarded
			then
			self.scoreCanRewardCount = self.scoreCanRewardCount - 1
		end
	elseif data.rewardList[1].state == MsgType.EOperatingActivityRewardState.CanReward then
		self.scoreCanRewardCount = self.scoreCanRewardCount + 1
	end

	if state2 then
		if
			state2 == MsgType.EOperatingActivityRewardState.None and
			data.rewardList[2].state == MsgType.EOperatingActivityRewardState.CanReward
			then
			self.scoreCanRewardCount = self.scoreCanRewardCount + 1
		elseif
			state2 == MsgType.EOperatingActivityRewardState.CanReward and
			data.rewardList[2].state == MsgType.EOperatingActivityRewardState.Rewarded
			then
			self.scoreCanRewardCount = self.scoreCanRewardCount - 1
		end
	elseif data.rewardList[2].state == MsgType.EOperatingActivityRewardState.CanReward then
		self.scoreCanRewardCount = self.scoreCanRewardCount + 1
	end
end

function Activity_WorkerGameProxy:GetScoreRewardData(groupId, index)
	groupId = tonumber(groupId)

	if self.scoreRewardList[groupId] ~= nil then
		for i = 1, #self.scoreRewardList[groupId].rewardList do
			local oneScoreRewardData = self.scoreRewardList[groupId].rewardList[i]

			if oneScoreRewardData ~= nil and oneScoreRewardData.id == index then
				return oneScoreRewardData
			end
		end
	end

	return nil
end

function Activity_WorkerGameProxy:setMakeSlotData(data)
	self.slotList[data.slotId] = data
end

function Activity_WorkerGameProxy:getMakeSlotData(slotId)
	return self.slotList[slotId]
end

--加积分奖励的制作列表
function Activity_WorkerGameProxy:GetWorkerGameMakingActivityListData(respData)
	local data = MsgType.Response_OperatingActivity_Check:New(respData)
	--data.list
	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	for i = 1, #data.list do
		self:setMakingActivityData(data.list[i])
		EventDispatcher:dispatchEvent(
			GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_MakingActivityDataChanged,
			data.list[i].index
		)
	end
end

--加积分奖励的制作列表单个刷新
function Activity_WorkerGameProxy:UpdateWorkerGameMakingActivityData(respData)
	local data = MsgType.Response_OperatingActivity_UpdateInfo:New(respData)
	--data.data

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self:setMakingActivityData(data.data)

	EventDispatcher:dispatchEvent(
		GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_MakingActivityDataChanged,
		data.data.index
	)
end

--积分等级到达奖励列表
function Activity_WorkerGameProxy:GetWorkerGameScoreRewardListData(respData)
	local data = MsgType.Response_OperatingActivity_CheckReward:New(respData)
	--data.rewardList

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self.scoreCanRewardCount = 0;

	for i = 1, #data.rewardList do
		local groupData = data.rewardList[i]
		self:setScoreRewardData(groupData)
	end

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGameScoreRewardPanel)
	EventDispatcher:dispatchEvent(
		GameEvent.Activity_WorkerGameEvent.RefreshRedPoint_Activity_WorkerGame_ScoreCanReward,
		self.scoreCanRewardCount > 0
	)
end

--单个积分等级到达奖励(领取回调)
function Activity_WorkerGameProxy:RewardWorkerGameScoreRewardData(respData)
	local data = MsgType.Response_OperatingActivity_Reward:New(respData)
	--data.rewardItem
	--data.reward

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self:setScoreRewardData(data.rewardItem)

	local cfg = CS.ItemconfigManager.inst:GetConfig(data.reward.itemId)
	local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua1")
	local func = funcGeneric(CS.queueItem)
	if (cfg ~= nil) then
		local queueItem = CS.queueItem(CS.ReceiveInfoUIType.GetItem, "", 0, data.reward.itemId, data.reward.count)

		func(CS_EventControllerInst, CS_GameEventType.ReceiveEvent.NEWITEM_MSG, queueItem)
	else
		local queueItem = CS.queueItem(CS.ReceiveInfoUIType.GetItem, "", data.reward.itemId, 0, data.reward.count)

		func(CS_EventControllerInst, CS_GameEventType.ReceiveEvent.NEWITEM_MSG, queueItem)
	end

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGameScoreRewardPanel)
	EventDispatcher:dispatchEvent(
		GameEvent.Activity_WorkerGameEvent.RefreshRedPoint_Activity_WorkerGame_ScoreCanReward,
		self.scoreCanRewardCount > 0
	)
end

--单个积分等到达奖励刷新
function Activity_WorkerGameProxy:WorkerGameScoreRewardDataChange(respData)
	local data = MsgType.Response_OperatingActivity_RewardChange:New(respData)
	--data.rewardItem
	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self:setScoreRewardData(data.rewardItem)

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGameScoreRewardPanel)
	EventDispatcher:dispatchEvent(
		GameEvent.Activity_WorkerGameEvent.RefreshRedPoint_Activity_WorkerGame_ScoreCanReward,
		self.scoreCanRewardCount > 0
	)
end

--活动币兑换奖励列表
function Activity_WorkerGameProxy:GetWorkerGameExchangeListData(respData)
	local data = MsgType.Response_OperatingActivity_CheckExchange:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	for i = 1, #data.exchangeList do
		self:setExchangeData(data.exchangeList[i])
	end

	self.exchangeRefreshTime = data.exRefreshRemainTime
	self.exchangeRefreshTime_serverEndTime = self.exchangeRefreshTime + CS_GameTimerInst.serverNow
	self:setExchangeRefreshTimer()

	self.coinFreeFlag = data.coinCheckFlag == 1

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_WorkerGameCoinGiftsUI)
	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGamePanel_ExchangeData)
end

--活动币兑换奖励
function Activity_WorkerGameProxy:RewardWorkerGameExchangeData(respData)
	local data = MsgType.Response_OperatingActivity_Exchange:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self:setExchangeData(data.exchangeItem)
	self.exchangeRefreshTime = data.exRefreshRemainTime
	self.exchangeRefreshTime_serverEndTime = self.exchangeRefreshTime + CS_GameTimerInst.serverNow
	self:setExchangeRefreshTimer()

	self.coin = data.operatingActivityCoin

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGamePanel_ExchangeData)

	if data.exchangeItem.itemType ~= MsgType.EItemType.FixedEquipItem then
		local funcGeneric = xlua.get_generic_method(CS.EventController, "TriggerEvent_Lua1")
		local func = funcGeneric(CS.queueItem)
		local queueItem = CS.queueItem(CS.ReceiveInfoUIType.GetItem, "", 0, data.exchangeItem.itemId, 1)

		func(CS_EventControllerInst, CS_GameEventType.ReceiveEvent.NEWITEM_MSG, queueItem)
	end
end

--活动币兑换奖励刷新
function Activity_WorkerGameProxy:UpdateWorkerGameExchangeData(respData)
	local data = MsgType.Response_OperatingActivity_UpdateExchange:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	for i = 1, #data.exchangeList do
		self:setExchangeData(data.exchangeList[i])
	end

	self.exchangeRefreshTime = data.exRefreshRemainTime
	self.exchangeRefreshTime_serverEndTime = self.exchangeRefreshTime + CS_GameTimerInst.serverNow
	self:setExchangeRefreshTimer()

	self.coinFreeFlag = data.coinCheckFlag == 1

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_WorkerGameCoinGiftsUI)
	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_Activity_WorkerGamePanel_ExchangeData)
end

--制作槽位展示数据
function Activity_WorkerGameProxy:GetWorkerGameEquipSlotData(respData)
	local data = MsgType.Response_OperatingActivity_EquipMakeInfo:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	--data.slotId
	--data.equipDrawingId
	--data.makingState
	--data.activityFlag

	self:setMakeSlotData(data)
end

--免费领取活动币
function Activity_WorkerGameProxy:GetDailyFreeCoinData(respData)
	local data = MsgType.Response_OperatingActivity_DailyCoin:New(respData)
	--data.operatingActivityCoin
	--data.coinCheckFlag

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self.coinFreeFlag = data.coinCheckFlag == 1

	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshUI_WorkerGameCoinGiftsUI)
	EventDispatcher:dispatchEvent(GameEvent.Activity_WorkerGameEvent.RefreshRedPoint_Activity_WorkerGame_ScoreCanReward)
end

--活动币礼包数据
function Activity_WorkerGameProxy:GetActivityPurchaseData(respData)
	local data = MsgType.Response_Pay_OperatingActivityPurchase:New(respData)
	--data.operatingActivityPurchasePurchaseList

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	self.coinGiftsData = data.operatingActivityPurchasePurchaseList.purchaseList
end

--联盟人员积分排行榜数据
function Activity_WorkerGameProxy:GetActivityUnionMemberRankData(respData)
	local data = MsgType.Response_OperatingActivity_UnionRankList:New(respData)

	if data.errorCode ~= MsgType.EErrorCode.EEC_Success then
		return
	end

	EventDispatcher:dispatchEvent(
		GameEvent.Activity_WorkerGameEvent.Activity_WorkerGame_GetUnionMemberRankMess,
		data.rankList
	)
end

--获取当前实际可领取的奖励数目(个人积分，公会积分都满足)
function Activity_WorkerGameProxy:GetScoreReallyCanRewardCount()
	local scoreReallyCanRewardCount = 0

	local num = #self.scoreRewardList

	for i = num, 1, -1 do
		local data = self.scoreRewardList[i]

		local selfScoreReach = tonumber(self.scorePoint_self) >= data.userNeedPoint
		local unionScoreReach = tonumber(self.scorePoint) >= data.needPoint

		for k = 1, #data.rewardList do
			if data.rewardList[k].state == MsgType.EOperatingActivityRewardState.CanReward and selfScoreReach and unionScoreReach then
				scoreReallyCanRewardCount = scoreReallyCanRewardCount + 1
			end
		end
	end

	return scoreReallyCanRewardCount
end

--查看当前积分等级达到奖励列表中是否包含对应宠物id的奖励
function Activity_WorkerGameProxy:GetScoreRewardIndexByPetId(petId)

	local lv = -1

	local num = #self.scoreRewardList

	for i = num, 1, -1 do

		local data = self.scoreRewardList[i]

		local selfScoreReach = tonumber(self.scorePoint_self) >= data.userNeedPoint

		for k = 1, #data.rewardList do

			local itemCfg = CS_itemConfigManagerInst:GetConfig(data.rewardList[k].item.itemId)

			if itemCfg ~= nil and CS_ItemType.__CastFrom(itemCfg.type) == CS_ItemType.PetSkin and itemCfg.effect == petId then --找到了该宠物的数据

				--如果活动开启 直接返回
				if self.flag then

					lv = i

				else

					--如果活动未开启 目前积分可领取 返回
					if data.rewardList[k].state == MsgType.EOperatingActivityRewardState.CanReward and selfScoreReach then
						lv = i
					end

				end

				break

			end

		end
	end

	return tonumber(lv)

end

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

--WorkerGame_MakingActivityData

WorkerGame_MakingActivityData = class()

function WorkerGame_MakingActivityData:ctor()
	self.countDownTimer = 0
end

function WorkerGame_MakingActivityData:SetData(serverData)
	self.serverData = serverData
	self.endTime = self.serverData.remainTime + CS_GameTimerInst.serverNow

	self:setTimer()
end

function WorkerGame_MakingActivityData:ClearTimer()
	if self.countDownTimer ~= 0 then
		CS_GameTimerInst:RemoveTimer(self.countDownTimer)
		self.countDownTimer = 0
	end
end

function WorkerGame_MakingActivityData:setTimer()

	self:ClearTimer()

	local remainTime = self.endTime - CS_GameTimerInst.serverNow
	self.countDownTimer = CS_GameTimerInst:AddTimer(remainTime,1,function()
			self:timerMethod()
		end,CS.GameTimerType.byServerTime)

end

function WorkerGame_MakingActivityData:timerMethod()

	local remainTime = self.endTime - CS_GameTimerInst.serverNow

	if remainTime > 0 then
		self.countDownTimer = CS_GameTimerInst:AddTimer(remainTime,1,function()
				self:timerMethod()
			end,CS.GameTimerType.byServerTime)
	else
		self:ClearTimer()
		EventDispatcher:dispatchEvent(
			GameEvent.Activity_WorkerGameEvent.Request_OperatingActivity_UpdateInfo,
			self.serverData.rowId,
			self.serverData.index
		)
	end


end

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
